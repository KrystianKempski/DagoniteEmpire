@page "/character/create"
@page "/character/edit/{id:int}"
@implements IDisposable
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IBaseSkillRepository _baseSkillRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject ITraitRepository<TraitAdvDTO> _traitAdvRepository
@inject ITraitRepository<TraitRaceDTO> _traitRaceRepository
@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject IRaceRepository _raceRepository
@inject IProfessionRepository _professionRepository
@inject IEquipmentRepository _equipmentRepository
@inject IUserService _userService
@inject IFileUpload _fileUpload;
@inject IJSRuntime _jsRuntime
@using DA_Models

@using Syncfusion.Blazor.Navigations

@inject NavigationManager _navigationManager
<_LeavePage IsParentComponentProcessing=IsLoading LeaveConfirmation="ConfirmLeave_Click" ></_LeavePage>
<div class="page">

    <div class="col-12">
         @if (IsLoading)
        {
            <LoadingPage></LoadingPage>
        }
        else
        {
            <section class="section-create-character">
                <div class="container-fluid">
                    <h3 class="char-title card-title mb-3 ml-3 mt-2">@Title character</h3>
                    <div class="row">
                        <div class="form-group col-md-4 px-1">
                            <label>Character name</label>
                            @if (AllParams.Character.IsApproved == false || UserInfo?.IsAdminOrMG == true)
                            {
                                <input type="text" @bind-value="AllParams.Character.NPCName" class="form-control"></input>
                            }
                            else
                            {
                                <input readonly type="text" @bind-value="AllParams.Character.NPCName" class="form-control"></input>
                            }
                            </div>
                        <div class="form-group col-md-1 px-1">
                            <label>Age</label>
                            @if (AllParams.Character.IsApproved == false || UserInfo?.IsAdminOrMG == true)
                            {
                                <InputNumber  @bind-Value="AllParams.Character.Age" class="form-control col-2"></InputNumber>
                            }
                            else
                            {
                                <InputNumber readonly @bind-Value="AllParams.Character.Age" class="form-control col-2"></InputNumber>
                            }
                        </div>
                       
                        <div class="form-group col-md-3 px-1">
                            <label>Character Type</label>
                            @if (AllParams.Character.IsApproved == false || UserInfo?.IsAdminOrMG == true)
                            {
                                <InputSelect @bind-Value="AllParams.Character.NPCType" class="form-select" @bind-Value:after="CharacterTypeHandle">
                                    <option checked="@(AllParams.Character!.NPCType == "Hero")" value="Hero">
                                        Hero
                                    </option>
                                    @if (IsDukeAllowed)
                                    {
                                        <option checked="@(AllParams.Character!.NPCType == "Duke")" value="Duke">
                                            Duke
                                        </option>
                                    }
                                </InputSelect>
                            }
                            else
                            {
                                <input readonly type="text" @bind-value="AllParams.Character.NPCType" class="form-control"></input>
                            }
                        </div>
                        @if (UserInfo?.IsAdminOrMG == true)
                        {
                            <div class="form-group col-md-1 px-1">
                                <label>Is Approved?</label>
                                <MudCheckBox @bind-Value="@AllParams.Character.IsApproved" Size="Size.Medium"></MudCheckBox>
                            </div>
                        }
                    </div>
                </div>
            </section>

             <section class="section-create-character">
                <div class="container-fluid">
                    <div class="row">
                        <div class="portrait border">
                            <div class="sheet-img">
                                @* <img src="../images/old_paper2.png" class="stretch" /> *@
                            </div>
                            <h3 class="my-3 ml-3 text-center">PORTRAIT</h3>
                            <div class="portrait-imageframe">
                                <img src="@AllParams.Character.ImageUrl" class="portrait-image" />
                                <div class="portrait-input">
                                    @if (AllParams.Character.IsApproved == false || UserInfo?.IsAdminOrMG == true)
                                    {
                                        <label class="input-label" for="input">@ChooseFile</label>
                                        <InputFile id="input" OnChange="HandleImageUpload" class="sr-only"></InputFile>
                                    }
                                </div>
                            </div>
                   
                            <div class="points-control">
                                    <label class="points-label">Avalible experience points:</label>
                                    <span class="points-indicator ml-auto">@AllParams.Character.CurrentExpPoints</span>
                            </div>
                            <div class="points-control">
                                @if (AllParams.Character.IsApproved == false || UserInfo?.IsAdminOrMG == true)
                                {
                                    <label class="points-label">Avalible attribute points:</label>
                                    <span class="points-indicator ml-auto">@AllParams.Character.AttributePoints</span>
                                }
                            </div>
                        </div>

                        <div class="attribute border">
                            <div class="sheet-img">
                                @* <img src="../images/old_paper2.png" class="stretch" /> *@
                            </div>
                            <h3 class="my-3 ml-3 text-center">ATTRIBUTES</h3>

                            <table class="table align-middle mb-1">
                            <thead>
                                <tr>
                                    <th scope="col" class="bonus-row text-center">Base</th>
                                    <th scope="col" class="sum-row text-center">Race</th>
                                    <th scope="col" class="sum-row text-center">Gear</th>
                                    <th scope="col" class="sum-row text-center">Trait</th>
                                    <th scope="col" class="sum-row text-center">Sum</th>
                                    <th scope="col" class="sum-row text-center">Mod.</th>
                                </tr>
                            </thead>
                                <tbody>
                               
                                    @foreach (var obj in AllParams.Attributes)
                                {
                                    <tr>
                                        <td class="name-row" colspan="6">
                                            <label class="names-label text-start">@obj.Name.ToUpper()</label>
                                        </td>
                                    </tr>
                                    <tr>
                                        
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.BaseBonus</span>
                                                <div class="arrows">
                                                    <button @onclick="@(()=>IncrAttr(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-up align-top"></i></button>
                                                    <button @onclick="@(()=>DecrAttr(obj))"class="attr-carret"><i class="fa-regular fa-square-caret-down align-top"></i></button>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.RaceBonus</span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.GearBonus</span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.TraitBonus</span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.SumBonus</span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.Modifier </span> 
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            </table>
                        </div>
                        <div class="baseskills border">
                            <div class="sheet-img">
                               @*  <img src="../images/old_paper2.png" class="stretch" /> *@
                            </div>
                            <h3 class="my-3 ml-3 text-center">BASE SKILLS</h3>
                            <table class="table align-middle">
                                <thead>
                                    <tr>
                                        <th scope="col" class="name-row">Skill</th>
                                        <th scope="col" class="bonus-row text-center">Base</th>
                                        <th scope="col" class="sum-row text-center">Race</th>
                                        <th scope="col" class="sum-row text-center">Gear</th>
                                        <th scope="col" class="sum-row text-center">Trait</th>
                                        <th scope="col" class="sum-row text-center"> Sum</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var obj in AllParams.BaseSkills)
                                    {
                                        <tr>
                                            <td>
                                                <label class="names-label">@obj.Name.ToUpper()</label>
                                            </td>
                                            <td>
                                                <div class="attr-control">
                                                    <span class="attr-indicator">@obj.BaseBonus</span>
                                                    <div class="arrows">
                                                        <button @onclick="@(()=>IncrBSBonus(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-up align-top"></i></button>
                                                        <button @onclick="@(()=>DecrBSBonus(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-down align-top"></i></button>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="attr-control">
                                                    <span class="attr-indicator">@obj.RaceBonus</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="attr-control">
                                                    <span class="attr-indicator">@obj.GearBonus</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="attr-control">
                                                    <span class="attr-indicator">@obj.TraitBonus</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="attr-control">
                                                    <span class="attr-indicator">@obj.SumBonus</span>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="races border">
                            <CascadingValue Value="@AllParams">
                                <RaceComponent OnTraitsChange="TraitsChange"></RaceComponent>
                            </CascadingValue>
                        </div>

                        <div class="profession border">
                            <CascadingValue Value="@AllParams">
                                <ProfessionComponent @bind-Profession="@AllParams.Profession"></ProfessionComponent>
                            </CascadingValue>
                        </div>

                        <div class="traits border">
                            <div class="sheet-img">
                                @* <img src="../images/old_paper2.png" class="stretch" /> *@
                            </div>
                            <h3 class="my-3 ml-3 text-center">TRAITS</h3>
                            <div class="trait-container">
                                <CascadingValue Value="@AllParams">
                                    <TraitsComponent OnTraitsChange="TraitsChange" @bind-Traits="@AllParams.Traits" TraitType="@SD.TraitType_Advantage"></TraitsComponent>
                                </CascadingValue>
                            </div>
                        </div>

                        <div class="description border">
                            <CascadingValue Value="@AllParams">
                                <CharDescriptionDialog DescriptionConfirmation="GetDescription" SavedDescription="@AllParams.Character.Description"></CharDescriptionDialog>
                            </CascadingValue>
                        </div>
                        <div class="equipment border">
                            <CascadingValue Value="@AllParams">
                                <EquipmentComponent OnTraitsChange="TraitsChange"></EquipmentComponent>
                            </CascadingValue>
                        </div>
                    </div>
                </div>
            </section>

            <section class="section-create-character">
                <div class="container-fluid">
                    <div class="row">
                        <h3 class="my-3 ml-3">SPECIAL SKILLS</h3>

                        <button class="btn btn-secondary" style="width: 180px; margin-left:10px; " @onclick="AutoChooseRelatedAttribute">Autoselect attributes</button>
                        <div class="specialskills">
                        
                            @foreach (var baseSkill in AllParams.BaseSkills)
                            {
                                <div class="specialskills-table border">
                                    <div class="sheet-img">
                                       @*  <img src="../images/old_paper2.png" class="stretch" /> *@
                                    </div>
                                <div class="specialskills-control">
                                    <label class="specialskills-label">@baseSkill.Name</label>
                                    <span class="specialskills-indicator">@baseSkill.SumBonus</span>
                                </div>
                                    <table class="table align-middle mb-1">
                                    <thead>
                                        <tr>
                                            <th scope="col" class="skillname-row">Skill</th>
                                            <th scope="col" class="bonus-row text-center">Base</th>
                                            <th scope="col" class="rel-attr-row">Related attribute</th>
                                            <th scope="col" class="sum-row text-center">Attr. mod.</th>
                                                <th scope="col" class="sum-row text-center">Race</th>
                                                <th scope="col" class="sum-row text-center">Trait</th>
                                            <th scope="col" class="sum-row text-center"> Sum</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                            @foreach (var obj in AllParams.SpecialSkills.Where(n => n.RelatedBaseSkillName == baseSkill.Name))
                                        {
                                             <tr class="name-tr-small">
                                                <td class="name-td-small" colspan="6">
                                                    @if (obj.Editable)
                                                    {
                                                            <InputText style="width: 100%;font-size: 14px;font-weight: bold; padding: 2px 0px 2px 0px; text-transform:uppercase; border: 1px solid RGB(206 212 218); border-radius:4px; background-color: transparent;" @bind-Value="obj.Name" class=""></InputText>
                                                    }
                                                    else
                                                    {
                                                        <label class="names-label">@obj.Name.ToUpper()</label>
                                                    }
                                                </td>
                                            </tr> 
                                            <tr>
                                                <td class="name-td-big">
                                                    @if (obj.Editable)
                                                    {
                                                            <InputText style="width: 100%;font-size: 14px;font-weight: bold; padding: 2px 0px 2px 0px; text-transform:uppercase; border: 1px solid RGB(206 212 218); border-radius:4px; background-color: transparent;" @bind-Value="obj.Name" class=""></InputText>
                                                    }
                                                    else
                                                    {
                                                        <label class="names-label">@obj.Name</label>
                                                    }
                                                    </td>
                                                <td>
                                                    <div class="attr-control">
                                                        <span class="attr-indicator">@obj.BaseBonus</span>
                                                        <div class="arrows">
                                                            <button @onclick="@(()=>IncrSSBonus(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-up align-top"></i></button>
                                                            <button @onclick="@(()=>DecrSSBonus(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-down align-top"></i></button>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="attribute-selector">
                                                        @if (obj.Editable)
                                                        {
                                                                <InputSelect style="width: 100%; background-color: transparent; margin: auto;  border: 1px solid RGB(206 212 218); border-radius: 4px;"
                                                                            ValueExpression="@(()=>obj.ChosenAttribute)"
                                                                            Value="@obj.ChosenAttribute"
                                                                            ValueChanged="@((string value) => ChangeSSRelatedAttribute(value, obj.Name))">
                                                                <option value="0" selected disabled>--Select--</option>
                                                                    @foreach(var att in SD.Attributes.All)
                                                                    {
                                                                        <option value=@att> @att</option>
                                                                    }
                                                            </InputSelect>
                                                        }
                                                        else
                                                        {
                                                            @if (obj.ChosenAttribute != null && obj.RelatedAttribute1 == "")
                                                            {
                                                                <label class="text-center" style="width: 100%;">@obj.ChosenAttribute</label>
                                                            }
                                                            else
                                                            {
                                                                    <InputSelect style="width: 100%; background-color: transparent; margin: auto;  border: 1px solid RGB(206 212 218);"
                                                                                ValueExpression="@(()=>obj.ChosenAttribute)"
                                                                                Value="@obj.ChosenAttribute"
                                                                                ValueChanged="@((string value) => ChangeSSRelatedAttribute(value, obj.Name))">
                                                                    <option value="0" selected disabled>--Select--</option>
                                                                    <option value="@obj.RelatedAttribute1"> @obj.RelatedAttribute1</option>
                                                                    <option value="@obj.RelatedAttribute2"> @obj.RelatedAttribute2</option>
                                                                </InputSelect>
                                                            }
                                                        }
                                                    </div>

                                                </td>
                                                <td>
                                                    <div class="attr-control">
                                                        <span class="attr-indicator">@obj.AttributeBonus</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="attr-control">
                                                        <span class="attr-indicator">@obj.RaceBonus</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="attr-control">
                                                        <span class="attr-indicator">@obj.TraitBonus</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="attr-control">
                                                        <span class="attr-indicator">@obj.SumBonus</span>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                            
                                    </tbody>
                                </table>
                                <button  @onclick="@(()=>AddSpecialSkill(baseSkill))" class="add-skill"><i class="fa-solid fa-plus"></i></button>
                            </div>
                                
                            }

                        </div>

                    </div>
                </div>
            </section>
            <div class="form-group py-2">
            <button @onclick="UpsertCharacter" class="btn btn-primary">Save character</button>
                <NavLink href="character" class="btn btn-secondary">Back to list</NavLink>
            </div>
           
        }
    </div>

</div>

<style>

    .e-richtexteditor .e-rte-content,
    .e-richtexteditor .e-source-content {
        background: transparent;
    }

   /*  .e-richtexteditor.e-rte-tb-expand .e-rte-content, .e-richtexteditor.e-rte-tb-expand .e-source-content{
        border: 1px solid black;
    }

    .e-richtexteditor.e-rte-tb-expand{
        border: none;
    } */
    
</style>



@code {

    public UserInfo? UserInfo { get; set; }

    [Parameter]
    public int Id { get; set; }

    private AllParamsModel AllParams { get; set; }
    private IDisposable? registration;
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; } = true;
    private bool ModifChanged = false;
    private bool IsLeaveAllowed { get; set; } = false;
    private bool IsDukeAllowed { get; set; } = false;
    private string TargetLocation { get; set; } = "";
    private List<ToolbarItemModel> NoTools = new List<ToolbarItemModel>();

    private List<object> ToolbarItems = new List<object>() {
        new ItemModel() { Text = "Add", PrefixIcon = "e-add", Id = "Grid_add"},//Here Grid is SfGrid ID
        new ItemModel(){ Text = "Edit", PrefixIcon= "e-edit", Id="Grid_edit"},
        new ItemModel(){ Text = "Delete", PrefixIcon= "e-delete", Id="Grid_delete"},
    };
    private string ChooseFile = "Choose file";


    protected override async Task OnInitializedAsync()
    {

        AllParams = new();

        UserInfo = await _userService.GetUserInfo();

        if (UserInfo?.IsAuthenticated == false)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;

                StateHasChanged();
                registration =_navigationManager.RegisterLocationChangingHandler(OnLocationChanging);
                //CustomTraitComponent = new();
                if (Id == 0)
                {
                    //create
                    AllParams.Character = new CharacterDTO();
                    AllParams.Attributes = CharacterSeeder.GetAttributes();
                    AllParams.BaseSkills = CharacterSeeder.GetBaseSkills();
                    AllParams.SpecialSkills = CharacterSeeder.GetSpecialSkills();
                    AllParams.Races = (await _raceRepository.GetAllApproved()).ToList();
                    AllParams.Traits = new List<TraitDTO>();
                    AllParams.TraitsAdv = new List<TraitAdvDTO>();
                    AllParams.CurrentRace = new();
                    AllParams.Profession = new();
                    AllParams.Equipment = new List<EquipmentDTO>();
                    AllParams.Character.UserName = UserInfo?.UserName;
                    IsDukeAllowed = (UserInfo?.Role == SD.Role_DukePlayer);

                    if (IsDukeAllowed)
                        AllParams.Character.NPCType = "Hero";
                    else
                        AllParams.Character.NPCType = "Duke";
                    CharacterTypeHandle();
                }
                else
                {
                    //update
                    Title = "Edit";
                    await LoadCharacter();
                }

                foreach (var obj in AllParams.SpecialSkills)
                {
                    await ChangeSSRelatedAttribute(obj.ChosenAttribute, obj.Name);
                    await AddSSRelatedBaseSkill(obj);
                }

                await TraitsChange();

                await ChangeProfRelatedAttribute();
                AllParams.Profession.CalculateClassParams(AllParams.Attributes);



                IsLoading = false;
                StateHasChanged();
            }
            catch(WarningException ex)
            {
                await _jsRuntime.ToastrWarning(ex.ToString());
            }
            catch (Exception ex)
            {
                IsLoading = false;
                await _jsRuntime.ToastrError("Error while initialize: " + ex.ToString());
            }
        }
    }
    private async Task LoadCharacter()
    {
        AllParams.Character = await _characterRepository.GetById(Id);
        AllParams.Attributes = await _attributeRepository.GetAll(Id);
        AllParams.BaseSkills = await _baseSkillRepository.GetAll(Id);
        AllParams.SpecialSkills = (await _specialSkillRepository.GetAll(Id)).ToList();
        AllParams.TraitsAdv = (await _traitAdvRepository.GetAll(Id)).ToList(); 
        //need Traits in base class to use Component
        AllParams.Traits = new List<TraitDTO>();
        AllParams.TraitsAdv.ToList().ForEach(t =>
            AllParams.Traits.Add(new TraitAdvDTO(t, AllParams.Character)));
        AllParams.CurrentRace = await _raceRepository.GetById(AllParams.Character.RaceId);
        AllParams.Profession = await _professionRepository.GetById(AllParams.Character.ProfessionId);
        AllParams.Equipment = (await _equipmentRepository.GetAll(Id)).ToList();
        AllParams.Races = (await _raceRepository.GetAllApproved()).ToList();
    }

    private async Task UpsertCharacter()
    {
        RaceDTO? raceDTO;
        ProfessionDTO? professionDTO;
        IsLoading = true;
        StateHasChanged();
        try
        {
            if (AllParams.Character.Id == 0)
            {
                //check if all valid
                //upsert race
                if (AllParams.CurrentRace.Id > 0)
                {
                    raceDTO = await _raceRepository.Update(AllParams.CurrentRace);
                }
                else
                {
                    raceDTO = await _raceRepository.Create(AllParams.CurrentRace);
                }
                if (raceDTO is not null)
                {
                    AllParams.Character.RaceId = raceDTO.Id;

                }
                else
                {
                    AllParams.Character.RaceId = 0;
                }
                // create traits (in character)
                AllParams.Traits.ToList().ForEach(t => AllParams.TraitsAdv.Add(new(t, AllParams.Character)));
                AllParams.Character.TraitsAdv = AllParams.TraitsAdv;
                // create equipment (in character)
                AllParams.Character.Equipment = AllParams.Equipment;

                // create profession
                professionDTO = await _professionRepository.Create(AllParams.Profession);
                if (professionDTO is not null)
                    AllParams.Character.ProfessionId = professionDTO.Id;

                var charac = await _characterRepository.Create(AllParams.Character);
                foreach (var obj in AllParams.Attributes)
                {
                    obj.CharacterId = charac.Id;
                    await _attributeRepository.Create(obj);
                }
                foreach (var obj in AllParams.BaseSkills)
                {
                    obj.CharacterId = charac.Id;
                    await _baseSkillRepository.Create(obj);
                }
                foreach (var obj in AllParams.SpecialSkills)
                {
                    obj.CharacterId = charac.Id;
                    await _specialSkillRepository.Create(obj);
                }
            }
            else
            {
                //update race
                if (AllParams.CurrentRace.Id > 0)
                {
                    raceDTO = await _raceRepository.Update(AllParams.CurrentRace);
                }
                else
                {
                    raceDTO = await _raceRepository.Create(AllParams.CurrentRace);
                }
                if (raceDTO is not null)
                {
                    AllParams.Character.RaceId = raceDTO.Id;
                }
                else
                {
                    AllParams.Character.RaceId = 0;
                }
                // update profession
                if (AllParams.Profession.Id > 0)
                    professionDTO = await _professionRepository.Update(AllParams.Profession);
                else
                    professionDTO = await _professionRepository.Create(AllParams.Profession);
                if (professionDTO is not null)
                    AllParams.Character.ProfessionId = professionDTO.Id;

                // update Adv traits
                AllParams.Character.TraitsAdv = new List<TraitAdvDTO>();
                AllParams.Traits.ToList().ForEach(t => AllParams.Character.TraitsAdv.Add(new(t, AllParams.Character))); //update Adv trait, convert it from base trait to TraitAdv and add to Character.TraitAdv collection

                // update equipment (in character)
                AllParams.Character.Equipment = AllParams.Equipment;

                // update character with TraitAdv collection properly filled
                await _characterRepository.Update(AllParams.Character);
                foreach (var obj in AllParams.Attributes)
                {
                    obj.CharacterId = Id;
                    await _attributeRepository.Update(obj);
                }
                foreach (var obj in AllParams.BaseSkills)
                {
                    obj.CharacterId = Id;
                    await _baseSkillRepository.Update(obj);
                }
                foreach (var obj in AllParams.SpecialSkills)
                {
                    obj.CharacterId = Id;
                    await _specialSkillRepository.Update(obj);
                }
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while adding character");
        }
        IsLeaveAllowed = true;
        IsLoading = false;
        StateHasChanged();
        _navigationManager.NavigateTo("/character");

    }
    public async Task DeleteCharacterHandler()
    {
        try
        {
            if (AllParams.Character.Id == 0)
            {
                //delete Attributes
                foreach (var att in AllParams.Attributes)
                {
                    await _attributeRepository.Delete(att.Id);
                }
                //delete BaseSkills
                foreach (var bs in AllParams.BaseSkills)
                {
                    await _baseSkillRepository.Delete(bs.Id);
                }
                //delete SpecialSkills
                foreach (var bs in AllParams.SpecialSkills)
                {
                    await _specialSkillRepository.Delete(bs.Id);
                }
                await _characterRepository.Delete(AllParams.Character.Id);
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while deleting: " + ex.ToString());
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                ChooseFile = string.Empty;
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        AllParams.Character.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Please select .jpg / .jpeg / .png file only");
                    }
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while image upload: " + ex.ToString());
        }
    }

    private async Task IncrAttr(AttributeDTO obj)
    {
        var ok = false;
        if (AllParams.Character.IsApproved == false)
        {
            if (obj.BaseBonus < 18)
            {
                if (obj.BaseBonus < 11)
                {
                    if (AllParams.Character.AttributePoints > 0 && AllParams.Character.IsApproved == false)
                    {
                        ok = true;
                        AllParams.Character.AttributePoints--;
                    }
                }
                else
                {
                    if (AllParams.Character.AttributePoints >= (obj.BaseBonus - 9))
                    {
                        AllParams.Character.AttributePoints -= obj.BaseBonus - 9;
                        ok = true;
                    }
                }

                if (ok)
                {
                    obj.BaseBonus++;
                    //obj.SumAll();
                }
                else
                    await _jsRuntime.AttrLimit("Not enough attribute points");
            }
            else
            {
                await _jsRuntime.AttrLimit("Maximium base bonus limit is 18");
            }
        }
        else if (AllParams.Character.IsApproved)
        {
            if (AllParams.Character.CurrentExpPoints >= obj.BaseBonus * 2)
            {
                AllParams.Character.CurrentExpPoints -= obj.BaseBonus * 2;
                obj.BaseBonus++;
                //obj.SumAll();
            }
            else
                await _jsRuntime.AttrLimit("Not enough experience points");
        }
    }


    private async Task DecrAttr(AttributeDTO obj)
    {
        if (AllParams.Character.IsApproved == false)
        {
            if (obj.BaseBonus > 6)
            {
                if (obj.BaseBonus < 11)
                {
                    AllParams.Character.AttributePoints++;
                }
                else
                {
                    AllParams.Character.AttributePoints += (obj.BaseBonus - 10);
                }
                obj.BaseBonus--;
                //obj.SumAll();
            }else
                await _jsRuntime.AttrLimit("Minimum base bonus limit is 6");
        }
        else
        {
            await _jsRuntime.AttrLimit("To revert changes reload page");
        }
    }


    private async Task IncrBSBonus(BaseSkillDTO obj)
    {
        try
        {
            var relatedAttribute1 = AllParams.Attributes.FirstOrDefault(u => u.Name == obj.RelatedAttribute1).BaseBonus;
            var relatedAttribute2 = AllParams.Attributes.FirstOrDefault(u => u.Name == obj.RelatedAttribute2).BaseBonus;
            var limit = Math.Floor((double)(relatedAttribute1 + relatedAttribute2) / 6.0) + 1;
            var expChange = 0;
            string message;

            if (obj.BaseBonus < limit)
            {
                expChange = 3 * (obj.BaseBonus + 1);
                if (AllParams.Character.CurrentExpPoints >= expChange)
                {
                    AllParams.Character.CurrentExpPoints -= expChange;
                    AllParams.Character.UsedExpPoints += expChange;
                    obj.BaseBonus++;

                    //obj.SumAll();
                }
                else
                    await _jsRuntime.BaseSkillLimit("Not enought experience points");
            }
            else
            {
                message = "Maximum base bonus is limited by: " + obj.RelatedAttribute1 + " and " + obj.RelatedAttribute2 + " to value of " + limit.ToString();
                await _jsRuntime.BaseSkillLimit(message);
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }
    }

    private async Task DecrBSBonus(BaseSkillDTO obj)
    {
        var expChange = 3 * obj.BaseBonus;
        if (obj.BaseBonus > 0)
        {
            AllParams.Character.CurrentExpPoints += expChange;
            AllParams.Character.UsedExpPoints -= expChange;
            obj.BaseBonus--;

            //obj.SumAll();
        }
    }


    private void CharacterTypeHandle()
    {
        if (AllParams.Character.NPCType == "Hero")
        {
            AllParams.Character.AttributePoints = 100;
            AllParams.Character.CurrentExpPoints = 250;
            AllParams.Profession.ClassLevel = 2;
        }
        else if (AllParams.Character.NPCType == "Duke")
        {
            AllParams.Character.AttributePoints = 100;
            AllParams.Character.CurrentExpPoints = 300;
            AllParams.Profession.ClassLevel = 3;
        }

        foreach (var obj in AllParams.Attributes)
            obj.BaseBonus = 6;
        foreach (var obj in AllParams.BaseSkills)
            obj.BaseBonus = 0;
    }

    private async Task IncrSSBonus(SpecialSkillDTO obj)
    {
        try
        {
            var limit = AllParams.BaseSkills.FirstOrDefault(u => u.Name == obj.RelatedBaseSkillName).SumBonus;
            var expChange = 0;
            string message;

            if (obj.BaseBonus < limit)
            {
                expChange = 1 * (obj.BaseBonus + 1);
                if (AllParams.Character.CurrentExpPoints >= expChange)
                {
                    AllParams.Character.CurrentExpPoints -= expChange;
                    AllParams.Character.UsedExpPoints += expChange;
                    obj.BaseBonus++;

                    //obj.SumAll();
                }
                else
                    await _jsRuntime.SpecialSkillLimit("Not enought experience points");
            }
            else
            {
                message = "Maximum Special Skill base is limited by : " + obj.RelatedBaseSkillName.ToUpper() + " which is: " + limit.ToString();
                await _jsRuntime.SpecialSkillLimit(message);
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }
    }

    private async Task DecrSSBonus(SpecialSkillDTO obj)
    {
        var expChange = 1 * obj.BaseBonus;
        if (obj.BaseBonus > 0)
        {
            AllParams.Character.CurrentExpPoints += expChange;
            AllParams.Character.UsedExpPoints -= expChange;
            obj.BaseBonus--;

            //obj.SumAll();
        }
    }


    private async Task ChangeSSRelatedAttribute(string attrName, string specSkillName)
    {
        try
        {
            if (attrName != null && attrName != "0" && specSkillName != null)
            {
                var obj = AllParams.SpecialSkills.FirstOrDefault(u => u.Name == specSkillName);
                if (obj != null)
                {
                    obj.ChosenAttribute = attrName;
                    var attr = AllParams.Attributes.FirstOrDefault(p => p.Name == attrName);
                    if (attr == null) return;
                    obj.AttributeBonus = attr.Modifier;
                    obj.AddPropertyListener(attr);
                    //obj.SumAll();
                }
                return;
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }

    }
    private void SpecialSkillNameChanged(string specSkillName, SpecialSkillDTO specSkill)
    {
        try
        {
            if (!string.IsNullOrEmpty(specSkillName) && specSkill!= null)
            {
                if (AllParams.SpecialSkills.FirstOrDefault(u => u.Name.ToLower() == specSkillName.ToLower()) != null)
                {
                    _jsRuntime.ToastrWarning("Special skill with this name already exists. Please choose other name");
                    int num = 1;
                    string  newname = specSkillName;
                    while (AllParams.SpecialSkills.FirstOrDefault(s => s.Name == newname) != null)
                    {
                        newname = specSkillName + (num++).ToString();
                    }
                    specSkill.Name = newname;
                    StateHasChanged();
                }
                else
                {
                    specSkill.Name = specSkillName;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }

    }

    private async Task AddSSRelatedBaseSkill(SpecialSkillDTO obj)
    {
        try
        {
            if (obj != null && obj.RelatedBaseSkillName != null && obj.Name != null)
            {
                var baseSkill = AllParams.BaseSkills.FirstOrDefault(p => p.Name == obj.RelatedBaseSkillName);
                if (baseSkill == null) return;
                obj.BaseSkillBonus = baseSkill.SumBonus;
                obj.AddPropertyListener(baseSkill);
                //obj.SumAll();
                return;
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }

    }

    private async Task ChangeProfRelatedAttribute()
    {
        try
        {
            if (string.IsNullOrEmpty(AllParams.Profession.RelatedAttributeName) == false)
            {
                var attr = AllParams.Attributes.FirstOrDefault(p => p.Name == AllParams.Profession.RelatedAttributeName);
                if (attr == null)
                    throw new Exception();
                AllParams.Profession.AddPropertyListener(attr);
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }
    }

    public async Task ConfirmLeave_Click(bool isConfirmed)
    {
        IsLoading = true;
        StateHasChanged();
        if (isConfirmed == true )
        {
            IsLeaveAllowed = true;
            _jsRuntime.InvokeVoidAsync("HideLeavePageModal");
            _navigationManager.NavigateTo(TargetLocation);
        }
        IsLoading = false;
        StateHasChanged();
        _jsRuntime.InvokeVoidAsync("HideLeavePageModal");
    }
    private void HandleLeavePage() => _jsRuntime.InvokeVoidAsync("ShowLeavePageModal");

    private async Task GetDescription(string description) => AllParams.Character.Description = description;

    protected async Task TraitsChange()
    {

        IEnumerable<FeatureDTO>[] allFeatures = { AllParams.Attributes, AllParams.BaseSkills, AllParams.SpecialSkills };
        bool sum = false;

        //clear all traits bonuses
        foreach (var feat in allFeatures)
        {
            foreach (var obj in feat)
            {
                if (obj.TraitBonus != 0)
                {
                    obj.TraitBonus = 0;
                    sum = true;
                }
                if (obj.RaceBonus != 0)
                {
                    obj.RaceBonus = 0;
                    sum = true;
                }
                if (obj.GearBonus != 0)
                {
                    obj.GearBonus = 0;
                    sum = true;
                }
                if (sum)
                {
                    //obj.SumAll();
                    sum = false;
                }
            }
        }

        // calculate all traits adv
        CalculateTraits(AllParams.Traits, SD.TraitType_Advantage);

        // calculate all race traits
        CalculateTraits(AllParams.CurrentRace.Traits.Cast<TraitDTO>().ToList(), SD.TraitType_Race);

        foreach (var equ in AllParams.Equipment)
        {
            if (equ.Traits != null)
            {
                CalculateTraits(equ.Traits.Cast<TraitDTO>().ToList(), SD.TraitType_Gear);
            }
        }

        StateHasChanged();
    }

    private async Task CalculateTraits(ICollection<TraitDTO> traits, string TraitType)
    {
        FeatureDTO? feature = null;
        // calculate all traits adv
        string bonusName;
        switch (TraitType)
        {
            case SD.TraitType_Advantage: bonusName = nameof(feature.TraitBonus); break;
            case SD.TraitType_Gear: bonusName = nameof(feature.GearBonus); break;
            case SD.TraitType_Race: bonusName = nameof(feature.RaceBonus); break;
            default: bonusName = string.Empty; break;
        }

        foreach (var trait in traits)
        {
            if (trait.TraitType != SD.TraitType_Advantage)
                AllParams.Character.TraitBalance += trait.TraitValue;

            foreach (var bonus in trait.Bonuses)
            {
                switch (bonus.FeatureType)
                {
                    case SD.FeatureAttribute:
                        feature = AllParams.Attributes.FirstOrDefault(u => u.Name == bonus.FeatureName);
                        break;
                    case SD.FeatureBaseSkill:
                        feature = AllParams.BaseSkills.FirstOrDefault(u => u.Name == bonus.FeatureName);
                        break;
                    case SD.FeatureSpecialSkill:
                        feature = AllParams.SpecialSkills.FirstOrDefault(u => u.Name == bonus.FeatureName);
                        break;
                    default:
                        feature = null;
                        break;
                }
                if (feature != null)
                {
                    int newVal = (int)feature.GetType().GetProperty(bonusName).GetValue(feature, null) + bonus.BonusValue;
                    feature.GetType().GetProperty(bonusName).SetValue(feature, newVal);
                    //feature.SumAll();
                }
            }
        }
    }

    private async Task AutoChooseRelatedAttribute()
    {
        IsLoading = true;
        StateHasChanged();
        foreach(var skill in AllParams.SpecialSkills){
            if (skill.RelatedAttribute1 != "")
            {
                var attr1 = AllParams.Attributes.FirstOrDefault(a => a.Name == skill.RelatedAttribute1);
                var attr2 = AllParams.Attributes.FirstOrDefault(a => a.Name == skill.RelatedAttribute2);
                if(attr1!=null && attr2 != null)
                {
                    if(attr1.SumBonus >= attr2.SumBonus)
                    {
                        skill.ChosenAttribute = attr1.Name;
                    }
                    else
                    {
                        skill.ChosenAttribute = attr2.Name;
                    }
                }
            }
        }
        IsLoading = false;
        StateHasChanged();
    }


    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (!IsLeaveAllowed )
        {
            TargetLocation = context.TargetLocation;

            context.PreventNavigation();
            HandleLeavePage();
            //add some window with question
        }

        return ValueTask.CompletedTask;
    }
    private async Task AddSpecialSkill(BaseSkillDTO baseSkill)
    {
        var newSkill = new SpecialSkillDTO();
        newSkill.RelatedBaseSkill = baseSkill;
        newSkill.RelatedBaseSkillName = baseSkill.Name;
        int num = 1;
        string basename = "new skill", newname = "new skill";
        while (AllParams.SpecialSkills.FirstOrDefault(s => s.Name == newname)!=null)
        {
            newname = basename + (num++).ToString();
        }
        newSkill.Name = newname;
        newSkill.Editable = true;
        newSkill.Index =  AllParams.SpecialSkills.Where(n => n.RelatedBaseSkillName == baseSkill.Name).Count();
        AllParams.SpecialSkills.Add(newSkill);
        StateHasChanged();
    }

    public void Dispose() => registration?.Dispose();
}


                