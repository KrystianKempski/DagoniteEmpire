@page "/character/create"
@page "/character/edit/{id:int}"
@implements IDisposable
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IBaseSkillRepository _baseSkillRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject ITraitRepository _traitRepository
@inject IRaceRepository _raceRepository
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IFileUpload _fileUpload;
@inject IJSRuntime _jsRuntime
@using DA_Models
@using DagoniteEmpire.Service.IService
@using DagoniteEmpire.Pages.Components
@using Syncfusion.Blazor.Navigations
@attribute [Authorize(Roles = SD.Role_Admin + "," + SD.Role_HeroPlayer + "," + SD.Role_DukePlayer + "," + SD.Role_GameMaster)]

@inject NavigationManager _navigationManager
<_LeavePage IsParentComponentProcessing=IsLoading LeaveConfirmation="ConfirmLeave_Click" ></_LeavePage>
<div class="page">
    


    <div class="col-12">
         @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <section class="section-create-character">
                <div class="container-fluid">
                    <h3 class="char-title card-title mb-3 ml-3">@Title character</h3>
                    <div class="row">
                        <div class="form-group col-md-4 px-1">
                            <label>Character name</label>
                            <input type="text" @bind-value="Character.NPCName" class="form-control"></input>
                        </div>
                        <div class="form-group col-md-2 px-1">
                            <label>Class</label>
                            <InputText @bind-Value="Character.Class" class="form-control"></InputText>
                        </div>
                        <div class="form-group col-md-2 px-1">
                            <label>Race</label>
                            <InputText @bind-Value="Character.Race" class="form-control"></InputText>
                        </div>
                        <div class="form-group col-md-1 px-1">
                            <label>Age</label>
                            <InputNumber @bind-Value="Character.Age" class="form-control col-2"></InputNumber>
                        </div>
                        <div class="form-group col-md-3 px-1">
                            <label>Character Type</label>
                            <InputSelect @bind-Value="Character.NPCType" class="form-select" @bind-Value:after="CharacterTypeHandle">
                                <option checked="@(Character!.NPCType == "Hero")"value="Hero">
                                    Hero
                                </option>
                                @if (IsDukeAllowed)
                                {
                                    <option checked="@(Character!.NPCType == "Duke")" value="Duke">
                                        Duke
                                    </option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </section>

             <section class="section-create-character">
                <div class="container-fluid">
                    <div class="row">
                        <div class="portrait">
                            <h3 class="my-3 ml-3">PORTRAIT</h3>
                            <div class="portrait-imageframe">
                                <img src="@Character.ImageUrl" class="portrait-image" />
                                <div class="portrait-input">
                                    <InputFile OnChange="HandleImageUpload"></InputFile>
                                <label class="custom-file-label" for="inputGroupFile01">Choose file</label>
                                </div>
                            </div>
                   
                            <div class="points-control">
                                    <label class="points-label">Avalible experience points:</label>
                                    <span class="points-indicator ml-auto">@Character.CurrentExpPoints</span>
                            </div>
                            <div class="points-control">
                                <label class="points-label">Avalible attribute points:</label>
                                <span class="points-indicator ml-auto">@Character.AttributePoints</span>
                            </div>
                        </div>
                   
                        <div class="attribute">
                            <h3 class="my-3 ml-3">ATTRIBUTES</h3>

                            <table class="table align-middle mb-1">
                            <thead>
                                <tr>
                                    <th scope="col" class="bonus-row text-center">Base</th>
                                    <th scope="col" class="sum-row text-center">Race</th>
                                    <th scope="col" class="sum-row text-center">Gear</th>
                                    <th scope="col" class="sum-row text-center">Trait</th>
                                    <th scope="col" class="sum-row text-center">Sum</th>
                                    <th scope="col" class="sum-row text-center">Mod.</th>
                                </tr>
                            </thead>
                                <tbody>
                               
                                @foreach (var obj in Attributes)
                                {
                                    <tr>
                                        <td class="name-row" colspan="6">
                                            <label class="names-label text-start">@obj.Name.ToUpper()</label>
                                        </td>
                                    </tr>
                                    <tr>
                                        
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.BaseBonus</span>
                                                <div class="arrows">
                                                    <button @onclick="@(()=>IncrAttr(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-up align-top"></i></button>
                                                    <button @onclick="@(()=>DecrAttr(obj))"class="attr-carret"><i class="fa-regular fa-square-caret-down align-top"></i></button>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.RaceBonus</span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.GearBonus</span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.TraitBonus</span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.SumBonus</span>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="attr-control">
                                                <span class="attr-indicator">@obj.Modifier </span> 
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            </table>
                        </div>
                        <div class="baseskills">
                            <h3 class="my-3 ml-3">BASE SKILLS</h3>
                            <table class="table align-middle">
                                <thead>
                                    <tr>
                                        <th scope="col" class="name-row">Skill</th>
                                        <th scope="col" class="bonus-row text-center">Base</th>
                                        <th scope="col" class="sum-row text-center">Race</th>
                                        <th scope="col" class="sum-row text-center">Gear</th>
                                        <th scope="col" class="sum-row text-center">Trait</th>
                                        <th scope="col" class="sum-row text-center"> Sum</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var obj in BaseSkills)
                                    {
                                        <tr>
                                            <td>
                                                <label class="names-label">@obj.Name.ToUpper()</label>
                                            </td>
                                            <td>
                                                <div class="attr-control">
                                                    <span class="attr-indicator">@obj.BaseBonus</span>
                                                    <div class="arrows">
                                                        <button @onclick="@(()=>IncrBSBonus(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-up align-top"></i></button>
                                                        <button @onclick="@(()=>DecrBSBonus(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-down align-top"></i></button>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="attr-control">
                                                    <span class="attr-indicator">@obj.RaceBonus</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="attr-control">
                                                    <span class="attr-indicator">@obj.GearBonus</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="attr-control">
                                                    <span class="attr-indicator">@obj.TraitBonus</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="attr-control">
                                                    <span class="attr-indicator">@obj.SumBonus</span>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="races">
                             <h3 class="my-3 ml-3">RACE</h3>

                            <RaceComponent @bind-Attributes="@Attributes" @bind-BaseSkills="@BaseSkills" @bind-SpecialSkills="@SpecialSkills" @bind-Races="@Races" @bind-CurrentRace="@CurrentRace"></RaceComponent>
                            
                        </div>

                        <div class="traits">
                            <h3 class="my-3 ml-3">TRAITS</h3>
                          
                            <TraitsComponent @bind-Attributes="@Attributes" @bind-BaseSkills="@BaseSkills" @bind-SpecialSkills="@SpecialSkills" @bind-Character="@Character" @bind-Traits="@Traits" TraitType="TraitType"></TraitsComponent>
                        </div>

                        <div class="description">
                            <h3 class="my-3 ml-3">DESCRIPTION</h3>
                            <CharDescriptionDialog DescriptionConfirmation="GetDescription" SavedDescription="@Character.Description"></CharDescriptionDialog>
                        </div>
                    </div>
                </div>
            </section>

            <section class="section-create-character">
                <div class="container-fluid">
                    <div class="row">
                        <h3 class="my-3 ml-3">SPECIAL SKILLS</h3>
                        <div class="specialskills">
                        
                            @foreach (var baseSkill in BaseSkills)
                            {
                            <div class="specialskills-table">
                                <div class="specialskills-control">
                                    <label class="specialskills-label">@baseSkill.Name</label>
                                    <span class="specialskills-indicator">@baseSkill.SumBonus</span>
                                </div>
                                    <table class="table align-middle mb-1">
                                    <thead>
                                        <tr>
                                            <th scope="col" class="skillname-row">Skill</th>
                                            <th scope="col" class="bonus-row text-center">Base</th>
                                            <th scope="col" class="rel-attr-row">Related attribute</th>
                                            <th scope="col" class="sum-row text-center">Attr. mod.</th>
                                                <th scope="col" class="sum-row text-center">Race</th>
                                                <th scope="col" class="sum-row text-center">Trait</th>
                                            <th scope="col" class="sum-row text-center"> Sum</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var obj in SpecialSkills.Where(n => n.RelatedBaseSkillName == baseSkill.Name))
                                        {
                                             <tr class="name-tr-small">
                                                <td class="name-td-small" colspan="6">
                                                   @*  <label class="names-label text-start">@obj.Name.ToUpper()</label> *@
                                                        @if (obj.Editable)
                                                        {
                                                            <InputText style="width: 100%;font-size: 14px;font-weight: bold; padding:0; text-transform:uppercase;" @bind-Value="obj.Name" class=""></InputText>
                                                        }
                                                        else
                                                        {
                                                            <label class="names-label">@obj.Name.ToUpper()</label>
                                                        }
                                                </td>
                                            </tr> 
                                            <tr>
                                                <td class="name-td-big">
                                                    @if (obj.Editable)
                                                    {
                                                           @*  <InputText style="width: 100%;font-size: 14px;font-weight: bold; padding:0;" @bind-Value="obj.Name" class=""></InputText> *@
                                                            <InputText style="width: 100%;font-size: 14px;font-weight: bold; padding:0;" Value="@obj.Name" ValueChanged="@((string value) => SpecialSkillNameChanged(value, obj))" ValueExpression="@(()=>obj.Name)"></InputText>
                                                    }
                                                    else
                                                    {
                                                        <label class="names-label">@obj.Name</label>
                                                    }
                                                    </td>
                                                <td>
                                                    <div class="attr-control">
                                                        <span class="attr-indicator">@obj.BaseBonus</span>
                                                        <div class="arrows">
                                                            <button @onclick="@(()=>IncrSSBonus(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-up align-top"></i></button>
                                                            <button @onclick="@(()=>DecrSSBonus(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-down align-top"></i></button>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="attribute-selector">
                                                    @if (obj.Editable)
                                                    {
                                                                <InputSelect style="width: 100%;"
                                                                             ValueExpression="@(()=>obj.ChosenAttribute)"
                                                                             Value="@obj.ChosenAttribute"
                                                                             ValueChanged="@((string value) => ChangeSSRelatedAttribute(value, obj.Name))">
                                                                    <option value="0" selected disabled>--Select--</option>
                                                                    <option value="Strength"> Strength</option>
                                                                    <option value="Dexterity"> Dexterity</option>
                                                                    <option value="Endurance"> Endurance</option>
                                                                    <option value="Intelligence"> Intelligence</option>
                                                                    <option value="Instinct"> Instinct</option>
                                                                    <option value="Willpower"> Willpower</option>
                                                                    <option value="Charisma"> Charisma</option>
                                                                </InputSelect>
                                                    }
                                                    else
                                                    {
                                                        @if (obj.ChosenAttribute != null && obj.RelatedAttribute1 == "")
                                                        {
                                                            <label class="text-center" style="width: 100%;">@obj.ChosenAttribute</label>
                                                        }
                                                        else
                                                        {
                                                            <InputSelect style="width: 100%;"
                                                                            ValueExpression="@(()=>obj.ChosenAttribute)"
                                                                            Value="@obj.ChosenAttribute"
                                                                            ValueChanged="@((string value) => ChangeSSRelatedAttribute(value, obj.Name))">
                                                                <option value="0" selected disabled>--Select--</option>
                                                                <option value="@obj.RelatedAttribute1"> @obj.RelatedAttribute1</option>
                                                                <option value="@obj.RelatedAttribute2"> @obj.RelatedAttribute2</option>
                                                            </InputSelect>
                                                        }
                                                    }

                                                       
                                                    </div>

                                                </td>
                                                <td>
                                                    <div class="attr-control">
                                                        <span class="attr-indicator">@obj.AttributeBonus</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="attr-control">
                                                        <span class="attr-indicator">@obj.RaceBonus</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="attr-control">
                                                        <span class="attr-indicator">@obj.TraitBonus</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="attr-control">
                                                        <span class="attr-indicator">@obj.SumBonus</span>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                            
                                    </tbody>
                                </table>
                                <button  @onclick="@(()=>AddSpecialSkill(baseSkill))" class="add-skill"><i class="fa-solid fa-plus"></i></button>
                            </div>
                                
                            }

                        </div>

                    </div>
                </div>
            </section>
            <div class="form-group py-2">
            <button @onclick="UpsertCharacter" class="btn btn-primary">Save character</button>
                <NavLink href="character" class="btn btn-secondary">Back to list</NavLink>
            </div>
           
        }
    </div>

</div>



@code {

    [Parameter]
    public int Id { get; set; }

    // private IEnumerable<AttributeDTO> _attributes 

    private CharacterDTO Character { get; set; }
    private RaceDTO CurrentRace {get; set; }
    private IEnumerable<AttributeDTO> Attributes { get; set; }
    private IEnumerable<BaseSkillDTO> BaseSkills { get; set; } 
    private ICollection<SpecialSkillDTO> SpecialSkills { get; set; }
    private ICollection<TraitDTO> Traits { get; set; } 
    private ICollection<RaceDTO> Races { get; set; }
    private IDisposable? registration;
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; } = true;
    private bool ModifChanged = false;
    private bool IsLeaveAllowed { get; set; } = false;
    private bool IsDukeAllowed { get; set; } = false;
    private string TargetLocation { get; set; } = "";
    private List<ToolbarItemModel> NoTools = new List<ToolbarItemModel>();


    private List<object> ToolbarItems = new List<object>() {
        new ItemModel() { Text = "Add", PrefixIcon = "e-add", Id = "Grid_add"},//Here Grid is SfGrid ID
        new ItemModel(){ Text = "Edit", PrefixIcon= "e-edit", Id="Grid_edit"},
        new ItemModel(){ Text = "Delete", PrefixIcon= "e-delete", Id="Grid_delete"},
    };



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;
                StateHasChanged();
                registration =_navigationManager.RegisterLocationChangingHandler(OnLocationChanging);
                //CustomTraitComponent = new();
                if (Id == 0)
                {
                    //create
                    Character  = new CharacterDTO();
                    Attributes = CharacterSeeder.GetAttributes();
                    BaseSkills  = CharacterSeeder.GetBaseSkills();
                    SpecialSkills  = CharacterSeeder.GetSpecialSkills();
                    Traits = new List<TraitDTO>();
                    Races = new List<RaceDTO>();
                    CurrentRace = new();
                    // Bonuses = new List<BonusDTO>();
                    var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
                    var user = authstate.User;
                    Character.UserName = user.Identity.Name;
                    IsDukeAllowed = !user.IsInRole(SD.Role_HeroPlayer);

                    if (IsDukeAllowed)
                        Character.NPCType = "Hero";
                    else
                        Character.NPCType = "Duke";
                    CharacterTypeHandle();
                }
                else
                {
                    //update
                    Title = "Edit";
                    await LoadCharacter();
                }
                foreach (var obj in Attributes)
                    obj.SumAll();
                foreach (var obj in BaseSkills)
                    obj.SumAll();
                foreach (var obj in SpecialSkills)
                {
                    await ChangeSSRelatedAttribute(obj.ChosenAttribute, obj.Name);
                    await AddSSRelatedBaseSkill(obj);
                }

                IsLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                IsLoading = false;
                await _jsRuntime.ToastrError("Error while initialize: " + ex.ToString());
            }
        }
    }
    private async Task LoadCharacter()
    {
        Character = await _characterRepository.GetById(Id);
        Attributes = await _attributeRepository.GetAll(Id);
        BaseSkills = await _baseSkillRepository.GetAll(Id);
        SpecialSkills = (await _specialSkillRepository.GetAll(Id)).ToList();
        Traits = (await _traitRepository.GetAll(Id)).ToList();
        Races = (await _raceRepository.GetAllApproved()).ToList();
    }

    private async Task UpsertCharacter()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            if (Character.Id == 0)
            {
                //check if all valid
                //create
                var charac = await _characterRepository.Create(Character);
                foreach (var obj in Attributes)
                {
                    obj.CharacterId = charac.Id;
                    await _attributeRepository.Create(obj);
                }
                foreach (var obj in BaseSkills)
                {
                    obj.CharacterId = charac.Id;
                    await _baseSkillRepository.Create(obj);
                }
                foreach (var obj in SpecialSkills)
                {
                    obj.CharacterId = charac.Id;
                    await _specialSkillRepository.Create(obj);
                }
                foreach (var obj in Traits)
                {
                    obj.CharacterId = charac.Id;
                    await _traitRepository.Create(obj);
                }

            }
            else
            {
                //update
                await _characterRepository.Update(Character);
                foreach (var obj in Attributes)
                {
                    obj.CharacterId = Id;
                    await _attributeRepository.Update(obj);
                }
                foreach (var obj in BaseSkills)
                {
                    obj.CharacterId = Id;
                    await _baseSkillRepository.Update(obj);
                }
                foreach (var obj in SpecialSkills)
                {
                    obj.CharacterId = Id;
                    await _specialSkillRepository.Update(obj);
                }
                foreach (var obj in Traits)
                {
                    obj.CharacterId = Id;
                    await _traitRepository.Update(obj);
                }
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while loading: " + ex.ToString());
        }
        IsLeaveAllowed = true;
        IsLoading = false;
        StateHasChanged();
        _navigationManager.NavigateTo("/character");

    }
    public async void DeleteCharacterHandler()
    {
        try
        {
            if (Character.Id == 0)
            {
                //delete Attributes
                foreach (var att in Attributes)
                {
                    await _attributeRepository.Delete(att.Id);
                }
                //delete BaseSkills
                foreach (var bs in BaseSkills)
                {
                    await _baseSkillRepository.Delete(bs.Id);
                }
                //delete SpecialSkills
                foreach (var bs in SpecialSkills)
                {
                    await _specialSkillRepository.Delete(bs.Id);
                }
                await _characterRepository.Delete(Character.Id);
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while deleting: " + ex.ToString());
        }
    }



    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        Character.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Please select .jpg / .jpeg / .png file only");
                    }
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while image upload: " + ex.ToString());
        }
    }

    private async Task IncrAttr(AttributeDTO obj)
    {
        var ok = false;
        if (obj.BaseBonus < 18)
        {
            if (obj.BaseBonus < 11)
            {
                if (Character.AttributePoints > 0)
                {
                    ok = true;
                    Character.AttributePoints--;
                }
            }
            else
            {
                if (Character.AttributePoints >= (obj.BaseBonus - 9))
                {
                    Character.AttributePoints -= obj.BaseBonus - 9;
                    ok = true;
                }
            }

            if (ok)
            {
                obj.BaseBonus++;
                obj.SumAll();
            }else
                await _jsRuntime.AttrLimit("Not enought attribute points");
        }
        else
        {
            await _jsRuntime.AttrLimit("Maximium base bonus limit is 18");
        }
    }

    private async Task DecrAttr(AttributeDTO obj)
    {
        if (obj.BaseBonus > 6)
        {
            if (obj.BaseBonus < 11)
            {
                Character.AttributePoints++;
            }
            else
            {
                Character.AttributePoints += (obj.BaseBonus - 10);
            }
            obj.BaseBonus--;
            obj.SumAll();
        }else
            await _jsRuntime.AttrLimit("Minimum base bonus limit is 6");
    }


    private async Task IncrBSBonus(BaseSkillDTO obj)
    {

        try
        {
            var relatedAttribute1 = Attributes.FirstOrDefault(u => u.Name == obj.RelatedAttribute1).BaseBonus;
            var relatedAttribute2 = Attributes.FirstOrDefault(u => u.Name == obj.RelatedAttribute2).BaseBonus;
            var limit = Math.Floor((double)(relatedAttribute1 + relatedAttribute2) / 6.0) + 1;
            var expChange = 0;
            string message;

            if (obj.BaseBonus < limit)
            {
                expChange = 3 * (obj.BaseBonus + 1);
                if (Character.CurrentExpPoints >= expChange)
                {
                    Character.CurrentExpPoints -= expChange;
                    Character.UsedExpPoints += expChange;
                    obj.BaseBonus++;

                    obj.SumAll();
                }
                else
                    await _jsRuntime.BaseSkillLimit("Not enought experience points");
            }
            else
            {
                message = "Maximum base bonus is limited by: " + obj.RelatedAttribute1 + " and " + obj.RelatedAttribute2 + " to value of " + limit.ToString();
                await _jsRuntime.BaseSkillLimit(message);
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }
    }

    private async Task DecrBSBonus(BaseSkillDTO obj)
    {
        var expChange = 3 * obj.BaseBonus;
        if (obj.BaseBonus > 0)
        {
            Character.CurrentExpPoints += expChange;
            Character.UsedExpPoints -= expChange;
            obj.BaseBonus--;

            obj.SumAll();
        }
    }


    private void CharacterTypeHandle()
    {
        if (Character.NPCType == "Hero")
        {
            Character.AttributePoints = 100;
            Character.CurrentExpPoints = 250;
        }
        else if (Character.NPCType == "Duke")
        {
            Character.AttributePoints = 100;
            Character.CurrentExpPoints = 300;
        }

        foreach (var obj in Attributes)
            obj.BaseBonus = 6;
        foreach (var obj in BaseSkills)
            obj.BaseBonus = 0;

    }

    private async Task IncrSSBonus(SpecialSkillDTO obj)
    {
        try
        {
            var limit = BaseSkills.FirstOrDefault(u => u.Name == obj.RelatedBaseSkillName).SumBonus;
            var expChange = 0;
            string message;

            if (obj.BaseBonus < limit)
            {
                expChange = 1 * (obj.BaseBonus + 1);
                if (Character.CurrentExpPoints >= expChange)
                {
                    Character.CurrentExpPoints -= expChange;
                    Character.UsedExpPoints += expChange;
                    obj.BaseBonus++;

                    obj.SumAll();
                }
                else
                    await _jsRuntime.SpecialSkillLimit("Not enought experience points");
            }
            else
            {
                message = "Maximum Special Skill base is limited by : " + obj.RelatedBaseSkillName.ToUpper() + " which is: " + limit.ToString();
                await _jsRuntime.SpecialSkillLimit(message);
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }
    }

    private async Task DecrSSBonus(SpecialSkillDTO obj)
    {
        var expChange = 1 * obj.BaseBonus;
        if (obj.BaseBonus > 0)
        {
            Character.CurrentExpPoints += expChange;
            Character.UsedExpPoints -= expChange;
            obj.BaseBonus--;

            obj.SumAll();
        }
    }


    private async Task ChangeSSRelatedAttribute(string attrName, string specSkillName)
    {
        try
        {
            if (attrName != null && attrName != "0" && specSkillName != null)
            {
                var obj = SpecialSkills.FirstOrDefault(u => u.Name == specSkillName);
                if (obj != null)
                {
                    obj.ChosenAttribute = attrName;
                    var attr = Attributes.FirstOrDefault(p => p.Name == attrName);
                    if (attr == null) return;
                    obj.AttributeBonus = attr.Modifier;
                    obj.AddPropertyListener(attr);
                    obj.SumAll();
                }
                return;
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }

    }
    private void SpecialSkillNameChanged(string specSkillName, SpecialSkillDTO specSkill)
    {
        try
        {
            if (!string.IsNullOrEmpty(specSkillName) && specSkill!= null)
            {
                if (SpecialSkills.FirstOrDefault(u => u.Name.ToLower() == specSkillName.ToLower()) != null)
        {
                    _jsRuntime.ToastrWarning("Special skill with this name already exists. Please choose other name");
                    int num = 1;
                    string  newname = specSkillName;
                    while (SpecialSkills.FirstOrDefault(s => s.Name == newname) != null)
                    {
                        newname = specSkillName + (num++).ToString();
                    }
                    specSkill.Name = newname;
                    StateHasChanged();
                }
                else
                {
                    specSkill.Name = specSkillName;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }

    }



    private async Task AddSSRelatedBaseSkill(SpecialSkillDTO obj)
    {
        try
        {
            if (obj != null && obj.RelatedBaseSkillName != null && obj.Name != null)
            {
                var baseSkill = BaseSkills.FirstOrDefault(p => p.Name == obj.RelatedBaseSkillName);
                if (baseSkill == null) return;
                obj.BaseSkillBonus = baseSkill.SumBonus;
                obj.AddPropertyListener(baseSkill);
                obj.SumAll();
                return;
            }

        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }

    }


    public async Task ConfirmLeave_Click(bool isConfirmed)
    {
        IsLoading = true;
        StateHasChanged();
        if (isConfirmed == true )
        {
            IsLeaveAllowed = true;
            _jsRuntime.InvokeVoidAsync("HideLeavePageModal");
            _navigationManager.NavigateTo(TargetLocation, true);
        }
        IsLoading = false;
        StateHasChanged();
        _jsRuntime.InvokeVoidAsync("HideLeavePageModal");
    }
    private void HandleLeavePage() => _jsRuntime.InvokeVoidAsync("ShowLeavePageModal");

    private async Task GetDescription(string description) => Character.Description = description;


    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (!IsLeaveAllowed )
        {
            TargetLocation = context.TargetLocation;

            context.PreventNavigation();
            HandleLeavePage();
            //add some window with question
        }

        return ValueTask.CompletedTask;
    }
    private async Task AddSpecialSkill(BaseSkillDTO baseSkill)
    {
        var newSkill = new SpecialSkillDTO();
        newSkill.RelatedBaseSkill = baseSkill;
        newSkill.RelatedBaseSkillName = baseSkill.Name;
        int num = 1;
        string basename = "new skill", newname = "new skill";
        while (SpecialSkills.FirstOrDefault(s => s.Name == newname)!=null)
        {
            newname = basename + (num++).ToString();
        }
        newSkill.Name = newname;
        newSkill.Editable = true;
        newSkill.Index =  SpecialSkills.Where(n => n.RelatedBaseSkillName == baseSkill.Name).Count();
        SpecialSkills.Add(newSkill);
        StateHasChanged();

    }

    // private async Task AddCustomTrait()
    // {
    //     CustomTraitComponent.TraitDTO = new();
    //     CustomTraitComponent.IsVisible = true;
    //     CustomTraitComponent.IsEditMode = false;
    //     StateHasChanged();
    // }
    // private async Task AddExistingTrait()
    // {
    //     TraitsChosen = new();
    //     TraitsChosen.IsVisible = true;
    //     StateHasChanged();
    // }



    // private async Task EditTrait(TraitDTO trait)
    // {
    //     CustomTraitComponent.TraitDTO = trait;
    //     CustomTraitComponent.IsVisible = true;
    //     CustomTraitComponent.IsEditMode = true;
    //     StateHasChanged();
    // }

    // private void CalculateTraitsBonuses()
    // {
    //     bool refresh = false;

    //     //clear all traits bonuses
    //     Character.TraitBalance = 0;
    //     IEnumerable<FeatureDTO>[] allFeatures = { Attributes, BaseSkills, SpecialSkills };

    //     foreach(var feat in allFeatures)
    //     {
    //         foreach (var obj in feat)
    //         {
    //             if (obj.TraitBonus!=0)
    //             {
    //                 obj.TraitBonus = 0;
    //                 obj.SumAll();
    //             }
    //         }
    //     }

    //     // calculate all traits
    //     foreach (var trait in Traits)
    //     {
    //         Character.TraitBalance += trait.TraitValue; 
    //         FeatureDTO? feature = null;
    //         foreach (var bonus in trait.Bonuses)
    //         {
    //             switch (bonus.FeatureType)
    //             {
    //                 case "Attribute":
    //                     feature = Attributes.FirstOrDefault(u => u.Name == bonus.FeatureName);
    //                     break;
    //                 case "Base skill":
    //                     feature = BaseSkills.FirstOrDefault(u => u.Name == bonus.FeatureName);
    //                     break;
    //                 case "Special skill":
    //                     feature = SpecialSkills.FirstOrDefault(u => u.Name == bonus.FeatureName);
    //                     break;
    //                 default:
    //                     break;
    //             }
    //             if (feature != null)
    //             {
    //                 feature.TraitBonus += bonus.BonusValue;
    //                 feature.SumAll();
    //                 refresh = true;
    //             }
    //         }
    //     }
    //     if(refresh)
    //     {
    //         StateHasChanged();
    //     }
    // }

    // private async Task DeleteTrait(TraitDTO trait)
    // {
    //     if (trait.Id != 0)
    //     {
    //         await _traitRepository.Delete(trait.Id);
    //         // await _jsRuntime.ToastrSuccess("Product deleted succesfully.");
    //         Traits = await _traitRepository.GetAll(Id);
    //     }
    //     else
    //     {
    //         Traits = Traits.Where(u => u.Name != trait.Name).ToList(); ;
    //     }
    //     CalculateTraitsBonuses();
    //     StateHasChanged();

    // }

    public void Dispose() => registration?.Dispose();
}


                