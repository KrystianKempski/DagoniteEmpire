@page "/character/create"
@page "/character/etit/{id:int}"

@inject ICharacterRepository _characterRepository
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="char-title card-title text-primary mb-3 ml-3">@Title character</h3>

    <div class="col-10">
         @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Character" OnValidSubmit="UpsertCharacter">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label>Character name</label>
                    <InputText @bind-Value="Character.NPCName" class="form-control col-5"></InputText>
                    <div class="valid-message">
                        <ValidationMessage For="()=>Character.NPCName"></ValidationMessage>
                    </div>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="character" class="btn btn-secondary">Back to list</NavLink>
                </div>
            </EditForm>
        }
    </div>

</div>

@* <SfRichTextEditor>
    <p>Rich Text Editor allows to insert images from online source as well as local computer where you want to insert the image in your content.</p>
    <p><b>Get started Quick Toolbar to click on the image</b></p>
    <p>It is possible to add custom style on the selected image inside the Rich Text Editor through quick toolbar.</p>
</SfRichTextEditor> *@

@code {

    [Parameter]
    public int Id { get; set; }

    private CharacterDTO Character { get; set; } = new CharacterDTO();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                //create
                IsLoading = false;
            }
            else
            {
                //update
                Title = "Edit";
                await LoadCharacter();
            }
        }
    }
    private async Task LoadCharacter()
    {

        IsLoading = true;
        StateHasChanged();
        Character = await _characterRepository.GetById(Id);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertCharacter()
    {
        if(Character.Id == 0)
        {
            //create
            await _characterRepository.Create(Character);
        }
        else
        {
            //update
            await _characterRepository.Update(Character);
        }
        _navigationManager.NavigateTo("/character");

    }

}


