@page "/character/create"
@page "/character/edit/{id:int}"
@implements IDisposable
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IBaseSkillRepository _baseSkillRepository
@using DA_Models

@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="char-title card-title mb-3 ml-3">@Title character</h3>


    <div class="col-12">
         @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Character" OnValidSubmit="UpsertCharacter">
                <DataAnnotationsValidator/>
                <form class="row g-3">
                    <div class="form-group col-md-4">
                        <label>Character name</label>
                        <InputText @bind-Value="Character.NPCName" class="form-control col-4"></InputText>
                        <div class="valid-message">
                            <ValidationMessage For="()=>Character.NPCName"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group col-md-3">
                        <label>Class</label>
                        <InputText @bind-Value="Character.Class" class="form-control col-3"></InputText>
                        <div class="valid-message">
                            <ValidationMessage For="()=>Character.Class"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group col-md-3">
                        <label>Race</label>
                        <InputText @bind-Value="Character.Race" class="form-control col-3"></InputText>
                        <div class="valid-message">
                            <ValidationMessage For="()=>Character.Race"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group col-md-2">
                        <label>Age</label>
                        <InputNumber @bind-Value="Character.Age" class="form-control col-2"></InputNumber>
                        <div class="valid-message">
                            <ValidationMessage For="()=>Character.Age"></ValidationMessage>
                        </div>
                    </div>
                </form>
                <div class="attribute-row">
                        <div class="form-group">
                            <h3 class="my-3 ml-3">Attributes</h3>
                                <table class="table align-middle">
                                <thead>
                                    <tr>
                                    <th scope="col" class="Attribute-name-row">Attribute</th>
                                    <th scope="col" class="bonus-row">Base</th>
                                    <th scope="col" class="bonus-row">Race</th>
                                    <th scope="col" class="bonus-row">Gear</th>
                                    <th scope="col" class="bonus-row">Health</th>
                                    </tr>
                                </thead>
                                    <tbody>
                                    @foreach (var obj in Attributes)
                                    {
                                        <tr>
                                                <td >
                                                    <label class="text-center">@obj.Name</label>
                                                </td>
                                                <td>
                                            <InputNumber @bind-Value="obj.BaseBonus" class="form-control text-center px-0" style="width: 50px; font-size: 12px" />
                                                    <div class="valid-message">
                                                        <ValidationMessage For="()=>obj.BaseBonus"></ValidationMessage>
                                                    </div>
                                                </td>
                                                 <td>
                                            <InputNumber @bind-Value="obj.RaceBonus" class="form-control text-center px-0" style="width: 50px; font-size: 12px" />
                                                    <div class="valid-message">
                                                        <ValidationMessage For="()=>obj.RaceBonus"></ValidationMessage>
                                                    </div>
                                                </td>
                                                <td>
                                            <InputNumber @bind-Value="obj.GearBonus" class="form-control text-center px-0" style="width: 50px; font-size: 12px" />
                                                    <div class="valid-message">
                                                        <ValidationMessage For="()=>obj.GearBonus"></ValidationMessage>
                                                    </div>
                                                </td>
                                                <td>
                                            <InputNumber @bind-Value="obj.HealthBonus" class="form-control text-center px-0" style="width: 50px; font-size: 12px" />
                                                    <div class="valid-message">
                                                        <ValidationMessage For="()=>obj.HealthBonus"></ValidationMessage>
                                                    </div>
                                                </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="form-group col-3">
                            <h3 class="my-3 ml-3">Base Skills</h3>
                            <table class="table align-middle">
                                <thead>
                                    <tr>
                                    <th style="width: 46%">Attribute</th>
                                    <th style="width: 18%">Base</th>
                                    <th style="width: 18%">Race</th>
                                    <th style="width: 18%">Gear</th>
                                    <th style="width: 18%">Other</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var obj in BaseSkills)
                                    {
                                        <tr>
                                            <td>
                                                <label class="text-center">@obj.Name</label>
                                            </td>
                                            <td>
                                                <InputNumber @bind-Value="obj.BaseBonus" class="form-control text-center" />
                                                <div class="valid-message">
                                                    <ValidationMessage For="()=>obj.BaseBonus"></ValidationMessage>
                                                </div>
                                            </td>
                                            <td>
                                                <InputNumber @bind-Value="obj.RaceBonus" class="form-control text-center" />
                                                <div class="valid-message">
                                                    <ValidationMessage For="()=>obj.RaceBonus"></ValidationMessage>
                                                </div>
                                            </td>
                                            <td>
                                                <InputNumber @bind-Value="obj.GearBonus" class="form-control text-center" />
                                                <div class="valid-message">
                                                    <ValidationMessage For="()=>obj.GearBonus"></ValidationMessage>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="character" class="btn btn-secondary">Back to list</NavLink>
                </div>
            </EditForm>
        }
    </div>

</div>

@* <SfRichTextEditor>
    <p>Rich Text Editor allows to insert images from online source as well as local computer where you want to insert the image in your content.</p>
    <p><b>Get started Quick Toolbar to click on the image</b></p>
    <p>It is possible to add custom style on the selected image inside the Rich Text Editor through quick toolbar.</p>
</SfRichTextEditor> *@

@code {

    [Parameter]
    public int Id { get; set; }

    private CharacterDTO Character { get; set; } = new CharacterDTO();
    private IEnumerable<AttributeDTO> Attributes { get; set; } = CharacterSeeder.GetAttributes();
    private IEnumerable<BaseSkillDTO> BaseSkills { get; set; } = CharacterSeeder.GetBaseSkills();
    private IDisposable? registration;
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    private bool IsCharacterSaved = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                //create
                // Character.Attributes = CharacterSeeder.GetAttributes();
                // Character.BaseSkills = new List<BaseSkillDTO>();
                // var chare = await _characterRepository.Create(Character);
                IsLoading = false;
            }
            else
            {
                //update
                Title = "Edit";
                await LoadCharacter();
            }
        }
    }
    private async Task LoadCharacter()
    {

        IsLoading = true;
        StateHasChanged();
        Character = await _characterRepository.GetById(Id);
        Attributes = await _attributeRepository.GetAll(Id);
        BaseSkills = await _baseSkillRepository.GetAll(Id);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertCharacter()
    {
        if(Character.Id == 0)
        {
            //create
            var charac = await _characterRepository.Create(Character);
            foreach (var obj in Attributes)
            {
                obj.CharacterId = charac.Id;
                await _attributeRepository.Create(obj);
            }

        }
        else
        {
            //update
            await _characterRepository.Update(Character);
            var charac = await _characterRepository.Create(Character);
            foreach (var obj in Attributes)
            {
                obj.CharacterId = charac.Id;
                await _attributeRepository.Update(obj);
            }
        }
        _navigationManager.NavigateTo("/character");

    }
    public async void DeleteCharacterHandler()
    {
        //delete Attributes
        foreach (var att in Attributes)
        {
            await _attributeRepository.Delete(att.Id);
        }
        //delete BaseSkills
        foreach (var bs in BaseSkills)
        {
            await _baseSkillRepository.Delete(bs.Id);
        }
        await _characterRepository.Delete(Character.Id);
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (!IsCharacterSaved)
        {
            DeleteCharacterHandler();
            //context.PreventNavigation();
            //add some window with question
        }

        return ValueTask.CompletedTask;
    }

    public void Dispose() => registration?.Dispose();
}


                