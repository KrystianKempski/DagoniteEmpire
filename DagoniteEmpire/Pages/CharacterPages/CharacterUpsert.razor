@page "/character/create"
@page "/character/edit/{id:int}"
@implements IDisposable
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IBaseSkillRepository _baseSkillRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject ITraitRepository<TraitCharacterDTO> _traitCharacterRepository
@inject ITraitRepository<TraitRaceDTO> _traitRaceRepository
@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject ITraitRepository<TraitProfessionDTO> _traitProfessionRepository
@inject IWoundRepository _woundRepository
@inject IRaceRepository _raceRepository
@inject IProfessionRepository _professionRepository
@inject IEquipmentSlotRepository _equipmentSlotRepository
@inject IEquipmentRepository _equipmentRepository
@inject IUserService _userService
@inject IJSRuntime _jsRuntime
@inject IMapper _mapper
@using AutoMapper
@using DA_DataAccess.CharacterClasses
@using DA_Models
@using DagoniteEmpire.Pages.Components
@using Syncfusion.Blazor.Navigations
@using System.Text.Json

@inject NavigationManager _navigationManager
<_LeavePage IsParentComponentProcessing=IsLoading LeaveConfirmation="ConfirmLeave_Click" ></_LeavePage>
<div class="container justify-content-around p-1">
<div class="page">
    
    <CascadingValue Value="@AllParams">
    <div class="col-12">
         @if (IsLoading)
        {
            <LoadingPage></LoadingPage>
        }
        else
        {
            @if(IsLeaveAllowed == false)
            {
                <div class="save-btn"> 
                    <button @onclick="UpsertCharacter" class="btn btn-primary">Save</button>

                </div>
            }
            <section class="section-create-character">
                <div class="container-fluid">
                    <h3 class="char-title card-title mb-3 ml-3 mt-2">@Title character</h3>
                    <div class="row">
                        <div class="form-group col-4 col-md-4 px-1">
                            <label>Character name</label>
                            @if (AllParams.Character.IsApproved == false || UserInfo?.IsAdminOrMG == true)
                            {
                                <input type="text" @bind-value="AllParams.Character.NPCName" class="form-control"></input>
                            }
                            else
                            {
                                <input readonly type="text" @bind-value="AllParams.Character.NPCName" class="form-control"></input>
                            }
                            </div>
                        <div class="form-group col-1 col-md-1 px-1">
                            <label>Age</label>
                            @if (AllParams.Character.IsApproved == false || UserInfo?.IsAdminOrMG == true)
                            {
                                <InputNumber  @bind-Value="AllParams.Character.Age" class="form-control col-2"></InputNumber>
                            }
                            else
                            {
                                <InputNumber readonly @bind-Value="AllParams.Character.Age" class="form-control col-2"></InputNumber>
                            }
                        </div>
                       
                        <div class="form-group col-3 col-md-3 px-1">
                            <label>Character Type</label>
                            @if (AllParams.Character.IsApproved == false || UserInfo?.IsAdminOrMG == true)
                            {
                                <InputSelect @bind-Value="AllParams.Character.NPCType" class="form-select" @bind-Value:after="CharacterTypeHandle">
                                            <option selected="selected" value="@SD.NPCType.Hero">
                                                @SD.NPCType.Hero
                                    </option>
                                    @if (IsDukeAllowed)
                                    {
                                                <option value="@SD.NPCType.Duke">
                                                    @SD.NPCType.Duke
                                        </option>
                                    }
                                </InputSelect>
                            }
                            else
                            {
                                <input readonly type="text" @bind-value="AllParams.Character.NPCType" class="form-control"></input>
                            }
                        </div>
                        <div class="col-5 col-md-2 date">
                            <DateComponent Date="CurrentDate" Editable="UserInfo?.IsAdminOrMG == true"></DateComponent>
                        </div>
                        @if (UserInfo?.IsAdminOrMG == true)
                        {
                            <div class="form-group col-2 col-md-1 px-1">
                                <label>Is Approved?</label>
                                <MudCheckBox @bind-Value="@IsApproved" Size="Size.Medium"></MudCheckBox>
                            </div>
                        }
                            
                    </div>
                </div>
            </section>

             <section class="section-create-character">
                <div class="container-fluid">
                    <div class="row">

                        <PortraitComponent OnPortraitChange="ParamChange"></PortraitComponent>

                        <AttributeComponent OnAttributesChange="ParamChange"></AttributeComponent>
                        
                        <BaseSkillsComponent OnBaseSkillsChange="ParamChange"></BaseSkillsComponent>


                        <RaceComponent OnTraitsChange="ParamChange"></RaceComponent>

                        <ProfessionComponent @bind-Profession="@AllParams.Profession"></ProfessionComponent>

                        <div class="traits p-2">
                            <MudPaper Class="p-2 m-0 w-100 h-100">
                                <h3 class="my-3 ml-3 text-center">TRAITS</h3>
                                <div class="trait-container">
                                   <TraitsComponent OnTraitsChange="TraitsChange" @bind-Traits="@AllParams.TraitsCharacter" TraitType="@SD.TraitType_Character"></TraitsComponent>
                                </div>
                            </MudPaper>
                        </div>

                        <div class="description p-2">
                            <MudPaper Class="p-2 m-0 w-100 h-100">
                                <CharDescriptionDialog DescriptionConfirmation="GetDescription" SavedDescription="@AllParams.Character.Description"></CharDescriptionDialog>
                            </MudPaper>
                        </div>
                        <div class="equipment p-2">
                             <MudPaper Class="p-2 m-0 w-100 h-100">
                                <EquipmentComponent OnTraitsChange="TraitsChange" PageMode=true></EquipmentComponent>
                             </MudPaper>
                        </div>

                        @if (AllParams.Character.IsApproved == false || UserInfo?.IsAdminOrMG == true)
                        {
                            <div class="traits p-2">
                                <MudPaper Class="p-2 m-0 w-100 h-100">
                                    <h3 class="my-3 ml-3 text-center">TEMPORARY STATES</h3>
                                    <div class="trait-container">
                                            <TraitsComponent OnTraitsChange="TraitsChange" @bind-Traits="@AllParams.TraitsTemporary" TraitType="@SD.TraitType_Temporary"></TraitsComponent>
                                    </div>
                                </MudPaper>
                            </div>
                        }
                    </div>
                </div>
            </section>

            <section class="section-create-character">
                <div class="container-fluid">
                    <div class="row">
                        <h3 class="my-3 ml-3">SPECIAL SKILLS</h3>
                        @if(AllParams.Character.IsApproved == false)
                        {
                                
                            <button class="btn btn-secondary" style="width: 180px; margin-left:10px; " @onclick="AutoChooseRelatedAttributesForSpecialSkills">Autoselect attributes</button>
                        }
                        <div class="specialskills">
                        
                            @foreach (var baseSkill in AllParams.BaseSkills)
                            {
                                <SpecialSkillsComponent @ref="SpecialSkilsComp" BaseSkill="baseSkill" OnSpecialSkillChange="SpecialSkillChange"></SpecialSkillsComponent>
                            }

                        </div>

                    </div>
                </div>
            </section>
            <div class="form-group py-2">
                <NavLink href="character" class="btn btn-secondary">Back to list</NavLink>
            </div>
           
        }
    </div>
    </CascadingValue>
</div>
</div>

<style>

    .e-richtexteditor .e-rte-content,
    .e-richtexteditor .e-source-content {
        background: transparent;
    }

    .dense-numeric-field .mud-input-control-input-container .mud-input .mud-input-root {
        padding: 4px !important;
    }

    .dense-numeric-field .mud-input-control-input-container .mud-input-underline {
        margin-top: 0px !important;
    }
    /* .mud-input .mud-input-text .mud-input-underline .mud-shrink{
        margin-top: 0px !important;
    } */
</style>



@code {

    public UserInfo? UserInfo { get; set; }

    [Parameter]
    public int Id { get; set; }
    private AllParamsModel AllParams { get; set; }
    private IDisposable? registration;
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; } = true;
    private bool ModifChanged = false;
    private bool IsLeaveAllowed { get; set; } = true;
    private bool IsDukeAllowed { get; set; } = false;
    private string TargetLocation { get; set; } = "";
    private List<ToolbarItemModel> NoTools = new List<ToolbarItemModel>();
    private DateModel CurrentDate = new DateModel(1,1);

    private List<object> ToolbarItems = new List<object>() {
        new ItemModel() { Text = "Add", PrefixIcon = "e-add", Id = "Grid_add"},//Here Grid is SfGrid ID
        new ItemModel(){ Text = "Edit", PrefixIcon= "e-edit", Id="Grid_edit"},
        new ItemModel(){ Text = "Delete", PrefixIcon= "e-delete", Id="Grid_delete"},
    };
    private SpecialSkillsComponent SpecialSkilsComp = new();
    private bool IsApproved
    {
        get => AllParams.Character.IsApproved;
        set
        {
            AllParams.Character.IsApproved = value;
            IsLeaveAllowed = false;
        }
    }


    protected override async Task OnInitializedAsync()
    {

        AllParams = new();

        UserInfo = await _userService.GetUserInfo();

        if (UserInfo?.IsAuthenticated == false)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;

                StateHasChanged();
                registration =_navigationManager.RegisterLocationChangingHandler(OnLocationChanging);
                //CustomTraitComponent = new();
                if (Id == 0)
                {
                    //create
                    AllParams.Character = new CharacterDTO();
                    AllParams.Attributes.FillPropertiesContainer(CharacterSeeder.GetAttributes());
                    AllParams.BaseSkills = CharacterSeeder.GetBaseSkills();
                    AllParams.SpecialSkills.FillPropertiesContainer(CharacterSeeder.GetSpecialSkills());
                    AllParams.Races = (await _raceRepository.GetAllApproved()).ToList();
                    AllParams.TraitsCharacter = new List<TraitDTO>();
                    AllParams.TraitsTemporary = new List<TraitDTO>();
                    AllParams.CurrentRace = new();
                    AllParams.Profession = new();
                    AllParams.EquipmentSlots = new List<EquipmentSlotDTO>();

                    AllParams.Character.UserName = UserInfo?.UserName;
                    IsDukeAllowed = (UserInfo?.Role == SD.Role_DukePlayer);

                    if (IsDukeAllowed == false)
                        AllParams.Character.NPCType = SD.NPCType.Hero;
                    else
                        AllParams.Character.NPCType = SD.NPCType.Duke;
                    CharacterTypeHandle();
                }
                else
                {
                    //update
                    Title = "Edit";
                    await LoadCharacter();
                }

                AllParams.SpecialSkills.AddRelatedParametes();
                CurrentDate = new DateModel(AllParams.Character.CurrentDate);

                AllParams.AllTraitsChange();
                //await TraitsChange();

                await ChangeProfRelatedAttribute();
                AllParams.Profession.CalculateClassParams(AllParams.Attributes.GetAll());                
                AllParams.Health.UpdateHealthBonusesInAttributes();
                IsLeaveAllowed = true;
                IsLoading = false;
                StateHasChanged();
            }
            catch(WarningException ex)
            {
                await _jsRuntime.ToastrWarning(ex.ToString());
            }
            catch (Exception ex)
            {
                IsLoading = false;
                await _jsRuntime.ToastrError("Error while initialize: " + ex.ToString());
            }
        }
    }
    private async Task LoadCharacter()
    {
        AllParams.Character = await _characterRepository.GetById(Id);
        AllParams.Attributes.FillPropertiesContainer(await _attributeRepository.GetAll(Id));
        AllParams.BaseSkills = await _baseSkillRepository.GetAll(Id);
        AllParams.SpecialSkills.FillPropertiesContainer(await _specialSkillRepository.GetAll(Id));
        AllParams.TraitsCharacter = (await _traitCharacterRepository.GetAll(Id)).Where(u => u.IsTemporary == false).Cast<TraitDTO>().ToList();
        AllParams.TraitsTemporary = (await _traitCharacterRepository.GetAll(Id)).Where(u => u.IsTemporary == true).Cast<TraitDTO>().ToList();
        AllParams.CurrentRace = await _raceRepository.GetById(AllParams.Character.RaceId);
        AllParams.Profession = await _professionRepository.GetById(AllParams.Character.ProfessionId);
        AllParams.Profession.Traits = (await _traitProfessionRepository.GetAll(AllParams.Character.ProfessionId)).ToList();
        AllParams.EquipmentSlots = (await _equipmentSlotRepository.GetAll(Id)).ToList();
        AllParams.Races = (await _raceRepository.GetAllApproved()).ToList();
        ICollection<WoundDTO> wounds = (await _woundRepository.GetAll(Id)).ToList();
        ICollection<WoundDTO> conds = (await _woundRepository.GetAllCond(Id)).Cast<WoundDTO>().ToList();
        wounds = wounds.Concat(conds).ToList();
        AllParams.Health.FillPropertiesContainer(wounds);
    }

    private async Task UpsertCharacter()
    {
        RaceDTO? raceDTO;
        ProfessionDTO? professionDTO;
        IsLoading = true;
        //update date
        AllParams.Character.CurrentDate = CurrentDate;
        StateHasChanged();
        try
        {
            if (AllParams.Character.Id == 0)
            {
                //check if all valid
                //upsert race
                if (AllParams.CurrentRace.Id > 0)
                {
                    raceDTO = await _raceRepository.Update(AllParams.CurrentRace);
                }
                else
                {
                    raceDTO = await _raceRepository.Create(AllParams.CurrentRace);
                }
                if (raceDTO is not null)
                {
                    AllParams.Character.RaceId = raceDTO.Id;

                }
                else
                {
                    AllParams.Character.RaceId = 0;
                }

                // create equipment (in character)
                //add fist seacretly
                var fists = await _equipmentRepository.GetByName(SD.BasicWeaponsMelee.Fists);
                var slot = new EquipmentSlotDTO(fists);
                AllParams.EquipmentSlots.Add(slot);
                AllParams.Character.EquipmentSlots = AllParams.EquipmentSlots;

                // create profession
                professionDTO = await _professionRepository.Create(AllParams.Profession);
                if (professionDTO is not null)
                    AllParams.Character.ProfessionId = professionDTO.Id;
                //create profession traits
                if(AllParams.Profession.Traits is not null)
                {
                    foreach (var skill in AllParams.Profession.Traits)
                    {
                        skill.ProfessionId = AllParams.Character.ProfessionId;
                        await _traitProfessionRepository.Create(skill);
                    }
                }

                var charac = await _characterRepository.Create(AllParams.Character);

                // create character traits 
                foreach (var obj in AllParams.TraitsCharacter)
                {
                    TraitCharacterDTO traitChar = new(obj, charac.Id);
                    await _traitCharacterRepository.Create(traitChar);
                }
                // create temporary traits (states)
                foreach (var obj in AllParams.TraitsTemporary)
                {
                    TraitCharacterDTO traitChar = new(obj, charac.Id, true);
                    await _traitCharacterRepository.Create(traitChar);
                }

                foreach (var obj in AllParams.Attributes.GetAllArray())
                {
                    obj.CharacterId = charac.Id;
                    await _attributeRepository.Create(obj);
                }
                foreach (var obj in AllParams.BaseSkills)
                {
                    obj.CharacterId = charac.Id;
                    await _baseSkillRepository.Create(obj);
                }
                foreach (var obj in AllParams.SpecialSkills.GetAllArray())
                {
                    obj.CharacterId = charac.Id;
                    await _specialSkillRepository.Create(obj);
                }
                Id = charac.Id;
            }
            else
            {
                //update race
                if (AllParams.CurrentRace.Id > 0)
                {
                    raceDTO = await _raceRepository.Update(AllParams.CurrentRace);
                }
                else
                {
                    raceDTO = await _raceRepository.Create(AllParams.CurrentRace);
                }
                if (raceDTO is not null)
                {
                    AllParams.Character.RaceId = raceDTO.Id;
                }
                else
                {
                    AllParams.Character.RaceId = 0;
                }
                // update profession
                if (AllParams.Profession.Id > 0)
                    professionDTO = await _professionRepository.Update(AllParams.Profession);
                else
                    professionDTO = await _professionRepository.Create(AllParams.Profession);
                if (professionDTO is not null)
                    AllParams.Character.ProfessionId = professionDTO.Id;

                // update profession traits
                if (AllParams.Profession.Traits is not null)
                {
                    foreach (var skill in AllParams.Profession.Traits)
                    {
                        skill.ProfessionId = AllParams.Character.ProfessionId;
                        await _traitProfessionRepository.Update(skill);
                    }
                }

                // update Character traits
                foreach (TraitCharacterDTO obj in AllParams.TraitsCharacter)
                {
                    obj.CharacterId = Id;
                    await _traitCharacterRepository.Update(obj);
                }
                // update temporary triaits (states)
                foreach (var obj in AllParams.TraitsTemporary)
                {
                    TraitCharacterDTO trait;
                    if (obj.TraitApproved)
                    {
                        trait = new(obj, Id, true);

                    }
                    else
                    {
                        trait = (TraitCharacterDTO)obj;
                    }
                    await _traitCharacterRepository.Update(trait);
                }                

                // update equipment (in character)
                AllParams.Character.EquipmentSlots = AllParams.EquipmentSlots;

                // update character with TraitAdv collection properly filled
                await _characterRepository.Update(AllParams.Character);
                foreach (var obj in AllParams.Attributes.GetAllArray())
                {
                    obj.CharacterId = Id;
                    await _attributeRepository.Update(obj);
                }
                foreach (var obj in AllParams.BaseSkills)
                {
                    obj.CharacterId = Id;
                    await _baseSkillRepository.Update(obj);
                }
                foreach (var obj in AllParams.SpecialSkills.GetAllArray())
                {
                    obj.CharacterId = Id;
                    await _specialSkillRepository.Update(obj);
                }
            }
            // delete any removed special skills from database
            foreach(var obj in AllParams.SpecialSkills.SkillsToDelete)
            {
                await _specialSkillRepository.Delete(obj);
            }
            AllParams.SpecialSkills.SkillsToDelete.Clear();

            // delete traits that are no longer needed
            foreach (var obj in AllParams.TraitsToDelete)
            {
                if (obj.TraitType == SD.TraitType_Character || obj.TraitType == SD.TraitType_Temporary)
                    await _traitCharacterRepository.Delete(obj.Id);
            }

            // if main character is no approved anymore - delete its id from user info
            if (UserInfo?.SelectedCharacterId == AllParams.Character.Id && AllParams.Character.IsApproved == false)
            {
                await _userService.SetSelectedCharId(0);
            }

            AllParams.Character = await _characterRepository.GetById(Id);
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while adding character");
            IsLeaveAllowed = true;
            _navigationManager.NavigateTo("/character");
        }
        IsLeaveAllowed = true;
        IsLoading = false;
        StateHasChanged();
    }
    public async Task DeleteCharacterHandler()
    {
        try
        {
            if (AllParams.Character.Id == 0)
            {
                //delete Attributes
                foreach (var att in AllParams.Attributes.GetAllArray())
                {
                    await _attributeRepository.Delete(att.Id);
                }
                //delete BaseSkills
                foreach (var bs in AllParams.BaseSkills)
                {
                    await _baseSkillRepository.Delete(bs.Id);
                }
                //delete SpecialSkills
                foreach (var bs in AllParams.SpecialSkills.GetAllArray())
                {
                    await _specialSkillRepository.Delete(bs.Id);
                }
                await _characterRepository.Delete(AllParams.Character.Id);
            }
            IsLeaveAllowed = false;
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while deleting: " + ex.ToString());
        }
    }

    private void CharacterTypeHandle()
    {
        IsLeaveAllowed = false;
        if (AllParams.Character.NPCType == SD.NPCType.Hero)
        {
            AllParams.Character.AttributePoints = 100;
            AllParams.Character.CurrentExpPoints = 250;
            AllParams.Profession.ClassLevel = 2;
        }
        else if (AllParams.Character.NPCType == SD.NPCType.Duke)
        {
            AllParams.Character.AttributePoints = 100;
            AllParams.Character.CurrentExpPoints = 300;
            AllParams.Profession.ClassLevel = 3;
        }

        foreach (var obj in AllParams.Attributes.GetAllArray())
            obj.BaseBonus = 6;
        foreach (var obj in AllParams.BaseSkills)
            obj.BaseBonus = 0;
    }



    private async Task ChangeProfRelatedAttribute()
    {
        try
        {
            if (string.IsNullOrEmpty(AllParams.Profession.RelatedAttributeName) == false)
            {
                var attr = AllParams.Attributes.Get(AllParams.Profession.RelatedAttributeName);
                if (attr == null)
                    throw new Exception();
                AllParams.Profession.AddPropertyListener(attr);
                IsLeaveAllowed = false;
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }
    }

    public async Task ConfirmLeave_Click(bool isConfirmed)
    {
        IsLoading = true;
        StateHasChanged();
        if (isConfirmed == true )
        {
            IsLeaveAllowed = true;
            await _jsRuntime.InvokeVoidAsync("HideLeavePageModal");
            _navigationManager.NavigateTo(TargetLocation);
        }
        IsLoading = false;
        StateHasChanged();
        await _jsRuntime.InvokeVoidAsync("HideLeavePageModal");
    }
    private void HandleLeavePage() => _jsRuntime.InvokeVoidAsync("ShowLeavePageModal");

    private void GetDescription(string description) => AllParams.Character.Description = description;

    protected void ParamChange()
    {
        IsLeaveAllowed = false;

        StateHasChanged();
    }   
    protected void TraitsChange(string traitType)
    {
        IsLeaveAllowed = false;
        AllParams.TraitsChange(traitType);
        StateHasChanged();
    }
    
    private void AutoChooseRelatedAttributesForSpecialSkills()
    {
        IsLeaveAllowed = false;
        AllParams.SpecialSkills.AutoChooseRelatedAttribute();
        StateHasChanged();
    }


    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (!IsLeaveAllowed )
        {
            TargetLocation = context.TargetLocation;

            context.PreventNavigation();
            HandleLeavePage();
        }

        return ValueTask.CompletedTask;
    }

    private async Task SpecialSkillChange()
    {
        IsLeaveAllowed = false;
        StateHasChanged();
    }
    public void Dispose() => registration?.Dispose();
}


                