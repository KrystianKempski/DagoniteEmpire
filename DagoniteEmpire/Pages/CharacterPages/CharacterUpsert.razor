@page "/character/create"
@page "/character/edit/{id:int}"

@implements IDisposable
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IBaseSkillRepository _baseSkillRepository
@using DA_Models

@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="char-title card-title mb-3 ml-3">@Title character</h3>


    <div class="col-12">
         @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Character" OnValidSubmit="UpsertCharacter">
                <DataAnnotationsValidator/>
                <form class="row g-3">
                    <div class="form-group col-md-4">
                        <label>Character name</label>
                        <InputText @bind-Value="Character.NPCName" class="form-control col-4"></InputText>
                        <div class="valid-message">
                            <ValidationMessage For="()=>Character.NPCName"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group col-md-3">
                        <label>Class</label>
                        <InputText @bind-Value="Character.Class" class="form-control col-3"></InputText>
                        <div class="valid-message">
                            <ValidationMessage For="()=>Character.Class"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group col-md-3">
                        <label>Race</label>
                        <InputText @bind-Value="Character.Race" class="form-control col-3"></InputText>
                        <div class="valid-message">
                            <ValidationMessage For="()=>Character.Race"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group col-md-2">
                        <label>Age</label>
                        <InputNumber @bind-Value="Character.Age" class="form-control col-2"></InputNumber>
                        <div class="valid-message">
                            <ValidationMessage For="()=>Character.Age"></ValidationMessage>
                        </div>
                    </div>
                </form>
                <div class="row g-3">
                    <div class="form-group col-md-6">
                        <h3 class="my-3 ml-3">Attributes</h3>
                        <SfGrid @ref="AttributeGrid" DataSource="@Attributes" AllowPaging="false">
                            <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="false"></GridEditSettings>
                             <GridEvents OnActionBegin="AttributesActionHandler" TValue="AttributeDTO"></GridEvents> 
                            <GridColumns>
                                 <GridColumn IsPrimaryKey="true" AllowAdding="false" Field=@nameof(AttributeDTO.Id) HeaderText="ID" Width="0"></GridColumn>
                                <GridColumn Field=@nameof(AttributeDTO.Name) HeaderText=Attribute TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                <GridColumn Field=@nameof(AttributeDTO.BaseBonus) HeaderText="Base" Format="N0" TextAlign="TextAlign.Center" Width="50"></GridColumn>
                                <GridColumn Field=@nameof(AttributeDTO.RaceBonus) HeaderText="Race" Format="N0" TextAlign="TextAlign.Center" Width="50"></GridColumn>
                                <GridColumn Field=@nameof(AttributeDTO.GearBonus) HeaderText="Gear" Format="N0" TextAlign="TextAlign.Center" Width="50"></GridColumn>
                                <GridColumn Field=@nameof(AttributeDTO.HealthBonus) HeaderText="Health" Format="N0" TextAlign="TextAlign.Center" Width="50"></GridColumn>
                            </GridColumns>
                        </SfGrid> 
                     
                    </div>
                    <div class="form-group col-md-6">
                        <h3 class="my-3 ml-3">Base Skills</h3>
                        <SfGrid @ref="BaseSkillGrid" DataSource="@BaseSkills" AllowPaging="false">
                            <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="false" ></GridEditSettings>
                            <GridEvents OnActionBegin="BaseSkillActionHandler" TValue="BaseSkillDTO"></GridEvents>
                            <GridColumns>
                                <GridColumn IsPrimaryKey="true" AllowAdding="false" Field=@nameof(BaseSkillDTO.Id) HeaderText="ID" Width="0"></GridColumn>
                                <GridColumn Field=@nameof(BaseSkillDTO.Name) HeaderText="Base" Format="N0" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                                <GridColumn Field=@nameof(BaseSkillDTO.BaseBonus) HeaderText="Base" Format="N0" TextAlign="TextAlign.Center" Width="50"></GridColumn>
                                <GridColumn Field=@nameof(BaseSkillDTO.RaceBonus) HeaderText="Race" Format="N0" TextAlign="TextAlign.Center" Width="50"></GridColumn>
                                <GridColumn Field=@nameof(BaseSkillDTO.GearBonus) HeaderText="Gear" Format="N0" TextAlign="TextAlign.Center" Width="50"></GridColumn>
                            </GridColumns>
                        </SfGrid>

                    </div>
                   
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="character" class="btn btn-secondary">Back to list</NavLink>
                </div>
            </EditForm>
        }
    </div>

</div>

@* <SfRichTextEditor>
    <p>Rich Text Editor allows to insert images from online source as well as local computer where you want to insert the image in your content.</p>
    <p><b>Get started Quick Toolbar to click on the image</b></p>
    <p>It is possible to add custom style on the selected image inside the Rich Text Editor through quick toolbar.</p>
</SfRichTextEditor> *@

@code {

    [Parameter]
    public int Id { get; set; }

    private CharacterDTO Character { get; set; } = new CharacterDTO();
    private IEnumerable<AttributeDTO> Attributes { get; set; } = CharacterSeeder.GetAttributes();
    public SfGrid<AttributeDTO> AttributeGrid;
    private IEnumerable<BaseSkillDTO> BaseSkills { get; set; } = CharacterSeeder.GetBaseSkills();
    public SfGrid<BaseSkillDTO> BaseSkillGrid;
    private IDisposable? registration;
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    private bool IsCharacterSaved = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            registration = _navigationManager.RegisterLocationChangingHandler(OnLocationChanging);
            if (Id == 0)
            {
                //create
                IsLoading = true;
                StateHasChanged();
                Character = await _characterRepository.Create(Character);
                Id = Character.Id;

                foreach (var att in Attributes)
                {
                    att.CharacterId = Id;
                    var obj = await _attributeRepository.Create(att);
                    att.Id = obj.Id;
                }
                foreach (var bs in BaseSkills)
                {
                    bs.CharacterId = Id;
                    var obj = await _baseSkillRepository.Create(bs);
                    bs.Id = obj.Id;
                }
                IsLoading = false;
                StateHasChanged();
            }
            else
            {
                //update
                IsCharacterSaved = true;
                Title = "Edit";
                await LoadCharacter();
            }
        }
    }
    private async Task LoadCharacter()
    {
        IsLoading = true;
        StateHasChanged();
        Character = await _characterRepository.GetById(Id);
        Attributes = await _attributeRepository.GetAll(Id);
        BaseSkills = await _baseSkillRepository.GetAll(Id);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertCharacter()
    {
        if(Character.Id == 0)
        {
            //create
            await _characterRepository.Create(Character);
            foreach (var att in Attributes)
            {
                att.CharacterId = Id;
                await _attributeRepository.Update(att);
            }
            foreach (var bs in BaseSkills)
            {
                bs.CharacterId = Id;
                await _baseSkillRepository.Update(bs);
            }
        }
        else
        {
            //update
            await _characterRepository.Update(Character);
            IsCharacterSaved = true;
        }
        _navigationManager.NavigateTo("/character");

    }


    public async void AttributesActionHandler(ActionEventArgs<AttributeDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Edit")
            {
                await _attributeRepository.Update(args.Data);
            }
        }
    }
    public async void BaseSkillActionHandler(ActionEventArgs<BaseSkillDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Edit")
            {
                await _baseSkillRepository.Update(args.Data);
            }
        }
    }
    public async void DeleteCharacterHandler()
    {
        //delete Attributes
        foreach (var att in Attributes)
        {
            await _attributeRepository.Delete(att.Id);
        }
        //delete BaseSkills
        foreach (var bs in BaseSkills)
        {
            await _baseSkillRepository.Delete(bs.Id);
        }
        await _characterRepository.Delete(Character.Id);
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (!IsCharacterSaved)
        {
            DeleteCharacterHandler();
            //context.PreventNavigation();
            //add some window with question
        }

        return ValueTask.CompletedTask;
    }

    public void Dispose() => registration?.Dispose();
}


                