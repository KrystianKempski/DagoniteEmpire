
@page "/profession/{id:int}"
@using DA_Business.Services.Interfaces
@using DA_DataAccess.CharacterClasses
@inject IJSRuntime _jsruntime
@inject ICharacterRepository _characterRepository
@inject ITraitRepository<TraitCharacterDTO> _traitCharacterRepository
@inject IAttributeRepository _attributeRepository
@inject IBaseSkillRepository _baseSkillRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject IProfessionRepository _professionRepository
@inject IEquipmentRepository _equipmentRepository
@inject ISpellRepository _spellRepository
@inject ISpellSlotRepository _spellSlotRepository
@inject ITraitRepository<TraitProfessionDTO> _traitProfessionRepository
@inject IEquipmentSlotRepository _equipmentSlotRepository
@inject ISpellCircleRepository _spellCircleRepository
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject IUserService _userService
@inject IBrowserViewportService _vieportService

<div class="on-top-dialog">

    <_LeavePage ComponentDescription="class" IsParentComponentProcessing=IsLoading LeaveConfirmation="ConfirmLeave_Click"></_LeavePage>
</div>

<div class="container justify-content-around">
<div class="main-table">

    @if (IsLoading)
    {
            <LoadingPage></LoadingPage>
    }
    else
    {
        @if (IsLeaveAllowed == false)
        {
            <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">

                <div class="save-btn">
                    <button @onclick="OnSaveChangesBtnClick" class="btn btn-primary">Save</button>
                </div>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">

            <div class="save-btn down">
                 <button @onclick="OnSaveChangesBtnClick" class="btn btn-primary">Save</button>
            </div>
            </MudHidden>
        }

        <label class="warnign-message">@ErrorMessage</label>
        <div class="wide-screen-table">
            <div class="d-flex ">
                <div class="d-flex flex-column px-1 flex-grow-1">
                    <label class="class-section py-1">Class name</label>
                    <SfTextBox OnChange="SomeChange" Placeholder="Insert class name" @bind-Value="@ProfessionDTO.Name"></SfTextBox>
                </div>
                <div class="d-flex flex-column px-1">
                    <label class="class-section py-1">Related attribute</label>
                    <label class="prof-variables" style="width: 150px;">@ProfessionDTO.RelatedAttributeName</label>
                </div>
                @if (UserInfo?.IsAdminOrMG == true)
                {
                    <div class="d-flex flex-column px-1">
                        <label class="column-section py-1">Class Level</label>
                        <SfNumericTextBox CssClass="e-style" Width="100px" ShowSpinButton="false" @bind-Value="@ProfessionDTO.ClassLevel" OnChange="ChangeProfLevel"></SfNumericTextBox>
                    </div>
                }
                else
                {
                    <div class="d-flex flex-column px-1">
                        <label class="column-section py-1">Class Level</label>
                        <label class="prof-variables">@ProfessionDTO.ClassLevel</label>
                    </div>
                }

                <div class="d-flex flex-column px-1">
                    <label class="column-section py-1">Skill roll</label>
                    <label class="prof-variables">@ProfessionDTO.ProfessionSkillRoll</label>
                </div>
                <div class="d-flex flex-column px-1">
                    <label class="column-section py-1">Focus points</label>
                        <label class="prof-variables">@ProfessionDTO.CurrentFocusPoints</label>
                </div>

                <button class="btn btn-secondary mt-4" @onclick="Rest">Rest</button>
            </div>
        </div>
        <div class="short-screen-table">
            <div class="d-flex flex-column ">
                <div class="d-flex">
                    <div class="d-flex flex-column px-1 flex-grow-1">
                        <label class="class-section py-1">Class name</label>
                        <SfTextBox OnChange="SomeChange" Placeholder="Insert class name" @bind-Value="@ProfessionDTO.Name"></SfTextBox>
                    </div>
                   @*  @if (UserInfo?.IsAdminOrMG == true)
                    {
                        <div class="d-flex flex-column px-1">
                            <label class="class-section py-1">Approve</label>
                            <div class="justify-content-center mx-auto my-auto">
                                <SfCheckBox @bind-Checked="ProfessionDTO.IsApproved"></SfCheckBox>
                            </div>
                        </div>
                    } *@
                </div>
                <div class="d-flex flex-column px-1">
                    <label class="class-section py-1">Related attribute</label>
                    <label class="prof-variables">@ProfessionDTO.RelatedAttributeName</label>
                </div>
                <div class="d-flex">
                    @if (UserInfo?.IsAdminOrMG == true)
                    {
                        <div class="d-flex flex-column px-1 variables">
                            <label class="column-section py-1">Class Level</label>
                            <SfNumericTextBox ShowSpinButton="false" @bind-Value="@ProfessionDTO.ClassLevel" OnChange="ChangeProfLevel"></SfNumericTextBox>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex flex-column px-1 variables">
                            <label class="column-section py-1">Class Level</label>
                            <label class="prof-variables">@ProfessionDTO.ClassLevel</label>
                        </div>
                    }

                    <div class="d-flex flex-column px-1 variables">
                        <label class="column-section py-1">Skill roll</label>
                        <label class="prof-variables">@ProfessionDTO.ProfessionSkillRoll</label>
                    </div>
                    <div class="d-flex flex-column px-1 variables">
                        <label class="column-section py-1">Focus points</label>
                            <label class="prof-variables">@ProfessionDTO.CurrentFocusPoints</label>
                    </div>
                </div>

            </div>

        </div>
        <div class="d-flex flex-column flex-grow-1 mx-1">
            <label class="class-section">Class description</label>
            <SfRichTextEditor @bind-Value:after="SomeChange" Height="300px" @ref="DescrEdit" @bind-Value="@ProfessionDTO.Description">
                    <RichTextEditorToolbarSettings  Items="@Tools" Type="ToolbarType.MultiRow" />
            </SfRichTextEditor>
        </div>

        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="px-2">
            <MudTabPanel Text="Active class skills" Style="font-weight: bold;">
                @*  ACTIVE SKILLS  *@
                <div class="wide-screen-table mx-1">

                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th scope="col" class="level-row text-center">Level</th>
                                <th scope="col" class="name-row text-center">Name</th>
                                <th scope="col" class="descr-row text-center">Description</th>
                                <th scope="col" class="number-row text-center">DC</th>
                                <th scope="col" class="number-row text-center">Cost</th>
                                <th scope="col" class="number-row text-center">Range</th>
                                    <th scope="col" class="number-row text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var skill in ProfessionDTO.Traits.Where(u=>u.IsActiveSkill == true))
                            {
                                <tr>
                                    @if (skill.Index % 2 == 0)
                                    {
                                            <td rowspan="2"> <label class="short-row text-center">@skill.Level</label> </td>
                                    }
                                    <td><div class="name-cell text-center"> @skill.Name</div> </td>
                                    <td><div class="bonus-double-cell text-center">@skill.SummaryDescr</div></td>
                                    <td><div class="short-row smaller-text text-center">@skill.DC</div></td>
                                    <td><div class="short-row smaller-text text-center">@skill.Cost</div></td>
                                    <td><div class="short-row smaller-text text-center">@skill.Range</div></td>
                                    <td><div class="action-row text-center">
                                            <button @onclick="@(()=>EditSkill(skill))" class="col btn-small"><i class="px-2 fa-solid fa-pencil"></i></button>
                                            @if(ProfessionDTO.ClassLevel >= skill.Level)
                                            {
                                            <MudToggleIconButton @bind-Toggled="skill.IsInUse"
                                                                    Class="pa-2"
                                                                    @onclick="@(()=>ActivateSkill(skill))"
                                                                    Icon="@Icons.Material.Filled.RadioButtonUnchecked"
                                                                    Color="@Color.Default"
                                                                    ToggledIcon="@Icons.Material.Filled.RadioButtonChecked"
                                                                    ToggledColor="@Color.Success" />
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="short-screen-table mx-1">

                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th scope="col" class="level-row text-center">Level</th>
                                <th scope="col" class="name-row text-center">Name</th>
                                <th scope="col" class="number-row text-center">DC</th>
                                <th scope="col" class="number-row text-center">Cost</th>
                                <th scope="col" class="number-row text-center"> Range</th>
                                <th scope="col" class="number-row text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var skill in ProfessionDTO.Traits.Where(u => u.IsActiveSkill == true))
                            {
                                <tr>
                                    @if (skill.Index % 2 == 0)
                                    {
                                        <td rowspan="4"> <label class="short-row text-center">@skill.Level</label> </td>
                                    }
                                    <td><div class="name-cell text-center">@skill.Name</div></td>
                                    <td><div class="short-row text-center">@skill.DC</div></td>
                                    <td><div class="short-row text-center">@skill.Cost</div></td>
                                    <td><div class="short-row text-center">@skill.Range</div></td>
                                    <td><div class="short-row text-center">
                                        <button @onclick="@(()=>EditSkill(skill))" class="col btn-small"><i class="fa-solid fa-pencil"></i></button>
                                        @if(ProfessionDTO.ClassLevel >= skill.Level)
                                        {
                                                <MudToggleIconButton @bind-Toggled="skill.IsInUse"
                                                                     Class="pa-2"
                                                                     @onclick="@(()=>ActivateSkill(skill))"
                                                                     Icon="@Icons.Material.Filled.RadioButtonUnchecked"
                                                                     Color="@Color.Default"
                                                                     ToggledIcon="@Icons.Material.Filled.RadioButtonChecked"
                                                                     ToggledColor="@Color.Success" />
                                        }
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="4">@skill.SummaryDescr</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            </MudTabPanel>
            <MudTabPanel Text="Passive class skills" Style="font-weight: bold;">
                @*  PASSIVE SKILLS  *@

                <div class="wide-screen-table mx-1">

                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th scope="col" class="level-row text-center">Level</th>
                                <th scope="col" class="name-row text-center">Name</th>
                                <th scope="col" class="descr-row text-center">Description</th>
                                <th scope="col" class="number-row text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var skill in ProfessionDTO.Traits.Where(u=>u.IsActiveSkill == false))
                            {
                                <tr>
                                    <td> <label class="short-row text-center">@skill.Level</label></td>
                                    <td> <div class="name-cell text-center">@skill.Name </div></td>
                                    <td> <div class="bonus-double-cel text-centerl">@skill.SummaryDescr</div></td>
                                        <td><div class="short-row text-center"><button @onclick="@(()=>EditSkill(skill))" class="col btn-small"><i class="fa-solid fa-pencil"></i></button></div></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="short-screen-table mx-1">

                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th scope="col" class="number-row text-center">Level</th>
                                <th scope="col" class="name-row-short text-center">Name</th>
                                <th scope="col" class="number-row text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var skill in ProfessionDTO.Traits.Where(u => u.IsActiveSkill == false))
                            {
                                <tr>
                                    <td rowspan="2"> <label class="short-row">@skill.Level</label> </td>
                                    <td> <div class="name-cell">@skill.Name </div> </td>
                                    <td><div class="short-row"><button @onclick="@(()=>EditSkill(skill))" class="col btn-small"><i class="fa-solid fa-pencil"></i></button></div></td>
                                </tr>
                                <tr>
                                    <td colspan="2"> @skill.SummaryDescr</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            </MudTabPanel>
            @if(ProfessionDTO.CasterType != SpellcasterType.None)
            {
            <MudTabPanel Text="Spells" Disabled="false" Style="font-weight: bold;">
                @*  SPELLS  *@

                 <div class="wide-screen-table">
                    <MudTable RowClass="cell-small" T="SpellCircleDTO" Items="@SpellCircles" Breakpoint="Breakpoint.None" @ref="CircleTable">
                        <HeaderContent>
                            <MudTh Style="text-align:center; width: 60px; padding: 4px; font-size:13px; font-weight:bold;">Level</MudTh>
                            <MudTh Style="text-align:center; width: 60px; padding: 4px; font-size:13px; font-weight:bold;">Known</MudTh>
                            <MudTh Style="text-align:center; width: 60px; padding: 4px; font-size:13px; font-weight:bold;">Today</MudTh>
                            <MudTh Style="text-align:center; padding: 4px;  font-size:13px; font-weight:bold;">Spell slots</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd Style="text-align:center; width: 60px; padding: 4px; font-size:26px; font-weight:bold" DataLabel="Level">@context.Level</MudTd>
                            <MudTd Style="text-align:center; width: 60px; padding: 4px;" DataLabel="Known">@context.KnownSpells</MudTd>
                            <MudTd Style="text-align:center; width: 60px; padding: 4px;" DataLabel="Today">@context.PerDay</MudTd>
                            <MudTd Style="text-align:center; padding: 4px;" DataLabel="Spell slots">
                                <MudTable T="SpellSlot" Items="@context.SpellSlots" Hover="true" Breakpoint="Breakpoint.None">
                                    <RowTemplate Context="slotContext">
                                        @if(slotContext.Spell is not null)
                                        {
                                            <MudTd Style="padding: 4px;" DataLabel="Prepared">
                                                <MudTooltip >
                                                    <ChildContent>
                                                        <MudLink Href="@slotContext.Spell.Link">@slotContext.Spell.Name</MudLink>
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        <MudText Class="mud-tooltip mud-tooltip-default tooltiptext">
                                                            @slotContext.Spell.Description
                                                        </MudText>
                                                    </TooltipContent>
                                                </MudTooltip> 
                                            </MudTd>
                                        }
                                        else
                                        {
                                            <MudTd Style="padding: 4px;" DataLabel="Prepared">Select Spell</MudTd>
                                        }
                                        <MudTd Style="width: 60px; padding: 4px;" DataLabel="ready">
                                        
                                            <MudNumericField Class="dense-numeric-field text-center" IconSize="Size.Small"
                                                             ShrinkLabel="true" Value=@slotContext.Prepared ValueChanged="(int newValue)=>ChangePreparedSpells(slotContext,context,newValue)" Immediate="true"
                                                             For="@(() => slotContext.Prepared)"  />
                                        </MudTd>
                                        <MudTd Style="width: 60px; padding: 4px;" DataLabel="actions">
                                            <div class="d-flex px-0">
                                                @if(slotContext.Spell is not null && string.IsNullOrEmpty(slotContext.Spell.Name) == false){
                                                    <MudIconButton Style="width:30px; height: 30px; padding:1px;" OnClick="@(()=>SaveSpell(slotContext,true))" Icon="@Icons.Material.Filled.Edit" aria-label="Change spell"></MudIconButton>
                                                    <MudIconButton Style="width:30px; height: 30px; padding:1px;"  OnClick="@(()=>DeleteSpell(slotContext))" Icon="@Icons.Material.Filled.Delete" aria-label="Delete spell"></MudIconButton>
                                                }else{
                                                    <MudIconButton Style="width:30px; height: 30px; padding:1px;" OnClick="@(()=>SaveSpell(slotContext,false))" Icon="@Icons.Material.Filled.Add" aria-label="Add new spell"></MudIconButton>
                                                }
                                            </div>
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
                <div class="short-screen-table">
                    @foreach (var context in @SpellCircles){
                        <MudPaper Class="pa-1 my-1" Elevation="3">

                            <MudSimpleTable Elevation="1" Style="margin-bottom:2px;">
                                <thead>
                                    <tr>
                                        <th style="text-align:center; padding: 4px; font-size:13px; font-weight:bold;">Level</th>
                                        <th style="text-align:center; padding: 4px; font-size:13px; font-weight:bold;">Known</th>
                                        <th style="text-align:center; padding: 4px; font-size:13px; font-weight:bold;">Today</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td style="text-align:center; padding: 4px; font-size:22px;font-weight:bold;">@context.Level</td>
                                        <td style="text-align:center; padding: 4px; font-size:16px;font-weight:bold;">@context.KnownSpells</td>
                                        <td style="text-align:center; padding: 4px; font-size:16px;font-weight:bold;">@context.PerDay</td>
                                    </tr>
                                </tbody>
                            </MudSimpleTable>

                            <MudTable T="SpellSlot" Items="@context.SpellSlots" Hover="true" Breakpoint="Breakpoint.None">
                                <RowTemplate Context="slotContext">
                                    @if (slotContext.Spell is not null)
                                    {
                                        <MudTooltip >
                                            <ChildContent>
                                                <MudTd Style="padding: 4px;" DataLabel="Prepared" >
                                                    <MudLink Href="@slotContext.Spell.Link">@slotContext.Spell.Name</MudLink>
                                                </MudTd>
                                            </ChildContent>
                                            <TooltipContent>
                                                <MudText Class="mud-tooltip mud-tooltip-default tooltiptext">
                                                    @slotContext.Spell.Description
                                                </MudText>
                                            </TooltipContent>
                                        </MudTooltip>
                                    }
                                    else
                                    {
                                        <MudTd Style="padding: 4px;" DataLabel="Prepared">Select Spell</MudTd>
                                    }
                                    <MudTd Style="width: 60px; padding: 4px;" DataLabel="ready">

                                        <MudNumericField Class="dense-numeric-field text-center" IconSize="Size.Small"
                                                         ShrinkLabel="true" Value=@slotContext.Prepared ValueChanged="(int newValue)=>ChangePreparedSpells(slotContext,context,newValue)" Immediate="true"
                                                         For="@(() => slotContext.Prepared)" />
                                    </MudTd>
                                    <MudTd Style="width: 60px; padding: 4px;" DataLabel="actions">
                                        <div class="d-flex px-0">
                                            @if (slotContext.Spell is not null && string.IsNullOrEmpty(slotContext.Spell.Name) == false)
                                            {
                                                <MudIconButton Style="width:30px; height: 30px; padding:1px;" OnClick="@(()=>SaveSpell(slotContext,true))" Icon="@Icons.Material.Filled.Edit" aria-label="Change spell"></MudIconButton>
                                                <MudIconButton Style="width:30px; height: 30px; padding:1px;" OnClick="@(()=>DeleteSpell(slotContext))" Icon="@Icons.Material.Filled.Delete" aria-label="Delete spell"></MudIconButton>
                                            }
                                            else
                                            {
                                                <MudIconButton Style="width:30px; height: 30px; padding:1px;" OnClick="@(()=>SaveSpell(slotContext,false))" Icon="@Icons.Material.Filled.Add" aria-label="Add new spell"></MudIconButton>
                                            }
                                        </div>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudPaper>
                    }
                </div>
               
            </MudTabPanel>
            }
        </MudTabs>
        <label class="warnign-message">@ErrorMessage</label>
    }
</div>
</div>

           
<style>
    .dense-numeric-field .mud-input-control-input-container .mud-input-underline {
        margin-top: 0px !important;
    }
    .mud-input-control {
        margin-top: 0px !important;
    }
    .mud-main-content {
        position: relative;
    }

    .e-numeric.e-style .e-control.e-numerictextbox {
      
        padding: 2px;
        font-size: 18px;
        font-weight: bold;
        text-align: center;
        vertical-align: middle;
    }

    .tooltip .tooltiptext {
        visibility: hidden;
        display: block;
        text-align: center;
        position: absolute;
    }

    .tooltip:hover .tooltiptext {
        visibility: visible;
    }
</style>


@code {
    [Parameter]
    public int Id { get; set; }
    public int AvalibleSpells { get; set; } = 0;
    public ProfessionDTO ProfessionDTO { get; set; }
    private AllParamsModel AllParams { get; set; } = new();
    private SfRichTextEditor DescrEdit = new SfRichTextEditor();
    private ICollection<SpellCircleDTO> SpellCircles = new List<SpellCircleDTO>();
    private MudTable<SpellCircleDTO> CircleTable;
    public string TraitType = SD.TraitType_Profession;

    public UserInfo? UserInfo { get; set; }
    private MudTable<SpellCircle> mudTable;
    private TraitDTO? EditedTrait { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = true;
    private bool IsSpellTypeDisabled { get; set; } = true;
    private IDisposable? registration;
    private bool IsLeaveAllowed { get; set; } = true;
    private string TargetLocation { get; set; } = "";


    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };

    protected override async Task OnInitializedAsync()
    {        
        try
        {
            IsLoading = true;
            UserInfo = await _userService.GetUserInfo();
            if (UserInfo?.IsAuthenticated == false)
                return;

            registration = _navigationManager.RegisterLocationChangingHandler(OnLocationChanging);
            if (UserInfo?.IsAuthenticated == false)
            {
                var uri = new Uri(_navigationManager.Uri);
                _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
            }
            await LoadCharacter();
            ProfessionDTO.StartProfessionPage();

            IsLoading = false;
            IsLeaveAllowed = true;
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (UserInfo?.IsAuthenticated == false)
            {
                var uri = new Uri(_navigationManager.Uri);
                _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
            }
        }
    }

    private async Task LoadCharacter()
    {
        try{

            AllParams.Character = await _characterRepository.GetById(Id);
            AllParams.Attributes.FillPropertiesContainer(await _attributeRepository.GetAll(Id));
            AllParams.BaseSkills = await _baseSkillRepository.GetAll(Id);
            AllParams.SpecialSkills.FillPropertiesContainer(await _specialSkillRepository.GetAll(Id));
            AllParams.Profession = await _professionRepository.GetById(AllParams.Character.ProfessionId);
            AllParams.TraitsCharacter = (await _traitCharacterRepository.GetAll(Id)).Where(u => u.IsTemporary == false).Cast<TraitDTO>().ToList();
            AllParams.TraitsTemporary = (await _traitCharacterRepository.GetAll(Id)).Where(u => u.IsTemporary == true).Cast<TraitDTO>().ToList();

            ProfessionDTO = AllParams.Profession;
            if(ProfessionDTO.SpellCircles is not null)
            {
                SpellCircles = ProfessionDTO.SpellCircles;
            }
            //profession skill traits
            ProfessionDTO.Traits = (await _traitProfessionRepository.GetAll(AllParams.Character.ProfessionId)).ToList();

            if (string.IsNullOrEmpty(ProfessionDTO.RelatedAttributeName))
                throw new Exception("No related class attribute");

            if (ProfessionDTO.CasterType != SpellcasterType.None)
                IsSpellTypeDisabled = false;

            ProfessionDTO.CalculateClassParams(AllParams.Attributes.GetAll());
        }
        catch(Exception ex)
        {
            IsLoading = false;
            await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
        }
    }

    private async Task OnSaveChangesBtnClick()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();
            if (string.IsNullOrEmpty(ProfessionDTO.Name) || string.IsNullOrEmpty(ProfessionDTO.Description))
            {
                throw new WarningException("Create name and description of class");
            }
            if (string.IsNullOrEmpty(ProfessionDTO.RelatedAttributeName))
            {
                throw new WarningException("Choose class related attribute");
            }

            ProfessionDTO.SpellCircles = SpellCircles;

            await _professionRepository.Update(ProfessionDTO);

            if (ProfessionDTO.Traits is not null)
            {
                foreach (var profSkill in ProfessionDTO.Traits)
                {
                    await _traitProfessionRepository.Update(profSkill);
                }
            }

            // update Character traits
            foreach (var trait in ProfessionDTO.TraitsToAdd)
            {
                trait.CharacterId = AllParams.Character.Id;
                await _traitCharacterRepository.Update(trait);
            }
            foreach (var trait in ProfessionDTO.TraitsToDelete)
            {
                await _traitCharacterRepository.Delete(trait.Id);                
            }

            ErrorMessage = string.Empty;
            IsLoading = false;
            IsLeaveAllowed = true;
            StateHasChanged();
        }
        catch (WarningException ex)
        {
            IsLoading = false;
            await _jsruntime.ToastrWarning(ex.ToString());
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
        }
    }

    private void SomeChange()
    {
        IsLeaveAllowed = false;
    }

    private async Task EditSkill(TraitProfessionDTO skill)
    {
        var idToDelete = skill.Id;
        var parameters = new DialogParameters<CreateProfessionSkillDialog> {{ x => x.NewTrait, skill },
                                                                            { x => x.IsEditMode, true },
                                                                            { x => x.IsActiveSkill, skill.IsActiveSkill },
                                                                            { x => x.AllParams, AllParams } };

        var dialog = await DialogService.ShowAsync<CreateProfessionSkillDialog>("Edit " + skill.TraitLabel, parameters, await SetDialogOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            //var profession = skill.Professions;
            skill = (TraitProfessionDTO)result.Data;
            AllParams.TraitsChange(TraitType);
            IsLeaveAllowed = false;
            StateHasChanged();
        }
    }


    public async Task ChangeDescription(uint args)
    {
        //pass ID(column name) of multiline textbox

        IsLeaveAllowed = false;
        await _jsruntime.InvokeVoidAsync("ResizeTextArea", $"{args}");
    }

    private async Task ChangeProfLevel()
    {
        try
        {
            ProfessionDTO.CalculateClassParams(AllParams.Attributes.GetAll());
            IsLeaveAllowed = false;
            StateHasChanged();
        }
        catch (WarningException ex)
        {
            IsLoading = false;
            await _jsruntime.ToastrWarning(ex.ToString());
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
        }
    }

    private async Task Rest()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to rest?",
            yesText: "Yes", cancelText: "No");
        if(result is null || result == false){
            return;
        }

        ProfessionDTO.Rest(AllParams);
        IsLeaveAllowed = false;
        await _jsruntime.ToastrSuccess("Character rested");
        StateHasChanged();
    }

    private async Task SaveSpell(SpellSlot? spellSlot, bool isEdit)
    {
        if (spellSlot is null)
            return;

        Spell spell = new();
        spell.Level = spellSlot.SpellCircle != null ? spellSlot.SpellCircle.Level : 0;
        if (isEdit && spellSlot.Spell is not null)
        {
            spell.Id = spellSlot.Spell.Id;
            spell.Level = spellSlot.Spell.Level;
            spell.Description = spellSlot.Spell.Description;
            spell.Link = spellSlot.Spell.Link;
            spell.Name = spellSlot.Spell.Name;
            spell.IsApproved = spellSlot.Spell.IsApproved;
        }
        var parameters = new DialogParameters<SpellDialog> { { x => x.Spell, spell }, { x => x.IsEdit, isEdit } };
        var dialog = await DialogService.ShowAsync<SpellDialog>("Edit spell", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            spellSlot.Spell = (Spell)result.Data;
            //spellSlot.SpellId = spellSlot.Spell.Id;
            if (spellSlot.Spell.Id > 0)
            {

                spellSlot.SpellId = spellSlot.Spell.Id;
                //spellSlot.Spell = null;
            }else{
                spellSlot.SpellId = spellSlot.Spell.Id;
            }
            IsLeaveAllowed = false;
            StateHasChanged();
        }
    }

    public void ChangePreparedSpells(SpellSlot slot, SpellCircleDTO circle, int newValue) // your model.Amt type
    {

        int allPreparedSpells = 0;
        //FOR WIZZARD 
        if (ProfessionDTO.CasterType == SpellcasterType.Wizard)
        {
            if(circle.SpellSlots is not null){
                foreach(var s in circle.SpellSlots)
                {
                    allPreparedSpells += s.Prepared;
                }
            }
            //adding
            if (slot.Prepared < newValue)
            {
                if (circle.PerDay - allPreparedSpells > 0)
                {
                    slot.Prepared = newValue;
                }

            }
            //refracting
            if (slot.Prepared > newValue && slot.Prepared > 0 )
            {
                slot.Prepared = newValue;
            }
        }
        else if (ProfessionDTO.CasterType == SpellcasterType.Sorcerer)
        {
            allPreparedSpells = slot.Prepared;
            //adding
            if (slot.Prepared < newValue)
            {
                if (circle.PerDay - allPreparedSpells > 0)
                {
                    slot.Prepared = newValue;
                }

            }
            //refracting
            if (slot.Prepared > newValue && slot.Prepared > 0)
            {
                slot.Prepared = newValue;
            }
            if (circle.SpellSlots is not null)
            {
                foreach (var s in circle.SpellSlots)
                {
                    s.Prepared = slot.Prepared;
                }
            }
        }
        IsLeaveAllowed = false;
    }

    private void DeleteSpell(SpellSlot spellSlot)
    {
        spellSlot.Spell = null;
        spellSlot.SpellId = null;
        IsLeaveAllowed = false;
        StateHasChanged();
    }

    private async Task<DialogOptions> SetDialogOptions(MaxWidth maxWidth = MaxWidth.Large)
    {
        DialogOptions options = new() { MaxWidth = maxWidth };
        if (await _vieportService.GetCurrentBreakpointAsync() <= Breakpoint.Md)
            options.FullScreen = true;
        return options;
    }

    private async Task ActivateSkill(TraitProfessionDTO skill)
    {
        if (string.IsNullOrEmpty(skill.Name))
        {
            await _jsruntime.ToastrWarning("Define skill first");
            return;
        }
        string res = "";
        res = ProfessionDTO.GenerateTemporaryTraits(skill, AllParams);
      
        if (string.IsNullOrEmpty(res) == false)
            await _jsruntime.ToastrWarning(res);
        IsLeaveAllowed = false;
    }


    public async Task ConfirmLeave_Click(bool isConfirmed)
    {
        IsLoading = true;
        StateHasChanged();
        if (isConfirmed == true)
        {
            IsLeaveAllowed = true;
            await _jsruntime.InvokeVoidAsync("HideLeavePageModal");
            _navigationManager.NavigateTo(TargetLocation);
        }
        IsLoading = false;
        StateHasChanged();
        await _jsruntime.InvokeVoidAsync("HideLeavePageModal");
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (!IsLeaveAllowed)
        {
            TargetLocation = context.TargetLocation;

            context.PreventNavigation();
            HandleLeavePage();
          

            IsLeaveAllowed = true;
            _navigationManager.NavigateTo(TargetLocation);
        }

        return ValueTask.CompletedTask;
    }
    private void HandleLeavePage() => _jsruntime.InvokeVoidAsync("ShowLeavePageModal");
}
