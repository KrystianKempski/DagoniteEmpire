@page "/character"
@using DA_Business.Services
@using Syncfusion.Blazor.Navigations;
@inject ICharacterRepository _characterRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject ICampaignRepository _campaignRepository
@inject NavigationManager _navigationManager
@inject IMobRepository _mobRepository
@inject IUserService _userService;
@inject IJSRuntime _jsRuntime
@inject IDialogService DialogService
@inject IBrowserViewportService _vieportService
@implements IDisposable
<_DeleteConfirmation IsParentComponentProcessing=IsLoading DeleteConfirmation="ConfirmDelete_Click" DeletingComponentName="this character"></_DeleteConfirmation>

@if (IsLoading)
{
        <LoadingPage></LoadingPage>
}
else
{
    <div class="page">

        <div class="row mt-4">
            <div class="row p-0">
                <div class="col-12 col-md-8">
                    <h4 class="card-title px-2 mx-2">@Title</h4>
                </div>
            </div>
            
        </div>
        <div class="row mt-4">
            <div class="col-12">
                <SfGrid ID="Grid" DataSource="@Characters" AllowPaging="true"
                        Toolbar="@ToolbarItems">
                    
                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="@EditMode.Dialog"></GridEditSettings>
                    <GridEvents  OnActionBegin="ActionHandler" TValue="CharacterDTO"></GridEvents>
                        <GridColumns>
                            @if (UserInfo?.IsAdminOrMG == true){
                                 <GridColumn Field=@nameof(CharacterDTO.UserName) HeaderText="User name" TextAlign="TextAlign.Left" Width="200"></GridColumn>
                            }
                            <GridColumn Field=@nameof(CharacterDTO.NPCName) HeaderText="Name" TextAlign="TextAlign.Left" Width="200"></GridColumn>
                            <GridColumn Field=@nameof(CharacterDTO.RaceName) HeaderText="Race" TextAlign="TextAlign.Left" Width="200"></GridColumn>
                            <GridColumn Field=@nameof(CharacterDTO.ProfessionName) HeaderText="Class" TextAlign="TextAlign.Left" Width="200"></GridColumn>
                        <GridColumn Field=@nameof(CharacterDTO.Age) HeaderText="Age" Format="d" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                        </GridColumns>
                    </SfGrid>
            </div>
        </div>

        @if (UserInfo?.IsAdminOrMG == true)
        {
            <MobsListComponent></MobsListComponent>
        }
    </div>
    
}

@code {
    private IEnumerable<CharacterDTO> Characters { get; set; } = new List<CharacterDTO>();
    private IEnumerable<CharacterDTO> ApprovedCharacters { get; set; } = new List<CharacterDTO>();
    public bool IsLoading { get; set; } = true;
    private int DeleteCharacterId { get; set; } = 0;
    private string Title { get; set; } = "Your characters";


    public UserInfo? UserInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            UserInfo = await _userService.GetUserInfo();
            if (UserInfo?.IsAuthenticated == false)
            {
                return;
            }

            await LoadCharacters();

            IsLoading = false;

        }catch(Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while initialize: " + ex.ToString());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (UserInfo?.IsAuthenticated == false)
            {
                var uri = new Uri(_navigationManager.Uri);
                _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
            }
        }
    }

    private List<object> ToolbarItems = new List<object>() {
        new ItemModel() { Text = "Add Character", PrefixIcon = "e-add", Id = "Grid_add"},//Here Grid is SfGrid ID
        new ItemModel(){ Text = "Edit Character", PrefixIcon= "e-edit", Id="Grid_edit"},
        new ItemModel(){ Text = "Delete Character", PrefixIcon= "e-delete", Id="Grid_delete"},
    };

    private async Task LoadCharacters()
    {

        if(UserInfo is null)
        {
            UserInfo = await _userService.GetUserInfo();
            if (UserInfo is null)
            {
                IsLoading = false;
                await _jsRuntime.ToastrError("Error while initialize user info");
            }
        }

        if (UserInfo is not null && UserInfo?.IsAdminOrMG == true)
        {

            Title = "All avalible characters";
            Characters = await _characterRepository.GetAll();
            ApprovedCharacters = await _characterRepository.GetAllApproved();
        }
        else
        {
            Title = "Characters of " + UserInfo?.UserName;
            Characters = await _characterRepository.GetAllForUser(UserInfo?.UserName);
            ApprovedCharacters = await _characterRepository.GetAllApproved(UserInfo?.UserName);
        }
    }

    public void ActionHandler(ActionEventArgs<CharacterDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add))
        {
            _navigationManager.NavigateTo($"/character/create/");
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            _navigationManager.NavigateTo($"/character/edit/{args.Data.Id}");
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete)){
            HandleDelete(args.RowData.Id);
        }
    }


    private void HandleDelete(int id)
    {
        DeleteCharacterId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        StateHasChanged();
        if (isConfirmed == true && DeleteCharacterId != 0)
        {
            await Task.Delay(500);
            //delete
            var prod = await _characterRepository.GetById(DeleteCharacterId);

            await _characterRepository.Delete(DeleteCharacterId);
            if (UserInfo?.SelectedCharacter?.Id == DeleteCharacterId)
            {
                _userService?.SetSelectedCharId(0);
                UserInfo = await _userService.GetUserInfo();
            }
            await LoadCharacters();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        
    }
}

