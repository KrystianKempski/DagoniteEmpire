@page "/character"
@using Syncfusion.Blazor.Navigations;
@inject ICharacterRepository _characterRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager _navigationManager
@inject IChatManager _chatManager
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation IsParentComponentProcessing=IsLoading DeleteConfirmation="ConfirmDelete_Click" DeletingComponentName="this character"></_DeleteConfirmation>

@if (IsLoading)
    {
        <div class="text-center">
            <img src="images/loading.gif" width="60px">
        </div>
    }
    else
    {
    <div class="page">

        <div class="row mt-4">
            <div class="row p-0">
                <div class="col-12 col-md-8">
                    <h4 class="card-title px-2">@Title</h4>
                </div>
                <div class="col-12 col-md-4 p-0">
                    <SfComboBox TValue="int" TItem="CharacterDTO" AllowCustom=true Placeholder="Select character for game" DataSource="@ApprovedCharacters" @bind-Value="CurrentlyUsedCharacterId">
                        <ComboBoxEvents TValue="int" TItem="CharacterDTO" ValueChange="@ValueChangeHandler"></ComboBoxEvents>
                        <ComboBoxFieldSettings Value="Id" Text="NPCName"></ComboBoxFieldSettings>
                    </SfComboBox>
                </div>
            </div>
            
        </div>
        <div class="row mt-4">
            <div class="col-12">
                <SfGrid ID="Grid" DataSource="@Characters" AllowPaging="true"
                        Toolbar="@ToolbarItems">
                    
                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="@EditMode.Dialog"></GridEditSettings>
                    <GridEvents OnActionBegin="ActionHandler" TValue="CharacterDTO"></GridEvents>
                        <GridColumns>
                            @if (IsAdminOrMG){
                                 <GridColumn Field=@nameof(CharacterDTO.UserName) HeaderText="User name" TextAlign="TextAlign.Left" Width="200"></GridColumn>
                            }
                            <GridColumn Field=@nameof(CharacterDTO.NPCName) HeaderText="Name" TextAlign="TextAlign.Left" Width="200"></GridColumn>
                            <GridColumn Field=@nameof(CharacterDTO.RaceName) HeaderText="Race" TextAlign="TextAlign.Left" Width="200"></GridColumn>
                            <GridColumn Field=@nameof(CharacterDTO.ProfessionName) HeaderText="Class" TextAlign="TextAlign.Left" Width="200"></GridColumn>
                        <GridColumn Field=@nameof(CharacterDTO.Age) HeaderText="Age" Format="d" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                        </GridColumns>
                    </SfGrid>
            </div>
            
        </div>
    </div>
    
}

@code {
    private IEnumerable<CharacterDTO> Characters { get; set; } = new List<CharacterDTO>();
    private IEnumerable<CharacterDTO> ApprovedCharacters { get; set; } = new List<CharacterDTO>();
    public bool IsLoading { get; set; } = true;
    public bool IsAdminOrMG { get; set; } = true;
    private int DeleteCharacterId { get; set; } = 0;
    private string Title { get; set; } = "Your characters";
    private int CurrentlyUsedCharacterId = 0;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var authState = await AuthenticationState;
            if (!authState.User.Identity.IsAuthenticated)
            {
                var uri = new Uri(_navigationManager.Uri);
                _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}",forceLoad:true);
            }
           
        }catch(Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while initialize: " + ex.ToString());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                var user = await _chatManager.GetCurrentUserDetailsAsync();
                if (user is not null && user.SelectedCharacterId > 0)
                {
                    CurrentlyUsedCharacterId = user.SelectedCharacterId;
                }
                await LoadCharacters();
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while initialize: " + ex.ToString());
        }
    }

    private List<object> ToolbarItems = new List<object>() {
        new ItemModel() { Text = "Add Character", PrefixIcon = "e-add", Id = "Grid_add"},//Here Grid is SfGrid ID
        new ItemModel(){ Text = "Edit Character", PrefixIcon= "e-edit", Id="Grid_edit"},
        new ItemModel(){ Text = "Delete Character", PrefixIcon= "e-delete", Id="Grid_delete"},
    };

    private async Task LoadCharacters()
    {
        IsLoading = true;
        StateHasChanged();
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        if (user == null)
            return; // failed to load

        IsAdminOrMG = user.IsInRole(SD.Role_Admin) || user.IsInRole(SD.Role_GameMaster);

        if (IsAdminOrMG)
        {

            Title = "All avalible characters";
            Characters = await _characterRepository.GetAll();
            ApprovedCharacters = await _characterRepository.GetAllApproved();
        }
        else
        {
            Title = "Characters of " + user.Identity.Name;
            Characters = await _characterRepository.GetAllForUser(user.Identity.Name);
            ApprovedCharacters = await _characterRepository.GetAllApproved(user.Identity.Name);
        }
        IsLoading = false;
        StateHasChanged();
    }

    public void ActionHandler(ActionEventArgs<CharacterDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add))
        {
            _navigationManager.NavigateTo($"/character/create/");
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            _navigationManager.NavigateTo($"/character/edit/{args.Data.Id}");
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete)){
            HandleDelete(args.RowData.Id);
        }
    }

    private void HandleDelete(int id)
    {
        DeleteCharacterId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        StateHasChanged();
        if (isConfirmed == true && DeleteCharacterId != 0)
        {
            await Task.Delay(500);
            //delete
            var prod = await _characterRepository.GetById(DeleteCharacterId);
            // if (!prod.ImageUrl.Contains("default-img.jpg"))
            // {
            //     _fileUpload.DeleteFile(prod.ImageUrl.ToString());
            // }

            await _characterRepository.Delete(DeleteCharacterId);
            // await _jsRuntime.ToastrSuccess("Product deleted succesfully.");
            await LoadCharacters();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task ValueChangeHandler(ChangeEventArgs<int, CharacterDTO> args)
    {
        var char12 =  args.Value;
        var user = await _chatManager.GetCurrentUserDetailsAsync();
        if (user is not null && args.Value> 0)
        {
            user.SelectedCharacterId = args.Value;
        }
    }
  
}

