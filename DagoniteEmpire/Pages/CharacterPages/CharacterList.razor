@page "/character"

@inject ICharacterRepository _characterRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject IJSRuntime _jsRuntime
<_DeleteConfirmation IsParentComponentProcessing=IsLoading DeleteConfirmation="ConfirmDelete_Click" DeletingComponentName="this character"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">User Characters List </h4>

    </div>
    <div class="col-4 offset-2">
        <a href="/character/create" class="btn btn-primary form-control">Add new character</a>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
    @if (Characters.Any())
    {
            <SfGrid DataSource="@Characters" AllowPaging="true">
                <GridEvents OnActionBegin="ActionHandler" TValue="CharacterDTO"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(CharacterDTO.NPCName) HeaderText="Name" TextAlign="TextAlign.Left" Width="300"></GridColumn>
                    <GridColumn Field=@nameof(CharacterDTO.Race) HeaderText="Race" TextAlign="TextAlign.Left" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(CharacterDTO.Class) HeaderText="Class" TextAlign="TextAlign.Left" Width="300"></GridColumn>
                    <GridColumn Field=@nameof(CharacterDTO.Age) HeaderText="Age" Format="d" TextAlign="TextAlign.Right" Width="50"></GridColumn>
                </GridColumns>
            </SfGrid>
    }
    else
    {
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="images/loading.gif" width="60px">
            </div>
        }
        else
        {
            <p>No records found</p>
        }
    }
    </div>
</div>

@code {
    private IEnumerable<CharacterDTO> Characters { get; set; } = new List<CharacterDTO>();
    public bool IsLoading { get; set; }
    private int DeleteCharacterId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCharacters();
        }
    }


    private async Task LoadCharacters()
    {
        IsLoading = true;
        StateHasChanged();
        Characters = await _characterRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }
    private void HandleDelete(int id)
    {
        DeleteCharacterId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed == true && DeleteCharacterId != 0)
        {
            await Task.Delay(500);
            //delete
            await _characterRepository.Delete(DeleteCharacterId);
            await LoadCharacters();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }

    public async void ActionHandler(ActionEventArgs<CharacterDTO> args)
    {
        
    }
}


