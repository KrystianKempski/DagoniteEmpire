
@page "/profession/{id:int}"
@using DA_DataAccess.CharacterClasses
@inject IJSRuntime _jsruntime
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IProfessionRepository _professionRepository
@inject IEquipmentRepository _equipmentRepository
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<div class="main-table">

    @if (IsLoading)
    {
        <div class="text-center">
            <img src="/images/loading.gif">
        </div>
    }
    else
    {

        <label class="warnign-message">@ErrorMessage</label>
        <div class="wide-screen-table">
            <div class="d-flex ">
                <div class="d-flex flex-column px-1 flex-grow-1">
                    <label class="class-section py-1">Class name</label>
                    <SfTextBox Placeholder="Insert class name" @bind-Value="@ProfessionDTO.Name"></SfTextBox>
                </div>
                <div class="d-flex flex-column px-1">
                    <label class="class-section py-1">Related attribute</label>
                    <label class="prof-variables" style="width: 150px;">@ProfessionDTO.RelatedAttribute</label>
                </div>
                @if (IsAdminOrMG)
                {
                    <div class="d-flex flex-column px-1">
                        <label class="column-section py-1">Class Level</label>
                        <SfNumericTextBox Width="100px" ShowSpinButton="false" @bind-Value="@ProfessionDTO.ClassLevel" OnChange="ChangeProfLevel"></SfNumericTextBox>
                    </div>
                }
                else
                {
                    <div class="d-flex flex-column px-1">
                        <label class="column-section py-1">Class Level</label>
                        <label class="prof-variables">@ProfessionDTO.ClassLevel</label>
                    </div>
                }

                <div class="d-flex flex-column px-1">
                    <label class="column-section py-1">Skill roll</label>
                    <label class="prof-variables">@ProfessionDTO.ProfessionSkillRoll</label>
                </div>
                <div class="d-flex flex-column px-1">
                    <label class="column-section py-1">Focus points</label>
                    <label class="prof-variables">@ProfessionDTO.MaxFocusPoints</label>
                </div>
                @if (IsAdminOrMG)
                {
                    <div class="d-flex flex-column px-1">
                        <label class="class-section py-1">Approve</label>
                        <div class="justify-content-center mx-auto my-auto">
                            <SfCheckBox @bind-Checked="ProfessionDTO.IsApproved"></SfCheckBox>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="short-screen-table">
            <div class="d-flex flex-column ">
                <div class="d-flex">
                    <div class="d-flex flex-column px-1 flex-grow-1">
                        <label class="class-section py-1">Class name</label>
                        <SfTextBox Placeholder="Insert class name" @bind-Value="@ProfessionDTO.Name"></SfTextBox>
                    </div>
                    @if (IsAdminOrMG)
                    {
                        <div class="d-flex flex-column px-1">
                            <label class="class-section py-1">Approve</label>
                            <div class="justify-content-center mx-auto my-auto">
                                <SfCheckBox @bind-Checked="ProfessionDTO.IsApproved"></SfCheckBox>
                            </div>
                        </div>
                    }
                </div>
                <div class="d-flex flex-column px-1">
                    <label class="class-section py-1">Related attribute</label>
                    <label class="prof-variables">@ProfessionDTO.RelatedAttribute</label>
                </div>
                <div class="d-flex">
                    @if (IsAdminOrMG)
                    {
                        <div class="d-flex flex-column px-1 variables">
                            <label class="column-section py-1">Class Level</label>
                            <SfNumericTextBox ShowSpinButton="false" @bind-Value="@ProfessionDTO.ClassLevel" OnChange="ChangeProfLevel"></SfNumericTextBox>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex flex-column px-1 variables">
                            <label class="column-section py-1">Class Level</label>
                            <label class="prof-variables">@ProfessionDTO.ClassLevel</label>
                        </div>
                    }

                    <div class="d-flex flex-column px-1 variables">
                        <label class="column-section py-1">Skill roll</label>
                        <label class="prof-variables">@ProfessionDTO.ProfessionSkillRoll</label>
                    </div>
                    <div class="d-flex flex-column px-1 variables">
                        <label class="column-section py-1">Focus points</label>
                        <label class="prof-variables">@ProfessionDTO.MaxFocusPoints</label>
                    </div>
                </div>

            </div>

        </div>
        <div class="d-flex flex-column flex-grow-1 mx-1">
            <label class="class-section">Class description</label>
            <SfRichTextEditor Height="300px" @ref="DescrEdit" @bind-Value="@ProfessionDTO.Description">
                <RichTextEditorToolbarSettings Items="@Tools" Type="ToolbarType.MultiRow" />
            </SfRichTextEditor>
        </div>

        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-2">
            <MudTabPanel Text="Active class skills" Style="font-weight: bold;">
                @*  ACTIVE SKILLS  *@
                <div class="wide-screen-table mx-1">

                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th scope="col" class="level-row text-center">Level</th>
                                <th scope="col" class="name-row text-center">Name</th>
                                <th scope="col" class="descr-row text-center">Description</th>
                                <th scope="col" class="number-row text-center">DC</th>
                                <th scope="col" class="number-row text-center">Cost</th>
                                <th scope="col" class="number-row text-center">Range</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var skill in ProfessionDTO.ActiveSkills)
                            {
                                <tr>
                                    @if (skill.Index % 2 == 0)
                                    {
                                        <td rowspan="2"> <label class="short-row">@skill.Level</label> </td>
                                    }
                                    <td> <div class="name-cell"> <SfTextBox Placeholder="Insert skill name" @bind-Value="@skill.Name"></SfTextBox> </div> </td>
                                    <td>
                                        <div class="bonus-double-cell">
                                            <SfTextBox ID="@skill.Index.ToString()" OnChange="@(()=>ChangeDescription(skill.Index))" Multiline=true Placeholder="Insert skill description" @bind-Value="@skill.Description">
                                            </SfTextBox>
                                        </div>
                                    </td>
                                    <td><div class="short-row"><SfNumericTextBox ShowSpinButton="false" @bind-Value="@skill.DC"></SfNumericTextBox></div></td>
                                    <td><div class="short-row"><SfNumericTextBox ShowSpinButton="false" @bind-Value="@skill.Cost"></SfNumericTextBox></div></td>
                                    <td><div class="short-row"><SfTextBox @bind-Value="@skill.Range"></SfTextBox></div></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="short-screen-table mx-1">

                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th scope="col" class="level-row text-center">Level</th>
                                <th scope="col" class="name-row text-center">Name</th>
                                <th scope="col" class="number-row text-center">DC</th>
                                <th scope="col" class="number-row text-center">Cost</th>
                                <th scope="col" class="number-row text-center"> Range</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var skill in ProfessionDTO.ActiveSkills)
                            {
                                <tr>
                                    @if (skill.Index % 2 == 0)
                                    {
                                        <td rowspan="4"> <label class="short-row">@skill.Level</label> </td>
                                    }
                                    <td> <div class="name-cell"> <SfTextBox Placeholder="Insert skill name" @bind-Value="@skill.Name"></SfTextBox> </div> </td>

                                    <td><div class="short-row"><SfNumericTextBox ShowSpinButton="false" @bind-Value="@skill.DC"></SfNumericTextBox></div></td>
                                    <td><div class="short-row"><SfNumericTextBox Format="" ShowSpinButton="false" @bind-Value="@skill.Cost"></SfNumericTextBox></div></td>
                                    <td><div class="short-row"><SfTextBox @bind-Value="@skill.Range"></SfTextBox></div></td>
                                </tr>
                                <tr>
                                    <td colspan="4">
                                        <SfTextBox ID="@skill.Index.ToString()" OnChange="@(()=>ChangeDescription(skill.Index))" Multiline=true Placeholder="Insert skill description" @bind-Value="@skill.Description">
                                        </SfTextBox>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            </MudTabPanel>
            <MudTabPanel Text="Passive class skills" Style="font-weight: bold;">
                @*  PASSIVE SKILLS  *@

                <div class="wide-screen-table mx-1">

                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th scope="col" class="level-row text-center">Level</th>
                                <th scope="col" class="name-row text-center">Name</th>
                                <th scope="col" class="descr-row text-center">Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var skill in ProfessionDTO.PassiveSkills)
                            {
                                <tr>
                                    <td> <label class="short-row">@skill.Level</label> </td>
                                    <td> <div class="name-cell"> <SfTextBox Placeholder="Insert skill name" @bind-Value="@skill.Name"></SfTextBox> </div> </td>
                                    <td>
                                        <div class="bonus-double-cell">
                                            <SfTextBox ID="@skill.Index.ToString()" OnChange="@(()=>ChangeDescription(skill.Index))" Multiline=true Placeholder="Insert skill description" @bind-Value="@skill.Description">
                                            </SfTextBox>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="short-screen-table mx-1">

                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th scope="col" class="number-row text-center">Level</th>
                                <th scope="col" class="name-row-short text-center">Name</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var skill in ProfessionDTO.PassiveSkills)
                            {
                                <tr>
                                    <td rowspan="2"> <label class="short-row">@skill.Level</label> </td>
                                    <td> <div class="name-cell"> <SfTextBox Placeholder="Insert skill name" @bind-Value="@skill.Name"></SfTextBox> </div> </td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <SfTextBox ID="@skill.Index.ToString()" OnChange="@(()=>ChangeDescription(skill.Index))" Multiline=true Placeholder="Insert skill description" @bind-Value="@skill.Description">
                                        </SfTextBox>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

             <button @onclick="AddSpellCircle"> Add Spell Circle</button>


            </MudTabPanel>
            <MudTabPanel Text="Spells" Disabled="false" Style="font-weight: bold;">
                <MudTable T="SpellCircle" Items="@SpellCircles" Hover="true" Breakpoint="Breakpoint.Sm" @ref="CircleTable">
                    <HeaderContent>
                        <MudTh>Level</MudTh>
                        <MudTh>PerDay</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Level">@context.Level</MudTd>
                        <MudTd DataLabel="PerDay">@context.PerDay</MudTd>
                        <MudTd>
                            <MudTabPanel Text="SpellSlot" Disabled="false" Style="font-weight: bold;">
                                <MudTable T="SpellSlot" Items="@context.SpellSlots" Hover="true" Breakpoint="Breakpoint.Sm">
                                    <HeaderContent>
                                        <MudTh>in spellbook</MudTh>
                                        <MudTh>PerDay</MudTh>
                                        <MudTh></MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="slotContext"> 
                                        <MudTd DataLabel="Level">@slotContext.InSpellbook</MudTd>
                                        <MudTd DataLabel="PerDay">@slotContext.Prepared</MudTd>
                                    </RowTemplate>
                                </MudTable>
                             </MudTabPanel>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTabPanel>
        </MudTabs>
        
      

        <label class="warnign-message">@ErrorMessage</label>
        <div class="d-flex ">
            <button @onclick="OnSaveChangesBtnClick" class="btn btn-primary">Save</button>
            <button @onclick="OnCancelBtnClick" class="btn btn-secondary">Cancel</button>
        </div>
    }
</div>

           



@code {

    [Parameter]
    public int Id { get; set; }

    public ProfessionDTO ProfessionDTO { get; set; } = new();
    private AllParamsModel AllParams { get; set; } = new();
    private SfRichTextEditor DescrEdit = new SfRichTextEditor();
    private ICollection<SpellCircle> SpellCircles = new List<SpellCircle>();
    private MudTable<SpellCircle> CircleTable;
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private MudTable<SpellCircle> mudTable;


    private string SelectedRowClassFunc(SpellCircle element, int rowNumber)
    {
        return string.Empty;
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }
        var user = authState.User;
        if (user == null)
            return; // failed to load

        IsAdminOrMG = user.IsInRole(SD.Role_Admin) || user.IsInRole(SD.Role_GameMaster);
        ReadOnly = !IsAdminOrMG;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;

                StateHasChanged();

                await LoadCharacter();

                IsLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                IsLoading = false;
                await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
            }
        }
    }

    private async Task LoadCharacter()
    {
        AllParams.Character = await _characterRepository.GetById(Id);
        //AllParams.Profession = await _professionRepository.GetById(AllParams.Character.ProfessionId);
        ProfessionDTO = await _professionRepository.GetById(AllParams.Character.ProfessionId);
        //AllParams.Attributes = await _attributeRepository.GetAll(Id);
        ;
    }

    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = true;
    public bool IsAdminOrMG { get; set; } = false;
    public bool ReadOnly { get; set; } = false;

    public IEditorSettings EditParams = new NumericEditCellParams
    {
        Params = new NumericTextBoxModel<object>() { ShowClearButton = true, ShowSpinButton = false }
    };

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };
    public void ChangeDescription(uint args)
    {
        //pass ID(column name) of multiline textbox
        _jsruntime.InvokeVoidAsync("ResizeTextArea", $"{args}");
    }
    private async Task OnSaveChangesBtnClick()
    {

        if (string.IsNullOrEmpty(ProfessionDTO.Name) || string.IsNullOrEmpty(ProfessionDTO.Description))
        {
            ErrorMessage = $"Create name and description of class";
            return;
        }
        // if (string.IsNullOrEmpty(ProfessionDTO.RelatedAttribute))
        // {
        //     ErrorMessage = $"Choose attribute related to class";
        //     return;
        // }

        await _professionRepository.Update(ProfessionDTO);

        _navigationManager.NavigateTo("#");
        ErrorMessage = string.Empty;
    }
    private async Task OnCancelBtnClick()
    {
        _navigationManager.NavigateTo("#");
    }

    private async Task ChangeProfLevel()
    {
        ProfessionDTO.CalculateClassParams(AllParams.Attributes);
        StateHasChanged();
    }

    private async Task ChangeRelatedAttribute(string attrName)
    {
        try
        {
            if (attrName != null && attrName != "0")
            {
                ProfessionDTO.RelatedAttribute = attrName;
                ProfessionDTO.CalculateClassParams(AllParams.Attributes);
                StateHasChanged();
                return;
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
        }

    }



    private async Task AddSpellCircle()
    {
        int newLevel = SpellCircles.Count();
        SpellCircle circle = new();
        circle.ProfessionId = ProfessionDTO.Id;
        circle.Level = newLevel;
        circle.KnownSpells = 
        SpellCircles.Add()
    }
}
