@page "/equipment/{id:int}"
@using DA_Business.Services.Interfaces
@using DA_DataAccess.CharacterClasses
@inject IJSRuntime _jsruntime
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IEquipmentSlotRepository _equipmentSlotRepository
@inject IBaseSkillRepository _baseSkillRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject IUserService _userService

@inject IJSRuntime _jsRuntime

<div class="container-fluid">
    <div class="save-btn">
        <button @onclick="SaveChanges" class="btn btn-primary">Save</button>

    </div>
    <div class="row">
        @if (IsLoading == true)
        {
            <LoadingPage></LoadingPage>
        }else
        {   
        <CascadingValue Value="@AllParams">
            <div class="equipment">
                    <EquipmentComponent  OnTraitsChange="LoadPossibleGears" PageMode=true></EquipmentComponent>
            </div>

 
            <div class="sheet-img">
                <img src="../images/CharacterItemPlacement.webp" class="stretch" />
                <div class="input headgear">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Head]" OnGearChange="GearChange" SlotType="@SD.EquipmentType.Head"> </EquipItemComponent>
                </div>
                <div class="input face">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Face]" OnGearChange="GearChange" SlotType="@SD.SlotType.Face"> </EquipItemComponent>
                </div>
                <div class="input throat">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Throat]" OnGearChange="GearChange" SlotType="@SD.SlotType.Throat"> </EquipItemComponent>
                </div>
                <div class="input body">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Body]" OnGearChange="ArmorChange" SlotType="@SD.SlotType.Body"> </EquipItemComponent>
                </div>
                <div class="input hands">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Hands]" OnGearChange="GearChange" SlotType="@SD.SlotType.Hands"> </EquipItemComponent>
                </div>
                <div class="input waist">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Waist]" OnGearChange="GearChange" SlotType="@SD.SlotType.Waist"> </EquipItemComponent>
                </div>
                <div class="input feet">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Feet]" OnGearChange="GearChange" SlotType="@SD.SlotType.Feet"> </EquipItemComponent>
                </div>
                <div class="input shoulders">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Shoulders]" OnGearChange="GearChange" SlotType="@SD.SlotType.Shoulders"> </EquipItemComponent>
                </div>
                <div class="input torso">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Torso]" OnGearChange="GearChange" SlotType="@SD.SlotType.Torso"> </EquipItemComponent>
                </div>
                <div class="input arms">
                  
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Arms]" OnGearChange="GearChange" SlotType="@SD.SlotType.Arms"> </EquipItemComponent>

                </div>
                 <div class="input ring1">
                  
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Ring1]" OnGearChange="GearChange" SlotType="@SD.SlotType.Ring1"> </EquipItemComponent>

                </div>
                <div class="input ring2">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Ring2]" OnGearChange="GearChange" SlotType="@SD.SlotType.Ring2"> </EquipItemComponent>
                </div>
            </div>

            <BattleStatsComponent @ref="BattleStatComp"></BattleStatsComponent>

        </CascadingValue>
        }
            
    </div>
</div>



@code {
    [Parameter]
    public int Id { get; set; }
    public AllParamsModel? AllParams { get; set; } = new();

    UserInfo? UserInfo { get; set; }

    public BattleStatsComponent BattleStatComp = new();
    private bool IsLoading { get; set; } = true;

    public Dictionary<EquippedItems, EquipItemComponent> EquipItemComp = new Dictionary<EquippedItems, EquipItemComponent>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;

                StateHasChanged();
                for (EquippedItems i = EquippedItems.Face; i <= EquippedItems.Ring2; i++)
                {
                    EquipItemComp[i] = new EquipItemComponent();
                }
                await LoadCharacter();
               

                IsLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                IsLoading = false;
                await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
            }
        }
    }

    private async Task LoadCharacter()
    {
        AllParams.Character = await _characterRepository.GetById(Id);
        AllParams.Attributes.FillPropertiesContainer(await _attributeRepository.GetAll(Id));
        AllParams.EquipmentSlots = (await _equipmentSlotRepository.GetAll(Id)).ToList();
        AllParams.BaseSkills = (await _baseSkillRepository.GetAll(Id)).ToList();
        AllParams.SpecialSkills.FillPropertiesContainer((await _specialSkillRepository.GetAll(Id)));
    }

    private async Task SaveChanges()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            // update equipment (in character)
            AllParams.Character.EquipmentSlots = AllParams.EquipmentSlots;

            // update character with TraitAdv collection properly filled
            await _characterRepository.Update(AllParams.Character);

        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while changing equipment");
        }
        IsLoading = false;
        StateHasChanged();
    }

    private void LoadPossibleGears()
    {
        foreach (var e in EquipItemComp)
        {
            e.Value.ReloadGears();
        }

    }

    protected void GearChange()
    {
        // update equipment (in character)
        LoadPossibleGears();
        //if (BattleStatComp is not null) BattleStatComp.LoadPossibleGears();
        AllParams.GearChange();
        StateHasChanged();
    }

    protected void ArmorChange()
    {
        // update armor 
        LoadPossibleGears();
        BattleStatComp.GearChange();
        StateHasChanged();
    }



}