@page "/equipment/{id:int}"
@using DA_Business.Services.Interfaces
@using DA_DataAccess.CharacterClasses
@inject IJSRuntime _jsruntime
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IEquipmentRepository _equipmentRepository
@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject IUserService _userService

@inject IJSRuntime _jsRuntime

<div class="container-fluid">
    <div class="row">
        <div class="equipment border">
            <CascadingValue Value="@AllParams">
                <EquipmentComponent PageMode=true></EquipmentComponent>
            </CascadingValue>
        </div>

        <div class="item-placement">
            <div class="sheet-img">
                <img src="../images/CharacterItemPlacement.webp" class="stretch" />
            </div>
            <div class="input">
            @* <InputSelect style="width: 100%; padding: 2px 0px 2px 0px; background-color: transparent; border: 1px solid RGB(206 212 218); border-radius: 4px;"
                         ValueExpression="@(()=>SelectedRace)"
                         Value="@SelectedRace"
                         ValueChanged="@((string value) => ChangeItem(value))">
                <option value="0" selected disabled>--Select item--</option>
                @foreach (var race in AllParams.Equipment)
                {
                    <option value="@race.Name">@race.Name</option>
                }
                <option value="Custom race">Custom race</option>
            </InputSelect> *@

                </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public int Id { get; set; }
    public AllParamsModel AllParams { get; set; } = new();

    UserInfo? UserInfo { get; set; }

    private bool IsLoading { get; set; } = true;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;

                StateHasChanged();

                await LoadCharacter();

                IsLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                IsLoading = false;
                await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
            }
        }
    }

    private async Task LoadCharacter()
    {
        AllParams.Character = await _characterRepository.GetById(Id);
        AllParams.Attributes = await _attributeRepository.GetAll(Id);
        AllParams.Equipment = (await _equipmentRepository.GetAll(Id)).ToList();
    }

}