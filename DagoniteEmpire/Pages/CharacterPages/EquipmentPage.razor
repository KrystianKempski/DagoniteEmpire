@page "/equipment/{id:int}"
@using DA_Business.Services.Interfaces
@using DA_DataAccess.CharacterClasses
@inject IJSRuntime _jsruntime
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IEquipmentRepository _equipmentRepository
@inject IBaseSkillRepository _baseSkillRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject IUserService _userService

@inject IJSRuntime _jsRuntime

<div class="container-fluid">
    <div class="save-btn">
        <button @onclick="SaveChanges" class="btn btn-primary">Save</button>

    </div>
    <div class="row">
        @if (IsLoading == true)
        {
            <LoadingPage></LoadingPage>
        }else
        {   
            <div class="equipment border">
                <CascadingValue Value="@AllParams">
                    <EquipmentComponent OnTraitsChange="LoadPossibleGears" PageMode=true></EquipmentComponent>
                </CascadingValue>
            </div>

 
            <div class="sheet-img">
                <img src="../images/CharacterItemPlacement.webp" class="stretch" />
                <div class="input headgear">
               
                <CascadingValue Value="@AllParams">
                        <EquipItemComponent GearType="@SD.EquipmentType.Head"> </EquipItemComponent>
                    </CascadingValue>
                   @*  <InputSelect class="form-select p-1" ValueExpression="@(()=>SelectedGear[(int)EquippedItems.Head])"
                                 Value="@SelectedGear[(int)EquippedItems.Head]"
                                 ValueChanged="@((string value) => ChangeGear(value, SD.EquipmentType.Head))">
                        @foreach (var eq in Heads){
                            <option value="@eq.Name"> @eq.Name</option>
                        }
                    </InputSelect> *@
                </div>
            @* <div class="input throats">
                <InputSelect class="form-select p-1" ValueExpression="@(()=>SelectedGear[(int)EquippedItems.Throat])"
                             Value="@SelectedGear[(int)EquippedItems.Throat]"
                             ValueChanged="@((string value) => ChangeGear(value, SD.EquipmentType.Throat))">
                    @foreach (var eq in Throats)
                    {
                        <option value="@eq.Name"> @eq.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="input hands">
                <InputSelect class="form-select p-1" ValueExpression="@(()=>SelectedGear[(int)EquippedItems.Hands])"
                             Value="@SelectedGear[(int)EquippedItems.Hands]"
                             ValueChanged="@((string value) => ChangeGear(value, SD.EquipmentType.Hands))">
                        @foreach (var eq in Hands)
                        {
                            <option value="@eq.Name"> @eq.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="input headgear">
                    <InputSelect class="form-select p-1" ValueExpression="@(()=>SelectedGear[(int)EquippedItems.Head])"
                                 Value="@SelectedGear[(int)EquippedItems.Head]"
                                 ValueChanged="@((string value) => ChangeGear(value, SD.EquipmentType.Head))">
                        @foreach (var eq in Heads){
                            <option value="@eq.Name"> @eq.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="input headgear">
                    <InputSelect class="form-select p-1" ValueExpression="@(()=>SelectedGear[(int)EquippedItems.Head])"
                                 Value="@SelectedGear[(int)EquippedItems.Head]"
                                 ValueChanged="@((string value) => ChangeGear(value, SD.EquipmentType.Head))">
                        @foreach (var eq in Heads){
                            <option value="@eq.Name"> @eq.Name</option>
                        }
                    </InputSelect>
                </div>
            <div class="input headgear">
                <InputSelect class="form-select p-1" ValueExpression="@(()=>SelectedGear[(int)EquippedItems.Head])"
                             Value="@SelectedGear[(int)EquippedItems.Head]"
                             ValueChanged="@((string value) => ChangeGear(value, SD.EquipmentType.Head))">
                    @foreach (var eq in Heads)
                    {
                        <option value="@eq.Name"> @eq.Name</option>
                    }
                </InputSelect>
            </div> *@
            </div>
        }
            
    </div>
</div>



@code {
    [Parameter]
    public int Id { get; set; }
    public AllParamsModel? AllParams { get; set; } = new();

    UserInfo? UserInfo { get; set; }

    private bool IsLoading { get; set; } = true;

    public ICollection<EquipmentDTO> Heads { get; set; } = new List<EquipmentDTO>();
    public ICollection<EquipmentDTO> Throats { get; set; } = new List<EquipmentDTO>();
    public ICollection<EquipmentDTO> Hands { get; set; } = new List<EquipmentDTO>();
    public ICollection<EquipmentDTO> Bodies { get; set; } = new List<EquipmentDTO>();
    public ICollection<EquipmentDTO> Faces { get; set; } = new List<EquipmentDTO>();
    public ICollection<EquipmentDTO> Feets { get; set; } = new List<EquipmentDTO>();
    public ICollection<EquipmentDTO> Shoulders { get; set; } = new List<EquipmentDTO>();
    public ICollection<EquipmentDTO> Waists { get; set; } = new List<EquipmentDTO>();
    public ICollection<EquipmentDTO> Rings { get; set; } = new List<EquipmentDTO>();

    public List<String> SelectedGear { get; set; } = new List<string>((int)EquippedItems.Ring2+1);


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;

                StateHasChanged();

                await LoadCharacter();

                IsLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                IsLoading = false;
                await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
            }
        }
    }

    private async Task LoadCharacter()
    {
        AllParams.Character = await _characterRepository.GetById(Id);
        AllParams.Attributes = await _attributeRepository.GetAll(Id);
        AllParams.Equipment = (await _equipmentRepository.GetAll(Id)).ToList();
        
        if (AllParams.Character.Head is not null)
            SelectedGear[(int)EquippedItems.Head] = AllParams.Character.Head.Name;
        if (AllParams.Character.Throat is not null)
            SelectedGear[(int)EquippedItems.Throat] = AllParams.Character.Throat.Name;
        if (AllParams.Character.Hands is not null)
            SelectedGear[(int)EquippedItems.Hands] = AllParams.Character.Hands.Name;
        if (AllParams.Character.Body is not null)
            SelectedGear[(int)EquippedItems.Body] = AllParams.Character.Body.Name;
        if (AllParams.Character.Face is not null)
            SelectedGear[(int)EquippedItems.Face] = AllParams.Character.Face.Name;
        if (AllParams.Character.Feet is not null)
            SelectedGear[(int)EquippedItems.Feet] = AllParams.Character.Feet.Name;
        if (AllParams.Character.Shoulders is not null)
            SelectedGear[(int)EquippedItems.Shoulders] = AllParams.Character.Shoulders.Name;
        if (AllParams.Character.Waist is not null)
            SelectedGear[(int)EquippedItems.Waist] = AllParams.Character.Waist.Name;
        if (AllParams.Character.Ring1 is not null)
            SelectedGear[(int)EquippedItems.Ring1] = AllParams.Character.Ring1.Name;
        if (AllParams.Character.Ring2 is not null)
            SelectedGear[(int)EquippedItems.Ring2] = AllParams.Character.Ring2.Name;
        if (AllParams.Character.Torso is not null)
            SelectedGear[(int)EquippedItems.Torso] = AllParams.Character.Torso.Name;
        if (AllParams.Character.Arms is not null)
            SelectedGear[(int)EquippedItems.Arms] = AllParams.Character.Arms.Name;


        await LoadPossibleGears();

    }

    private async Task LoadPossibleGears()
    {
        Heads = AllParams.Equipment.Where(u => u.EquipmentType == SD.EquipmentType.Head).ToList();
        Throats = AllParams.Equipment.Where(u => u.EquipmentType == SD.EquipmentType.Throat).ToList();
        Hands = AllParams.Equipment.Where(u => u.EquipmentType == SD.EquipmentType.Hands).ToList();
        Bodies = AllParams.Equipment.Where(u => u.EquipmentType == SD.EquipmentType.Body).ToList();
        Faces = AllParams.Equipment.Where(u => u.EquipmentType == SD.EquipmentType.Face).ToList();
        Feets = AllParams.Equipment.Where(u => u.EquipmentType == SD.EquipmentType.Feet).ToList();
        Shoulders = AllParams.Equipment.Where(u => u.EquipmentType == SD.EquipmentType.Shoulders).ToList();
        Waists = AllParams.Equipment.Where(u => u.EquipmentType == SD.EquipmentType.Waist).ToList();
        Rings = AllParams.Equipment.Where(u => u.EquipmentType == SD.EquipmentType.Rings).ToList();
    }

    private async Task SaveChanges()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            // update equipment (in character)
            AllParams.Character.Equipment = AllParams.Equipment;
            //AllParams.Character.Head = SelectedHead;

            // update character with TraitAdv collection properly filled
            await _characterRepository.Update(AllParams.Character);
            foreach (var obj in AllParams.Attributes)
            {
                obj.CharacterId = Id;
                await _attributeRepository.Update(obj);
            }
            foreach (var obj in AllParams.BaseSkills)
            {
                obj.CharacterId = Id;
                await _baseSkillRepository.Update(obj);
            }
            foreach (var obj in AllParams.SpecialSkills)
            {
                obj.CharacterId = Id;
                await _specialSkillRepository.Update(obj);
            }

        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while changing equipment");
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task ChangeGear(string eq, string type)
    {
        try
        {

            if (AllParams.Character.Head is not null && AllParams.Character.Head.Name == eq)
                return;

            EquipmentDTO newGear = (EquipmentDTO)AllParams.Character.GetType().GetProperty(type).GetValue(AllParams.Character, null);
            //feature.GetType().GetProperty(bonusName).SetValue(feature, newVal);

            //unequip gear
            if (newGear is not null)
            {
                var removedEquipment = AllParams.Character?.Equipment?.FirstOrDefault(u => u.Id == newGear.Id);
                if (removedEquipment is not null)
                    removedEquipment.IsEquipped = false;

                newGear.IsEquipped = false;
            }
            var putOnEquipment = AllParams.Character?.Equipment?.FirstOrDefault(u => u.Name == eq);
            if (putOnEquipment is not null)
            {
                putOnEquipment.IsEquipped = true;
                newGear = putOnEquipment;
            }

        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }
    }
   
}