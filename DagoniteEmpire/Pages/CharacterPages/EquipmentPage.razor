@page "/equipment/{id:int}"
@using DA_Business.Services.Interfaces
@using DA_DataAccess.CharacterClasses
@implements IDisposable
@inject IJSRuntime _jsruntime
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IEquipmentSlotRepository _equipmentSlotRepository
@inject IBaseSkillRepository _baseSkillRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject CallbackService _callbackService
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject IUserService _userService
@inject IJSRuntime _jsRuntime
<PageTitle>Dagonie Empire | Equipment</PageTitle>
<div class="on-top-dialog">

    <_LeavePage ComponentDescription="equipment" IsParentComponentProcessing=IsLoading LeaveConfirmation="ConfirmLeave_Click"></_LeavePage>
</div>

@if (IsLeaveAllowed == false)
{
    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">

        <div class="save-btn">
            <button @onclick="SaveChanges" class="btn btn-primary">Save</button>
        </div>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">

        <div class="save-btn down">
            <button @onclick="SaveChanges" class="btn btn-primary">Save</button>
        </div>
    </MudHidden>
}
<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="px-1">
    <div class="row justify-content-center">

        @if (IsLoading == true)
        {
            <LoadingPage></LoadingPage>
        }else
        {   
        <CascadingValue Value="@AllParams">
            <div class="equipment">
                 <MudPaper Class="p-2 m-0 w-100 h-100">
                    <EquipmentComponent OnItemChange="EquipmentChange" OnTraitsChange="LoadPossibleGears" PageMode=true></EquipmentComponent>
                 </MudPaper>
            </div>
            <div class="sheet-img">
                <img src="../images/CharacterItemPlacement.webp" class="stretch" />
                <div class="input headgear">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Head]" OnGearChange="GearChange" SlotType="@SD.EquipmentType.Head"> </EquipItemComponent>
                </div>
                <div class="input face">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Face]" OnGearChange="GearChange" SlotType="@SD.SlotType.Face"> </EquipItemComponent>
                </div>
                <div class="input throat">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Throat]" OnGearChange="GearChange" SlotType="@SD.SlotType.Throat"> </EquipItemComponent>
                </div>
                <div class="input body">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Body]" OnGearChange="ArmorChange" SlotType="@SD.SlotType.Body"> </EquipItemComponent>
                </div>
                <div class="input hands">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Hands]" OnGearChange="GearChange" SlotType="@SD.SlotType.Hands"> </EquipItemComponent>
                </div>
                <div class="input waist">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Waist]" OnGearChange="GearChange" SlotType="@SD.SlotType.Waist"> </EquipItemComponent>
                </div>
                <div class="input feet">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Feet]" OnGearChange="GearChange" SlotType="@SD.SlotType.Feet"> </EquipItemComponent>
                </div>
                <div class="input shoulders">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Shoulders]" OnGearChange="GearChange" SlotType="@SD.SlotType.Shoulders"> </EquipItemComponent>
                </div>
                <div class="input torso">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Torso]" OnGearChange="GearChange" SlotType="@SD.SlotType.Torso"> </EquipItemComponent>
                </div>
                <div class="input arms">                  
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Arms]" OnGearChange="GearChange" SlotType="@SD.SlotType.Arms"> </EquipItemComponent>
                </div>
                 <div class="input ring1">                  
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Ring1]" OnGearChange="GearChange" SlotType="@SD.SlotType.Ring1"> </EquipItemComponent>
                </div>
                <div class="input ring2">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.Ring2]" OnGearChange="GearChange" SlotType="@SD.SlotType.Ring2"> </EquipItemComponent>
                </div>
            </div>
            <BattleStatsComponent OnBattleStatsChange="BattleStatChange" @ref="BattleStatComp"></BattleStatsComponent>
        </CascadingValue>
        }
    </div>
</MudContainer>

<style>
    .mud-main-content {
        position: relative;
    }

</style>


@code {
    [Parameter]
    public int Id { get; set; }
    public AllParamsModel? AllParams { get; set; } = new();

    UserInfo? UserInfo { get; set; }
    public BattleStatsComponent BattleStatComp = new();
    private IDisposable? registration;
    private bool IsLoading { get; set; } = true;
    private bool IsLeaveAllowed { get; set; } = true;
    private string TargetLocation { get; set; } = "";
    private System.Action handler;

    public Dictionary<EquippedItems, EquipItemComponent> EquipItemComp = new Dictionary<EquippedItems, EquipItemComponent>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserInfo = await _userService.GetUserInfo();
            if (UserInfo?.IsAuthenticated == false)
                return;

            IsLoading = true;
            registration = _navigationManager.RegisterLocationChangingHandler(OnLocationChanging);
            StateHasChanged();
            for (EquippedItems i = EquippedItems.Face; i <= EquippedItems.Ring2; i++)
            {
                EquipItemComp[i] = new EquipItemComponent();
            }
            await LoadCharacter();
            handler = async () => await ReloadPage();
            _callbackService.OnChange += handler;

            IsLoading = false;
            // StateHasChanged();
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (UserInfo?.IsAuthenticated == false)
            {
                var uri = new Uri(_navigationManager.Uri);
                _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
            }
        }
    }

    public async Task ReloadPage()
    {
        UserInfo = await _userService.GetUserInfo();
        if (UserInfo?.SelectedCharacter?.Id is not null && Id != UserInfo.SelectedCharacter.Id)
        {
            _callbackService.OnChange -= handler;
            _navigationManager.NavigateTo($"/equipment/{UserInfo.SelectedCharacter.Id}",true);
        }
    }
    public void Dispose()
    {
        _callbackService.OnChange -= handler;
    }

    private async Task EquipmentChange()
    {
        IsLeaveAllowed = false;
        await BattleStatComp.GearChange();
        StateHasChanged();
    }

    private async Task LoadCharacter()
    {
        if (AllParams is null) return;
        AllParams.Character = await _characterRepository.GetById(Id);
        AllParams.Attributes.FillPropertiesContainer(await _attributeRepository.GetAll(Id));
        AllParams.EquipmentSlots = (await _equipmentSlotRepository.GetAll(Id)).ToList();
        AllParams.BaseSkills = (await _baseSkillRepository.GetAll(Id)).ToList();
        AllParams.SpecialSkills.FillPropertiesContainer((await _specialSkillRepository.GetAll(Id)));
    }

    private async Task SaveChanges()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            // update equipment (in character)
            if (AllParams is null) return;
            AllParams.Character.EquipmentSlots = AllParams.EquipmentSlots;

            // update character with TraitAdv collection properly filled
            await _characterRepository.Update(AllParams.Character);
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while changing equipment: " + ex.Message);
        }
        IsLoading = false;
        IsLeaveAllowed = true;
        StateHasChanged();
    }

    private void LoadPossibleGears()
    {
        foreach (var e in EquipItemComp)
        {
            e.Value.ReloadGears();
        }
        IsLeaveAllowed = false;
    }

    protected void GearChange()
    {
        // update equipment (in character)
        LoadPossibleGears();
        if (AllParams is null) return;
        AllParams.GearTraitChange();
        IsLeaveAllowed = false;
        StateHasChanged();
    }

    protected async Task ArmorChange()
    {
        // update armor 
        LoadPossibleGears();
        await BattleStatComp.GearChange();
        IsLeaveAllowed = false;
        StateHasChanged();
    }
    protected void BattleStatChange()
    {
        IsLeaveAllowed = false;
        StateHasChanged();
    }


    public async Task ConfirmLeave_Click(bool isConfirmed)
    {
        IsLoading = true;
        StateHasChanged();
        if (isConfirmed == true)
        {
            IsLeaveAllowed = true;
            await _jsRuntime.InvokeVoidAsync("HideLeavePageModal");
            _navigationManager.NavigateTo(TargetLocation);
        }
        IsLoading = false;
        StateHasChanged();
        await _jsRuntime.InvokeVoidAsync("HideLeavePageModal");
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (!IsLeaveAllowed)
        {
            TargetLocation = context.TargetLocation;

            context.PreventNavigation();
            HandleLeavePage();
        }

        return ValueTask.CompletedTask;
    }
    private void HandleLeavePage() => _jsRuntime.InvokeVoidAsync("ShowLeavePageModal");
}