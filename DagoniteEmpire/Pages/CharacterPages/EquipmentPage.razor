@page "/equipment/{id:int}"
@using DA_Business.Services.Interfaces
@using DA_DataAccess.CharacterClasses
@inject IJSRuntime _jsruntime
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IEquipmentSlotRepository _equipmentSlotRepository
@inject IBaseSkillRepository _baseSkillRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject IUserService _userService

@inject IJSRuntime _jsRuntime

<div class="container-fluid">
    <div class="save-btn">
        <button @onclick="SaveChanges" class="btn btn-primary">Save</button>

    </div>
    <div class="row">
        @if (IsLoading == true)
        {
            <LoadingPage></LoadingPage>
        }else
        {   
            <div class="equipment border">
                <CascadingValue Value="@AllParams">
                    <EquipmentComponent  OnTraitsChange="LoadPossibleGears" PageMode=true></EquipmentComponent>
                </CascadingValue>
            </div>

 
            <div class="sheet-img">
                <img src="../images/CharacterItemPlacement.webp" class="stretch" />
                <div class="input headgear">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Head]" OnGearChange="GearChange" SlotType="@SD.EquipmentType.Head"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input face">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Face]" OnGearChange="GearChange" SlotType="@SD.SlotType.Face"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input throat">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Throat]" OnGearChange="GearChange" SlotType="@SD.SlotType.Throat"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input body">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Body]" OnGearChange="GearChange" SlotType="@SD.SlotType.Body"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input hands">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Hands]" OnGearChange="GearChange" SlotType="@SD.SlotType.Hands"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input waist">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Waist]" OnGearChange="GearChange" SlotType="@SD.SlotType.Waist"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input feet">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Feet]" OnGearChange="GearChange" SlotType="@SD.SlotType.Feet"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input shoulders">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Shoulders]" OnGearChange="GearChange" SlotType="@SD.SlotType.Shoulders"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input torso">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Torso]" OnGearChange="GearChange" SlotType="@SD.SlotType.Torso"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input arms">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Arms]" OnGearChange="GearChange" SlotType="@SD.SlotType.Arms"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                 <div class="input ring1">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Ring1]" OnGearChange="GearChange" SlotType="@SD.SlotType.Ring1"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input ring2">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Ring2]" OnGearChange="GearChange" SlotType="@SD.SlotType.Ring2"> </EquipItemComponent>
                    </CascadingValue>
                </div>
            </div>
            <div class="equipment border">
                <CascadingValue Value="@AllParams">
                    
                    <div class="row w-100 border m-1 p-1">
                        <div class="set-label">
                            <label>Weapon set 1</label>
                        </div>
                        <div class="col-6 p-1">
                            <label>Main hand</label>
                            <div class="weapon main1">
                                <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.WeaponMain1]" OnGearChange="GearChange" SlotType="@SD.SlotType.WeaponMain1"> </EquipItemComponent>
                            </div>
                        </div>

                        <div class="col-6 p-1">
                            <label>Off hand</label>
                            <div class="weapon off1">
                                <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.WeaponOff1]" OnGearChange="GearChange" SlotType="@SD.SlotType.WeaponOff1"> </EquipItemComponent>
                            </div>
                        </div>

                    </div>

                    <div class="row w-100 border m-1 p-1">
                        <div class="set-label">
                            <label>Weapon set 2</label>

                        </div>
                        <div class="col-6 p-1">
                            <label>Main hand</label>
                            <div class="weapon main2">
                                <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.WeaponMain2]" OnGearChange="GearChange" SlotType="@SD.SlotType.WeaponMain2"> </EquipItemComponent>
                            </div>
                        </div>

                        <div class="col-6 p-1">
                            <label>Off hand</label>
                            <div class="weapon off2">
                                <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.WeaponOff2]" OnGearChange="GearChange" SlotType="@SD.SlotType.WeaponOff2"> </EquipItemComponent>
                            </div>
                        </div>
                    </div>
                </CascadingValue>

            </div>
        }
            
    </div>
</div>



@code {
    [Parameter]
    public int Id { get; set; }
    public AllParamsModel? AllParams { get; set; } = new();

    UserInfo? UserInfo { get; set; }

    private bool IsLoading { get; set; } = true;

    public List<EquipItemComponent> EquipItemComp { get; set; } = new List<EquipItemComponent>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;

                StateHasChanged();

                for(int i = 0; i< (int)EquippedItems.Ring2+1; i++)
                {
                    EquipItemComp.Add(new EquipItemComponent());
                }

                await LoadCharacter();

                IsLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                IsLoading = false;
                await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
            }
        }
    }

    private async Task LoadCharacter()
    {
        AllParams.Character = await _characterRepository.GetById(Id);
        AllParams.Attributes = await _attributeRepository.GetAll(Id);
        AllParams.EquipmentSlots = (await _equipmentSlotRepository.GetAll(Id)).ToList();

    }

    private async Task LoadPossibleGears()
    {
        foreach(var e in EquipItemComp)
        {
            e.ReloadGears();
        }
    }

    private async Task SaveChanges()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            // update equipment (in character)
            AllParams.Character.EquipmentSlots = AllParams.EquipmentSlots;

            // update character with TraitAdv collection properly filled
            await _characterRepository.Update(AllParams.Character);
            foreach (var obj in AllParams.Attributes)
            {
                obj.CharacterId = Id;
                await _attributeRepository.Update(obj);
            }
            foreach (var obj in AllParams.BaseSkills)
            {
                obj.CharacterId = Id;
                await _baseSkillRepository.Update(obj);
            }
            foreach (var obj in AllParams.SpecialSkills)
            {
                obj.CharacterId = Id;
                await _specialSkillRepository.Update(obj);
            }

        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while changing equipment");
        }
        IsLoading = false;
        StateHasChanged();
    }

    protected async Task GearChange()
    {
        // update equipment (in character)
        LoadPossibleGears();
        StateHasChanged();
    }

}