@page "/equipment/{id:int}"
@using DA_Business.Services.Interfaces
@using DA_DataAccess.CharacterClasses
@inject IJSRuntime _jsruntime
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IEquipmentRepository _equipmentRepository
@inject IBaseSkillRepository _baseSkillRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject IUserService _userService

@inject IJSRuntime _jsRuntime

<div class="container-fluid">
    <div class="save-btn">
        <button @onclick="SaveChanges" class="btn btn-primary">Save</button>

    </div>
    <div class="row">
        @if (IsLoading == true)
        {
            <LoadingPage></LoadingPage>
        }else
        {   
            <div class="equipment border">
                <CascadingValue Value="@AllParams">
                    <EquipmentComponent  OnTraitsChange="LoadPossibleGears" PageMode=true></EquipmentComponent>
                </CascadingValue>
            </div>

 
            <div class="sheet-img">
                <img src="../images/CharacterItemPlacement.webp" class="stretch" />
                <div class="input headgear">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Head]" GearItem="@SD.EquipmentType.Head"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input face">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Face]" GearItem="@SD.EquipmentType.Face"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input throat">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Throat]" GearItem="@SD.EquipmentType.Throat"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input body">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Body]" GearItem="@SD.EquipmentType.Body"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input hands">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Hands]" GearItem="@SD.EquipmentType.Hands"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input waist">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Waist]" GearItem="@SD.EquipmentType.Waist"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input feet">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Feet]" GearItem="@SD.EquipmentType.Feet"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input shoulders">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Shoulders]" GearItem="@SD.EquipmentType.Shoulders"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input torso">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Torso]" GearItem="@SD.EquipmentType.Torso"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input arms">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Arms]" GearItem="@SD.EquipmentType.Arms"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                 <div class="input ring1">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Ring1]" GearItem="Ring1"> </EquipItemComponent>
                    </CascadingValue>
                </div>
                <div class="input ring2">
                    <CascadingValue Value="@AllParams">
                        <EquipItemComponent @ref="EquipItemComp[(int)EquippedItems.Ring2]" GearItem="Ring2"> </EquipItemComponent>
                    </CascadingValue>
                </div>
            </div>
        }
            
    </div>
</div>



@code {
    [Parameter]
    public int Id { get; set; }
    public AllParamsModel? AllParams { get; set; } = new();

    UserInfo? UserInfo { get; set; }

    private bool IsLoading { get; set; } = true;

    public List<EquipItemComponent> EquipItemComp { get; set; } = new List<EquipItemComponent>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;

                StateHasChanged();

                for(int i = 0; i< (int)EquippedItems.Ring2+1; i++)
                {
                    EquipItemComp.Add(new EquipItemComponent());
                }

                await LoadCharacter();

                IsLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                IsLoading = false;
                await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
            }
        }
    }

    private async Task LoadCharacter()
    {
        AllParams.Character = await _characterRepository.GetById(Id);
        AllParams.Attributes = await _attributeRepository.GetAll(Id);
        AllParams.Equipment = (await _equipmentRepository.GetAll(Id)).ToList();

    }

    private async Task LoadPossibleGears()
    {
        foreach(var e in EquipItemComp)
        {
            e.ReloadGears();
        }
    }

    private async Task SaveChanges()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            // update equipment (in character)
            AllParams.Character.Equipment = AllParams.Equipment;
            //AllParams.Character.Head = SelectedHead;

            // update character with TraitAdv collection properly filled
            await _characterRepository.Update(AllParams.Character);
            foreach (var obj in AllParams.Attributes)
            {
                obj.CharacterId = Id;
                await _attributeRepository.Update(obj);
            }
            foreach (var obj in AllParams.BaseSkills)
            {
                obj.CharacterId = Id;
                await _baseSkillRepository.Update(obj);
            }
            foreach (var obj in AllParams.SpecialSkills)
            {
                obj.CharacterId = Id;
                await _specialSkillRepository.Update(obj);
            }

        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while changing equipment");
        }
        IsLoading = false;
        StateHasChanged();
    }

    // private async Task ChangeGear(string eq, string type)
    // {
    //     try
    //     {

    //         if (AllParams.Character.Head is not null && AllParams.Character.Head.Name == eq)
    //             return;

    //         EquipmentDTO newGear = (EquipmentDTO)AllParams.Character.GetType().GetProperty(type).GetValue(AllParams.Character, null);
    //         //feature.GetType().GetProperty(bonusName).SetValue(feature, newVal);

    //         //unequip gear
    //         if (newGear is not null)
    //         {
    //             var removedEquipment = AllParams.Character?.Equipment?.FirstOrDefault(u => u.Id == newGear.Id);
    //             if (removedEquipment is not null)
    //                 removedEquipment.IsEquipped = false;

    //             newGear.IsEquipped = false;
    //         }
    //         var putOnEquipment = AllParams.Character?.Equipment?.FirstOrDefault(u => u.Name == eq);
    //         if (putOnEquipment is not null)
    //         {
    //             putOnEquipment.IsEquipped = true;
    //             AllParams.Character.GetType().GetProperty(type).SetValue(AllParams.Character, putOnEquipment);
    //             //newGear = putOnEquipment;
    //         }

    //     }
    //     catch (Exception ex)
    //     {
    //         IsLoading = false;
    //         await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
    //     }
    // }
   
}