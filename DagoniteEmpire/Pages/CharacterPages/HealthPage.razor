@page "/health/{id:int}"
@using DA_Business.Services.Interfaces
@using DA_DataAccess.CharacterClasses
@inject IJSRuntime _jsruntime
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IWoundRepository _woundsRepository
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject IUserService _userService

@inject IJSRuntime _jsRuntime

<_LeavePage ComponentDescription="health" IsParentComponentProcessing=IsLoading LeaveConfirmation="ConfirmLeave_Click"></_LeavePage>
<div class="container">
    <div class="save-btn">
        <button @onclick="SaveChanges" class="btn btn-primary">Save</button>

    </div>
    <div class="row">
        @if (IsLoading == true)
        {
            <LoadingPage></LoadingPage>
        }else
        {   
        <CascadingValue Value="@AllParams">
            <MudGrid Spacing="0" Justify="Justify.SpaceBetween" Class="pa-1 ma-0">
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudPaper Class="p-2 m-2 text-center">
                        <MudStack Spacing="2">
                            <h4 style="font-family: 'Eagle Lake', serif;">Max wounds</h4>
                            <MudDivider />
                            <h4>@AllParams.Health.MaxWounds</h4>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudPaper Class="p-2 m-2 text-center">
                        <MudStack Spacing="2">
                            <h4 style="font-family: 'Eagle Lake', serif;">Current wounds</h4>
                            <MudDivider />
                            <h4>@AllParams.Health.CurrentWounds</h4>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudPaper Class="p-2 m-2 text-center">
                        <MudStack Spacing="2">
                            <h4 style="font-family: 'Eagle Lake', serif;">Healing modyfier</h4>
                            <MudDivider />
                            <h4>@AllParams.Health.HealingModyfier %</h4>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                    <MudItem xs="12" sm="6" md="4" lg="3" Class="d-flex">
                        <MudPaper Class="flex-grow-1 p-2 m-2 d-flex align-items-center text-center justify-content-center" Style="font-size:18px;">
                            <MudStack Spacing="2">
                                <h4 style="font-family: 'Eagle Lake', serif;">Current date</h4>
                                <MudDivider />
                                <DateComponent Date="@AllParams.Character.CurrentDate"></DateComponent>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
            </MudGrid>
            <div class="p-1">
                <MudText Align="Align.Center" Class="w-100" Typo="Typo.h4" Style="font-family: 'Eagle Lake', serif; padding-bottom: 8px;">Current wounds</MudText>
                <MudDataGrid HeaderClass="header-grid" @ref="WoundsGrid" MultiSelection="true" Items="@Wounds.Where(w=>w.IsCondition == false)" ReadOnly="true" Filterable="false" Class="px-0 py-1"
                                 Hideable="false" SortMode="@SortMode.None" Groupable="true" GroupExpanded="true" Elevation="2" ColumnResizeMode="ResizeMode.None">
                    <ToolBarContent >
                        <MudButton Class="pa-0 justify-content-start w-auto" OnClick="@(() => AddWound())" StartIcon="@Icons.Material.Outlined.Add" ButtonType="MudBlazor.ButtonType.Button">Add wound</MudButton>
                    </ToolBarContent>
                    <Columns>
                            <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="max-width:60px; padding:4px 4px 4px 12px;" Property="x => x.Value" Title="Wound level" Groupable="false" />
                            <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="max-width:60px;padding:4px 4px 4px 12px;;" Property="x => x.Severity" Groupable="false" />
                        <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="max-width:60px; padding:4px 4px 4px 12px;; " Property="x => x.Penalty" Groupable="false" />
                        <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="max-width:60px; padding:4px 4px 4px 12px;;" Property="x => x.IsIgnored" Groupable="false" Title="Ignored" />
                            <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="max-width:60px; padding:4px 4px 4px 12px;;" Property="x => x.IsTended" Groupable="false" Title="Tended" />
                            <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="max-width:60px; padding:4px 4px 4px 12px;;" Property="x => x.IsMagicHealed" Groupable="false" Title="Magic healed" />
                        <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="max-width:140px; padding:4px 4px 4px 12px;" Property="x => x.DateStart.ToString()" Groupable="false" Title="Injury date" />
                            <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="max-width:140px; padding:4px 4px 4px 12px;" Property="x =>  x.DateReduce.ToString()" Groupable="false" Title="Reduce date" />
                            <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" Property="x => x.Description" Groupable="false" />
                        <PropertyColumn HeaderStyle="font-weight:bold" Property="x => x.Location" Groupable="true" Grouping GroupBy="@_groupBy" Hidden="true">
                            <GroupTemplate>
                                    <span style="font-weight:bold">@context.Grouping.Key (@GetAttributesLabel(context.Grouping.Key)) </span>
                            </GroupTemplate>
                        </PropertyColumn>
                            <TemplateColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="max-width:60px; padding:4px 4px 4px 12px;"  Title="Actions" Groupable="false">
                            <CellTemplate>
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditWound(@context.Item))" />
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteWound(@context.Item))" />
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </div>
            <div class="p-1">
                <MudText Align="Align.Center" Class="w-100 p-2" Typo="Typo.h4" Style="font-family: 'Eagle Lake', serif;">Health condition</MudText>
                <MudGrid Spacing="0" Justify="Justify.SpaceBetween" Class="pa-0 ma-0">
                    <MudItem xs="12" sm="6" md="3" lg="2" Class="pa-1">
                        <MudPaper Class="p-0 m-0 text-center h-100">
                            <MudStack Spacing="1">
                                <MudText Align="Align.Center" Class="w-100 text-center p-2" Typo="Typo.h6" Style="font-family: 'Eagle Lake', serif;">NUTRITION</MudText>
                                <MudDivider />
                                <MudText Align="Align.Center" Class="w-100 text-center p-2" Typo="Typo.body1">Characters hunger level. Give bonus to strength, endurance and dexterity</MudText>

                                <MudPaper Elevation="0" Class="w-100">
                                        <MudRadioGroup @bind-Value="Conditions[SD.Condition.Nutrition].Value">
                                            <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Nutrition.BalancedDiet">Balanced diet</MudRadio>
                                            <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Nutrition.Fueled">Fueled</MudRadio>
                                            <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Nutrition.Hungry">Hungry</MudRadio>
                                            <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Nutrition.Starving">Starving</MudRadio>
                                            <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Nutrition.Malnourished">Malnourished</MudRadio>
                                        </MudRadioGroup>
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="d-flex w-100 p-2 align-content-center">
                                        <MudText Align="Align.Left" Class="w-100 text-center" Typo="Typo.h6">Bonus </MudText>
                                        <MudText Align="Align.Center" Class="w-100 text-center" Typo="Typo.h5">@Conditions[SD.Condition.Nutrition].Value</MudText>
                                    </MudPaper>

                            </MudStack>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" lg="2" Class="pa-1">
                        <MudPaper Class="p-0 m-0 text-center h-100">
                            <MudStack Spacing="1">
                                <MudText Align="Align.Center" Class="w-100 text-center  p-2" Typo="Typo.h6" Style="font-family: 'Eagle Lake', serif;">CLEANLINESS</MudText>
                                <MudDivider />
                                <MudText Align="Align.Center" Class="w-100 text-center p-2" Typo="Typo.body1" Style="min-height:40px;">Character's cloaths and body tidiness. Modifies charisma</MudText>
                                <MudPaper Elevation="0" Class="w-100">
                                    <MudRadioGroup @bind-Value="Conditions[SD.Condition.Cleanliness].Value">
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Cleanliness.Groomed">Groomed</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Cleanliness.Clean">Clean</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Cleanliness.Dirty">Dirty</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Cleanliness.Filthy">Filthy</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Cleanliness.Defiled">Defiled</MudRadio>
                                    </MudRadioGroup>
                                </MudPaper>
                                <MudPaper Elevation="0" Class="d-flex w-100 p-2 align-content-center">
                                    <MudText Align="Align.Left" Class="w-100 text-center" Typo="Typo.h6">Bonus </MudText>
                                    <MudText Align="Align.Center" Class="w-100 text-center" Typo="Typo.h5">@Conditions[SD.Condition.Cleanliness].Value</MudText>
                                </MudPaper>
 
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" lg="2" Class="pa-1">
                        <MudPaper Class="p-0 m-0 text-center h-100">
                            <MudStack Spacing="1">
                                <MudText Align="Align.Center" Class="w-100 text-center p-2" Typo="Typo.h6" Style="font-family: 'Eagle Lake', serif;">WELL-BEING</MudText>
                                <MudDivider />
                                <MudText Align="Align.Center" Class="w-100 text-center p-2" Style="min-height:40px;" Typo="Typo.body1">State of mind. Modifies inteligence, instinct and willpower</MudText>

                                <MudPaper Elevation="0" Class="w-100">
                                    <MudRadioGroup @bind-Value="Conditions[SD.Condition.Wellbeing].Value">
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Wellbeing.Joyous">Joyous</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Wellbeing.Content">Content</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Wellbeing.Worried">Worried</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Wellbeing.Despaired">Despaired</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Wellbeing.Broken">Broken</MudRadio>
                                    </MudRadioGroup>
                                </MudPaper>
                                <MudPaper Elevation="0" Class="d-flex w-100 p-2 align-content-center">
                                    <MudText Align="Align.Left" Class="w-100 text-center" Typo="Typo.h6">Bonus </MudText>
                                    <MudText Align="Align.Center" Class="w-100 text-center" Typo="Typo.h5">@Conditions[SD.Condition.Wellbeing].Value</MudText>
                                </MudPaper>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" lg="2" Class="pa-1">
                        <MudPaper Class="p-0 m-0 text-center h-100">
                            <MudStack Spacing="1">
                                <MudText Align="Align.Center" Class="w-100 text-center p-2" Typo="Typo.h6" Style="font-family: 'Eagle Lake', serif;">REST</MudText>
                                <MudDivider />
                                <MudText Align="Align.Center" Class="w-100 text-center p-2" Typo="Typo.body1" Style="min-height:40px;">How rested is character. Modifies all attributes</MudText>
                                <MudPaper Elevation="0" Class="w-100">
                                    <MudRadioGroup @bind-Value="Conditions[SD.Condition.Rest].Value">
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Rest.WellRested">Well rested</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Rest.Rested">Rested</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Rest.Tired">Tired</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Rest.Exhausted">Exhausted</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)Rest.LastBreath">Last breath</MudRadio>
                                    </MudRadioGroup>
                                </MudPaper>
                                <MudPaper Elevation="0" Class="d-flex w-100 p-2 align-content-center">
                                    <MudText Align="Align.Left" Class="w-100 text-center" Typo="Typo.h6">Bonus </MudText>
                                    <MudText Align="Align.Center" Class="w-100 text-center" Typo="Typo.h5">@Conditions[SD.Condition.Rest].Value</MudText>
                                </MudPaper>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" lg="2" Class="pa-1">
                        <MudPaper Class="p-0 m-0 text-center h-100">
                            <MudStack Spacing="1">
                                <MudText Align="Align.Center" Class="w-100 text-center p-2" Typo="Typo.h6" Style="font-family: 'Eagle Lake', serif;">HEALTHINESS</MudText>
                                <MudDivider />
                                <MudText Align="Align.Center" Class="w-100 text-center p-2" Typo="Typo.body1" Style="min-height:40px;">Related to sickness or poisoning. Modifies all attributes</MudText>

                                <MudPaper Elevation="0" Class="w-100">
                                    <MudRadioGroup @bind-Value="Conditions[SD.Condition.GeneralHealth].Value">
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)GeneralHealth.GreatHealth">Great health</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)GeneralHealth.Stable">Stable</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)GeneralHealth.Unwell">Unwell</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)GeneralHealth.Sick">Sick</MudRadio>
                                        <MudRadio Class="w-100 ps-2 ma-0" Value="(int)GeneralHealth.Dying">Dying</MudRadio>
                                    </MudRadioGroup>
                                </MudPaper>
                                <MudPaper Elevation="0" Class="d-flex w-100 p-2 align-content-center">
                                    <MudText Align="Align.Left" Class="w-100 text-center" Typo="Typo.h6">Bonus </MudText>
                                    <MudText Align="Align.Center" Class="w-100 text-center" Typo="Typo.h5">@Conditions[SD.Condition.GeneralHealth].Value</MudText>
                                </MudPaper>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </div>
        </CascadingValue>
        }
    </div>
</div>



@code {
    [Parameter]
    public int Id { get; set; }
    public AllParamsModel AllParams { get; set; } = new();
    MudDataGrid<WoundDTO> WoundsGrid { get; set; }

    private Nutrition NutritionSelect {get;set;}
    private IDisposable? registration;
    private bool IsLoading { get; set; } = true;
    private bool IsLeaveAllowed { get; set; } = true;
    private string TargetLocation { get; set; } = "";

    UserInfo? UserInfo { get; set; }
    private ICollection<WoundDTO> Wounds { get; set; } = new List<WoundDTO>();
    private ICollection<WoundDTO> DeletedWounds { get; set; } = new List<WoundDTO>();
    private IDictionary<string, WoundDTO> Conditions { get; set; } = new Dictionary<string, WoundDTO>();
    private WoundDTO NewWound { get; set; } = new();

    public string[] Initial = SD.WoundLocation.All;
    public Dictionary<EquippedItems, EquipItemComponent> EquipItemComp = new Dictionary<EquippedItems, EquipItemComponent>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;

                registration = _navigationManager.RegisterLocationChangingHandler(OnLocationChanging);
                await LoadCharacter();
                Wounds = AllParams.Health.GetAll();

                // add status if not in database
                foreach(var conName in SD.Condition.All)
                {
                    WoundDTO? con = Wounds.FirstOrDefault(w => w.Location == conName);

                    if (con is null)
                    {
                        Conditions[conName] = new ConditionDTO(conName);
                        Wounds.Add(Conditions[conName]);
                    }
                    else
                    {
                        Conditions[conName] = con;
                    }
                }
                IsLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                IsLoading = false;
                await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
            }
        }
    }

    private async Task LoadCharacter()
    {
        AllParams.Character = await _characterRepository.GetById(Id);
        AllParams.Attributes.FillPropertiesContainer(await _attributeRepository.GetAll(Id));
        ICollection<WoundDTO> wounds = (await _woundsRepository.GetAll(Id)).ToList();
        ICollection<WoundDTO> conds = (await _woundsRepository.GetAllCond(Id)).Cast<WoundDTO>().ToList();
        wounds = wounds.Concat(conds).ToList();
        AllParams.Health.FillPropertiesContainer(wounds);
        foreach (var wound in AllParams.Health.GetAll())
        {
            AllParams.Health.CalculateHealTime(wound);
        }
        
    }

    private async Task SaveChanges()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            AllParams.Health.UpdateHealthBonusesInAttributes();
            //update database of wounds
            foreach (var obj in AllParams.Health.GetAll())
            {
                obj.CharacterId = AllParams.Character.Id;
                await _woundsRepository.Update(obj);
            }
            //remove deleted wounds from repository 
            foreach (var obj in DeletedWounds)
            {
                obj.CharacterId = Id;
                await _woundsRepository.Delete(obj.Id);
            }
            // update database of attriubutes changed by wounds penalties
            foreach (var obj in AllParams.Attributes.GetAllArray())
            {
                obj.CharacterId = Id;
                await _attributeRepository.Update(obj);
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while saving wounds");
        }
        IsLoading = false;
        IsLeaveAllowed = true;
        StateHasChanged();
    }
    Func<WoundDTO, object> _groupBy = x =>
    {
        return x.Location;
    };

    string CalculateHealTime(WoundDTO wound)
    {
        var res = AllParams.Health.CalculateHealTime(wound);
        return res.ToString();
    }


    private string GetAttributesLabel(object location)
    {
        string? locationName = location?.ToString();
        if(locationName is null)
            return "";
        var attributes = WoundDTO.GetAttributeNamesFromLocation(locationName);
        if (attributes is null)
            return "";
        string res = "";
        foreach(var name in attributes)
        {
            res += name + ", ";
        }
        res = res.Remove(res.Length - 2);
        return res;
    }
    private async Task AddWound()
    {
        NewWound = new();
        var parameters = new DialogParameters<CreateWoundDialog> { { x => x.NewWound, NewWound }, { x => x.CurrentDate, AllParams.Character.CurrentDate } };

        var dialog = await DialogService.ShowAsync<CreateWoundDialog>("Create wound", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NewWound = (WoundDTO)result.Data;
            NewWound.CharacterId = AllParams.Character.Id;
            Wounds.Add(NewWound);
            AllParams.Health.CalculateHealTime(NewWound);
            IsLeaveAllowed = false;
            StateHasChanged();
        }
    }

    private async Task EditWound(WoundDTO wound)
    {
        var parameters = new DialogParameters<CreateWoundDialog> { { x => x.NewWound, wound }, { x => x.IsEdit, true } };

        var dialog = await DialogService.ShowAsync<CreateWoundDialog>("Edit wound", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NewWound = (WoundDTO)result.Data;
            wound = NewWound;
            AllParams.Health.CalculateHealTime(NewWound);            
            IsLeaveAllowed = false;
            StateHasChanged();
        }
    }
    private void DeleteWound(WoundDTO wound)
    {
        Wounds.Remove(wound);
        if(wound.Id>0)
            DeletedWounds.Add(wound);
            
        IsLeaveAllowed = false;
        StateHasChanged();
    }

    public async Task ConfirmLeave_Click(bool isConfirmed)
    {
        IsLoading = true;
        StateHasChanged();
        if (isConfirmed == true)
        {
            IsLeaveAllowed = true;
            await _jsRuntime.InvokeVoidAsync("HideLeavePageModal");
            _navigationManager.NavigateTo(TargetLocation);
        }
        IsLoading = false;
        StateHasChanged();
        await _jsRuntime.InvokeVoidAsync("HideLeavePageModal");
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (!IsLeaveAllowed)
        {
            TargetLocation = context.TargetLocation;

            context.PreventNavigation();
            HandleLeavePage();
        }

        return ValueTask.CompletedTask;
    }
    private void HandleLeavePage() => _jsRuntime.InvokeVoidAsync("ShowLeavePageModal");
}