@page "/health/{id:int}"
@using DA_Business.Services.Interfaces
@using DA_DataAccess.CharacterClasses
@inject IJSRuntime _jsruntime
@inject ICharacterRepository _characterRepository
@inject IAttributeRepository _attributeRepository
@inject IWoundRepository _woundsRepository
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject IUserService _userService

@inject IJSRuntime _jsRuntime

<div class="container-fluid">
    <div class="save-btn">
        <button @onclick="SaveChanges" class="btn btn-primary">Save</button>

    </div>
    <div class="row">
        @if (IsLoading == true)
        {
            <LoadingPage></LoadingPage>
        }else
        {   
        <CascadingValue Value="@AllParams">

            <MudGrid Spacing="4" Justify="Justify.Center">
                <MudItem xs="6" sm="4" lg="3">
                    <MudPaper Class="p-2 m-2 text-center">
                        <MudStack Spacing="2">
                            <h4>Max wounds</h4>
                            <MudDivider />
                            <h4>@AllParams.Health.MaxWounds</h4>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6" sm="4" lg="3">
                        <MudPaper Class="p-2 m-2 text-center">
                        <MudStack Spacing="2">
                            <h4>Current wounds</h4>
                            <MudDivider />
                            <h4>@AllParams.Health.CurrentWounds</h4>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6" sm="4" lg="3">
                        <MudPaper Class="p-2 m-2 text-center">
                        <MudStack Spacing="2">
                            <h4>Healing modyfier</h4>
                            <MudDivider />
                            <h4>@AllParams.Health.HealingModyfier %</h4>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                    <MudItem xs="6" sm="4" lg="3" Class="d-flex">
                        <MudPaper Class="flex-grow-1 p-2 m-2 d-flex align-items-center text-center justify-content-center" Style="font-size:18px;">
                            <MudStack Spacing="2">
                                <h4>Current date</h4>
                                <MudDivider />
                                <DateComponent Date="@AllParams.Character.CurrentDate"></DateComponent>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
            </MudGrid>
            <div class="p-3">

                <MudDataGrid @ref="WoundsGrid" MultiSelection="true" Items="@Wounds" ReadOnly="true" Filterable="false" Class="px-0 py-2"
                             Hideable="true" Groupable="true" GroupExpanded="true" Elevation="2" >
                    <ToolBarContent >
                        <MudStack Spacing="2" Class="px-0">
                            <MudText Class="px-0" Typo="Typo.h6">Current wounds</MudText>
                            <MudButton Class="pa-0 justify-content-start w-auto" OnClick="@(() => AddWound())" StartIcon="@Icons.Material.Outlined.Add" ButtonType="MudBlazor.ButtonType.Button">Add wound</MudButton>
                        </MudStack>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Value" Title="Wound level" Filterable="false" Groupable="false" />
                        <PropertyColumn Property="x => x.Severity"  />
                        <PropertyColumn Property="x => x.Penalty"  />
                            <PropertyColumn Property="x => x.DateStart.ToString()" Title="Injury date" />
                            <PropertyColumn Property="x =>  x.DateReduce.ToString()" Title="Reduce date" />
                        <PropertyColumn Property="x => x.Description" />
                            <PropertyColumn Property="x => x.Location" Grouping GroupBy="@_groupBy" Hidden="true">
                            <GroupTemplate>
                                    <span style="font-weight:bold">@context.Grouping.Key (@GetAttributesLabel(context.Grouping.Key)) </span>
                            </GroupTemplate>
                        </PropertyColumn>
                        <TemplateColumn Hidden="@IsReadOnly" CellClass="d-flex justify-end" Title="Actions">
                            <CellTemplate>
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditWound(@context.Item))" />
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteWound(@context.Item))" />
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </div>
        </CascadingValue>
        }
    </div>
</div>



@code {
    [Parameter]
    public int Id { get; set; }
    public AllParamsModel AllParams { get; set; } = new();

    MudDataGrid<WoundDTO> WoundsGrid { get; set; }

    private bool IsReadOnly { get { return false; } }

    UserInfo? UserInfo { get; set; }

    private ICollection<WoundDTO> Wounds { get; set; } = new List<WoundDTO>();
    private ICollection<WoundDTO> DeletedWounds { get; set; } = new List<WoundDTO>();
    private WoundDTO NewWound { get; set; } = new();

    public string[] Initial = SD.WoundLocation.All;


    private bool IsLoading { get; set; } = true;

    public Dictionary<EquippedItems, EquipItemComponent> EquipItemComp = new Dictionary<EquippedItems, EquipItemComponent>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoading = true;
                await LoadCharacter();
                Wounds = AllParams.Health.GetAll();
                IsLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                IsLoading = false;
                await _jsruntime.ToastrError("Error while initialize: " + ex.ToString());
            }
        }
    }

    private async Task LoadCharacter()
    {
        AllParams.Character = await _characterRepository.GetById(Id);
        AllParams.Attributes.FillPropertiesContainer(await _attributeRepository.GetAll(Id));
        AllParams.Health.FillPropertiesContainer(await _woundsRepository.GetAll(Id));
        foreach (var wound in AllParams.Health.GetAll())
        {
            AllParams.Health.CalculateHealTime(wound);
        }
    }

    private async Task SaveChanges()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            //remove deleted wounds from repository 


            AllParams.Health.UpdateHealthBonusesInAttributes();
            //update database of wounds
            foreach (var obj in AllParams.Health.GetAll())
            {
                obj.CharacterId = AllParams.Character.Id;
                await _woundsRepository.Update(obj);
            }
            foreach (var obj in DeletedWounds)
            {
                obj.CharacterId = Id;
                await _woundsRepository.Delete(obj.Id);
            }
            // update database of attriubutes changed by wounds penalties
            foreach (var obj in AllParams.Attributes.GetAllArray())
            {
                obj.CharacterId = Id;
                await _attributeRepository.Update(obj);
            }
            

        }
        catch (Exception ex)
        {
            IsLoading = false;
            await _jsRuntime.ToastrError("Error while changing equipment");
        }
        IsLoading = false;
        StateHasChanged();
    }
    Func<WoundDTO, object> _groupBy = x =>
    {
        return x.Location;
    };

    string CalculateHealTime(WoundDTO wound)
    {
        var res = AllParams.Health.CalculateHealTime(wound);
        return res.ToString();
    }


    private string GetAttributesLabel(object location)
    {
        string? locationName = location?.ToString();
        if(locationName is null)
            return "";
        var attributes = HealthModel.GetAttributeNamesFromLocation(locationName);
        if (attributes is null)
            return "";
        string res = "";
        foreach(var name in attributes)
        {
            res += name + ", ";
        }
        res = res.Remove(res.Length - 2);
        return res;
    }
    private async Task AddWound()
    {
        NewWound = new();
        var parameters = new DialogParameters<CreateWoundDialog> { { x => x.NewWound, NewWound }, { x => x.CurrentDate, AllParams.Character.CurrentDate } };

        var dialog = await DialogService.ShowAsync<CreateWoundDialog>("Create wound", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NewWound = (WoundDTO)result.Data;
            NewWound.CharacterId = AllParams.Character.Id;
            Wounds.Add(NewWound);
            AllParams.Health.CalculateHealTime(NewWound);
            StateHasChanged();
        }
    }

    private async Task EditWound(WoundDTO wound)
    {
        var parameters = new DialogParameters<CreateWoundDialog> { { x => x.NewWound, wound }, { x => x.IsEdit, true } };

        var dialog = await DialogService.ShowAsync<CreateWoundDialog>("Edit wound", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NewWound = (WoundDTO)result.Data;
            wound = NewWound;
            AllParams.Health.CalculateHealTime(NewWound);
            StateHasChanged();
        }
    }
    private void DeleteWound(WoundDTO wound)
    {
        Wounds.Remove(wound);
        if(wound.Id>0)
            DeletedWounds.Add(wound);
        StateHasChanged();
    }
                                    
}