@page "/campaign/{id:int}/{charId:int}"

@using Syncfusion.Blazor.Navigations;
@inject NavigationManager _navigationManager
@inject ISnackbar _snackBar
@inject IDialogService DialogService
@inject IJSRuntime _jsRuntime
@inject ICharacterRepository _characterRepository
@inject ICampaignRepository _campaignRepository
@inject IChapterRepository _chapterRepository
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IChatManager _chatManager
@inject ICampaignRepository _campaignRepository


@using Microsoft.AspNetCore.SignalR.Client;


<MudContainer Fixed="false">
    @if (IsLoading == true){
        <div class="text-center">
            <img src="images/loading.gif" width="60px">
        </div>
    }else{
        @if (Campaign is not null)
        {
            <MudText Typo="Typo.h4"><img src="@MyIcon.Scroll" width="40px" height="40px" class="pr-2" />Chapter list of @Campaign.Name</MudText>
        }
        @if (IsAdminOrMG)
        {
            <div class="camp">
                <MudPaper Height="100px" Width="100%" Class="pa-3 ma-3 justify-content-center" Style="cursor: pointer;" @onclick="CreateChapter">
                    <MudText Align="Align.Center" Typo="Typo.h5"> Add new Chapter...</MudText>
            </MudPaper>
            </div>
        }
        else
        {
            <MudPaper Height="100px" Width="100%" Class="pa-3 ma-3 justify-content-center align-content-center">
                <MudText Typo="Typo.h5"> Chapters for @SelectedCharacter.NPCName</MudText>
            </MudPaper>
            
        }

        <MudStack>
            @if(Chapters is not null)
            {
                @foreach (var chap in Chapters)
                {
                    <div class="d-flex flex-column camp">
                        <MudPaper Class="d-flex flex-column pa-3 ma-3" Height="200px" Width="100%" @onclick="@(()=>ChooseChapter(chap))">

                            <MudText Typo="Typo.h5">@chap.Name</MudText>
                            <MudText Typo="Typo.caption">Started at: @chap.CreatedDate</MudText>
                            <MudText Class="py-2 flex-grow-1" Typo="Typo.h6"> @chap.Day, @chap.Place </MudText>
                            <MudText Class="py-2 flex-grow-1" Typo="Typo.body1"> @chap.Description </MudText>
                            <div class="d-inline-flex">
                                @foreach (var adv in chap.Characters)
                                {
                                    <MudChip>
                                        <AvatarContent>
                                            @if (string.IsNullOrEmpty(adv.ImageUrl))
                                            {
                                                <MudAvatar>@adv.NPCName.ToUpper().First()</MudAvatar>
                                            }
                                            else
                                            {
                                                <MudAvatar>
                                                    <MudImage Src="@adv.ImageUrl"></MudImage>
                                                </MudAvatar>
                                            }
                                        </AvatarContent>
                                        <ChildContent>@adv.NPCName</ChildContent>
                                    </MudChip>
                                }
                            </div>
                        </MudPaper>

                    </div>
                    
                }
            }
        </MudStack>
    }
    <MudPaper Width="100%" Square="true" Class="ma-2">


    </MudPaper>
</MudContainer>




@code{
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int CharId { get; set; }
    private CampaignDTO Campaign { get; set; }
    private List<ChapterDTO> Chapters { get; set; } = new List<ChapterDTO>();
    public ChapterDTO NewChapter { get; set; } = new();
    public bool IsLoading { get; set; } = true;
    public bool IsAdminOrMG { get; set; } = true;
    private string Title { get; set; } = "Campaign name";
    private CharacterDTO SelectedCharacter  = null;
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }

        var user = authState.User;
        if (user == null)
            return; // failed to load

        IsAdminOrMG = user.IsInRole(SD.Role_Admin) || user.IsInRole(SD.Role_GameMaster);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCampaign();
        }
    }


    private async Task LoadCampaign()
    {
        IsLoading = true;
        StateHasChanged();

        Campaign = await _campaignRepository.GetById(Id);
        Chapters = (await _chapterRepository.GetAll(Id)).ToList();
        SelectedCharacter = await _characterRepository.GetById(CharId);
        Title = Campaign.Name;

        IsLoading = false;
        StateHasChanged();
    }

    private async Task CreateChapter()
    {
        NewChapter.Characters = Campaign.Characters.ToList();

        var parameters = new DialogParameters<CreateChapterDialog> { { x => x.NewChapter, NewChapter } };

        var dialog = await DialogService.ShowAsync<CreateChapterDialog>("Create Campaign", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NewChapter = (ChapterDTO)result.Data;
            NewChapter.CampaignId = Campaign.Id;


            Chapters.Add(await _chapterRepository.Create(NewChapter));
        }
    }

    private async Task ChooseChapter(ChapterDTO chapter)
    {
        _navigationManager.NavigateTo($"/chapter/{chapter.Id}/{SelectedCharacter.Id}");
    }






}