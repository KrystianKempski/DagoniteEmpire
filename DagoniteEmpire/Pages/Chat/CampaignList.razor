@page "/campaignlist"

@using DA_Business.Services.Interfaces
@using Syncfusion.Blazor.Navigations;
@using BreadcrumbItem = MudBlazor.BreadcrumbItem;
@inject NavigationManager _navigationManager
@inject ISnackbar _snackBar
@inject IDialogService DialogService
@inject IJSRuntime _jsRuntime
@inject ICharacterRepository _characterRepository
@inject ICampaignRepository _campaignRepository
@inject IChapterRepository _chapterRepository
@inject IChatManager _chatManager
@inject ICampaignRepository _campaignRepository
@inject IUserService _userService


@using Microsoft.AspNetCore.SignalR.Client;

<MudContainer Class="pr-1" Fixed="false">
    @if (IsLoading == true){
        <LoadingPage></LoadingPage>
    }else{
        <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
        <MudText Typo="Typo.h4" Class="py-3"><img src="@MyIcon.Bookmark" width="40px" height="40px" class="pr-2" />Avalible campaigns</MudText>
        @if (UserInfo?.IsAdminOrMG == true)
        {
            <div class="camp">

                <MudPaper Height="100px" Width="100%" Class="pa-3 mb-3 justify-content-center align-content-center" Style="cursor: pointer;" @onclick="CreateCampaign">
                    <MudText Typo="Typo.h5" Align="Align.Center"> Add new Campaign...</MudText>
            </MudPaper>
            </div>
        }
        else
        {
            @if (Characters.Count() > 0)
            {
                <MudSelect Value="SelectedCharacter" T="CharacterDTO" ValueChanged="SelectCharacter" Label=@Title AnchorOrigin="Origin.BottomCenter">

                    @foreach (var character in Characters)
                    {
                        <MudSelectItem Value="@character"/>
                    }
                </MudSelect>
                }
        }

        <MudStack>
            @if(Campaigns is not null && Campaigns.Any())
            {
                @foreach(var camp in Campaigns)
                {
                    <div class="d-flex flex-column camp">
                        <MudPaper Class="d-flex flex-column pa-3" Height="300px" Width="100%" @onclick="@(()=>ChooseCampaign(camp))">


                            <MudStack Spacing="0" Row="true">
                                <MudText Class="flex-grow-1" Typo="Typo.h6">@camp.Name</MudText>
                                @if (UserInfo?.IsAdminOrMG == true)
                                {
                                    <MudIconButton Class="pa-1" Icon="@Icons.Material.Filled.Edit" aria-label="edit" OnClick="@(()=>EditCampaign(camp))"></MudIconButton>
                                    <MudIconButton Class="pa-1" Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="@(()=>DeleteCampaign(camp.Id))"></MudIconButton>
                                }
                            </MudStack>
                            <MudText Typo="Typo.caption">Started by: @camp.GameMaster at: @camp.CreatedDate</MudText>
                            <MudText Class="py-1 flex-grow-1" Typo="Typo.body2"> @camp.Description </MudText>
                            <div class="d-flex flex-wrap">
                                @foreach (var adv in camp.Characters)
                                {
                                    <MudChip  T="CharacterDTO">
                                        <AvatarContent>
                                            @if (string.IsNullOrEmpty(adv.ImageUrl))
                                            {
                                                <MudAvatar>@adv.NPCName.ToUpper().First()</MudAvatar>
                                            }
                                            else
                                            {
                                                <MudAvatar>
                                                    <MudImage Src="@adv.ImageUrl"></MudImage>
                                                </MudAvatar>
                                            }
                                        </AvatarContent>
                                        <ChildContent>@adv.NPCName</ChildContent>
                                    </MudChip>
                                }
                            </div>
                        </MudPaper>

                    </div>

                }

            }
            else
            {
                <MudText Class="pt-3" Typo="Typo.h5">Not signed into any adventures yet</MudText>
            }
        </MudStack>
    }
    <MudPaper Width="100%" Square="true" Class="ma-2">


    </MudPaper>
</MudContainer>




@code{

    private IEnumerable<CharacterDTO> Characters { get; set; } = new List<CharacterDTO>();
    private List<CampaignDTO> Campaigns { get; set; } = new List<CampaignDTO>();
    public bool IsLoading { get; set; } = true;
    private string Title { get; set; } = "Your characters";
    private CharacterDTO SelectedCharacter  = new();
    public CampaignDTO NewCampaign { get; set; } = new();

    public UserInfo? UserInfo { get; set; }
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>();

    protected override async Task OnInitializedAsync()
    {
        UserInfo = await _userService.GetUserInfo();
        if (UserInfo?.IsAuthenticated == false)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCharactersAndCampaigns();
        }
    }

    private async Task SelectCharacter(CharacterDTO character)
    {
        IsLoading = true;
        StateHasChanged();
        SelectedCharacter = character;
        Campaigns = (await _campaignRepository.GetAll(character.Id)).ToList();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task LoadCharactersAndCampaigns()
    {
        IsLoading = true;
        StateHasChanged();
        _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Campaign", href: $"/campaignlist/"),
        };


        if (UserInfo?.IsAdminOrMG == true)
        {
            Title = "All avalible campaingns";
            Characters = await _characterRepository.GetAll();
            Campaigns = (await _campaignRepository.GetAll()).ToList();
            SelectedCharacter = await _characterRepository.GetByName(SD.NPCName_GameMaster);
        }
        else
        {
            Title = "Characters of " + UserInfo?.UserName;
            Characters = await _characterRepository.GetAllForUser(UserInfo?.UserName);
            if (Characters.Any())
            {
                SelectedCharacter = Characters.First();
                Campaigns = (await _campaignRepository.GetAll(SelectedCharacter.Id)).ToList();
            }


        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task CreateCampaign()
    {

        var parameters = new DialogParameters<CreateCampaignDialog> { { x => x.NewCampaign, NewCampaign } };

        var dialog = await DialogService.ShowAsync<CreateCampaignDialog>("Create Campaign", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NewCampaign = (CampaignDTO)result.Data;

            NewCampaign.GameMaster = UserInfo?.UserName;

            Campaigns.Add(await _campaignRepository.Create(NewCampaign));
        }
    }
    private async Task EditCampaign(CampaignDTO camp)
    {
        var parameters = new DialogParameters<CreateCampaignDialog> { { x => x.NewCampaign, camp }, { x => x.IsEdit, true } };

        var dialog = await DialogService.ShowAsync<CreateCampaignDialog>("Edit Campaign", parameters);
        var result = await dialog.Result;


        if (!result.Canceled)
        {
            NewCampaign = (CampaignDTO)result.Data;

            int index = Campaigns.FindIndex(u => u.Id == NewCampaign.Id);
            if (index >= 0)
                Campaigns[index] = await _campaignRepository.Update(NewCampaign);
        }
    }


    private async Task DeleteCampaign(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
          "Warning",
          "Are you sure you want to delete this campaign?",
          yesText: "Yes", cancelText: "No");

        if (result is null || result == false)
        {
            return;
        }

        IsLoading = true;
        StateHasChanged();
        if (id != 0)
        {

            IsLoading = true;
            StateHasChanged();

            int index = Campaigns.FindIndex(u => u.Id == id);
            if (index >= 0)
            {
                await _campaignRepository.Delete(id);
                Campaigns = (await _campaignRepository.GetAll()).ToList();
            }

            IsLoading = false;
            StateHasChanged();
            await LoadCharactersAndCampaigns();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
        StateHasChanged();

    }


    private async Task ChooseCampaign(CampaignDTO campaign)
    {
        _navigationManager.NavigateTo($"/campaign/{campaign.Id}/{SelectedCharacter.Id}");
    }









}