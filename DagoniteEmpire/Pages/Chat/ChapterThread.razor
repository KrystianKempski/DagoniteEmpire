@page "/chapter/{id:int}"
@using DA_Business.Services.Interfaces
@inject NavigationManager _navigationManager
@inject ISnackbar SnackBar
@inject IDialogService DialogService
@inject IJSRuntime _jsRuntime
@inject ICharacterRepository _characterRepository
@inject IMobRepository _mobRepository
@inject IChapterRepository _chapterRepository
@inject IAttributeRepository _attributeRepository
@inject IBaseSkillRepository _baseSkillRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject ITraitRepository<TraitCharacterDTO> _traitCharacterRepository
@inject ITraitRepository<TraitRaceDTO> _traitRaceRepository
@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject ITraitRepository<TraitProfessionDTO> _traitProfessionRepository
@inject IWoundRepository _woundRepository
@inject IBattlePhaseRepository _battlePhaseRepository
@inject IEquipmentRepository _equipmentRepository
@inject IRaceRepository _raceRepository
@inject IProfessionRepository _professionRepository
@inject IEquipmentSlotRepository _equipmentSlotRepository
@inject IPostRepository _postRepository
@inject IUserService _userService
@inject ICampaignRepository _campaignRepository
@inject IBrowserViewportService _vieportService
@inject CallbackService _callbackService
@implements IDisposable

@using BreadcrumbItem = MudBlazor.BreadcrumbItem;
<PageTitle>Dagonie Empire | Thread</PageTitle>
@if (IsLoading == true)
{
    <LoadingPage></LoadingPage>
}
else
{
    <MudHidden Breakpoint="Breakpoint.LgAndDown" Invert="true">
        <MudHidden Hidden="@(_open == true)">
            <MudButton Style="p-2" OnClick="ToggleDrawer" Variant="Variant.Text" DropShadow="true">
                <img src="@MyIcon.Helm" width="30" height="30" class="helm-icon" />
            </MudButton>            
        </MudHidden>

        <MudDrawer Width="400px" @bind-Open="@_open" Elevation="1" Variant="DrawerVariant.Temporary" ClipMode="DrawerClipMode.Always">
             <div class="px-1 py-2">
            @if (UserInfo?.IsAdminOrMG == true)
            {
                <MudGrid Justify="Justify.Center" Spacing="1">
                    <MudItem xs="8"><MudButton FullWidth Variant="Variant.Filled" Color="Color.Error" OnClick="SwichBattlePhase">@BattleButton</MudButton></MudItem>
                    @if (OngoingBattle)
                    {
                        <MudItem xs="12"><MudText Align="Align.Center">Turn: @BattlePhase.CurrentTurn</MudText></MudItem>
                        <MudItem xs="6"><MudButton FullWidth OnClick="GenerateFightSequence">Generate fight</MudButton></MudItem>
                        <MudItem xs="6"><MudButton FullWidth OnClick="NextTurn">Next turn</MudButton></MudItem>
                        <MudItem xs="6"><MudButton FullWidth OnClick="EndBattlePhase">End Battle</MudButton></MudItem>
                    }
                    <MudItem xs="6"><MudButton FullWidth OnClick="AddExistingMob">Existing mobs</MudButton></MudItem>
                </MudGrid>
            }
            @if (IsLoadingCharacters == false)
            {
                <MudPaper Elevation="1">
                    <MudStack Spacing="2">
                        @foreach (var charac in Chapter.Characters)
                        {
                            <PanelCharacterComponent AllParams="CharacterAllParams[charac.Id]" Id="charac.Id"></PanelCharacterComponent>
                        }
                        @foreach (var mob in Mobs)
                        {
                            <PanelCharacterComponent Mob="mob" Id="mob.Id" IsMob="true"></PanelCharacterComponent>
                        }
                    </MudStack>
                </MudPaper>
            }
            else
            {
                <LoadingPage></LoadingPage>
            }
            </div>
        </MudDrawer>
    
    </MudHidden>
 

    <div id="mam" class="margin-side container-lg" >

        <MudHidden Breakpoint="Breakpoint.XlAndUp" Invert="true">
            <div class="character-panel">
                @if (UserInfo?.IsAdminOrMG == true)
                {
                    <MudGrid Justify="Justify.Center" Spacing="1">
                        <MudItem xs="8"><MudButton FullWidth Variant="Variant.Filled" Color="Color.Error" OnClick="SwichBattlePhase">@BattleButton</MudButton></MudItem>
                        @if (OngoingBattle)
                        {
                            <MudItem xs="12"><MudText Align="Align.Center">Turn: @BattlePhase.CurrentTurn</MudText></MudItem>
                            <MudItem xs="6"><MudButton FullWidth OnClick="GenerateFightSequence">Generate fight</MudButton></MudItem>
                            <MudItem xs="6"><MudButton FullWidth OnClick="NextTurn">Next turn</MudButton></MudItem>
                            <MudItem xs="6"><MudButton FullWidth OnClick="EndBattlePhase">End Battle</MudButton></MudItem>
                        }
                        <MudItem xs="6"><MudButton FullWidth OnClick="AddExistingMob">Existing mobs</MudButton></MudItem>
                        <MudItem xs="6"><MudButton FullWidth OnClick="MakeSkillRoll">Make a roll</MudButton></MudItem>
                    </MudGrid>
                }
                @if (IsLoadingCharacters == false)
                {
                    <MudPaper Elevation="1">
                        <MudStack Spacing="2">
                            @foreach (var charac in Chapter.Characters)
                            {
                                <PanelCharacterComponent AllParams="CharacterAllParams[charac.Id]" Id="charac.Id"></PanelCharacterComponent>
                            }
                            @foreach (var mob in Mobs)
                            {
                                <PanelCharacterComponent Mob="mob" Id="mob.Id" IsMob="true"></PanelCharacterComponent>
                            }
                        </MudStack>
                    </MudPaper>
                }
                else
                {
                    <LoadingPage></LoadingPage>
                }

            </div>
        </MudHidden>
        @if (OngoingBattle)
        {
            <MudAlert Elevation="12" Severity="Severity.Error" Variant="Variant.Filled">Battle in progress!</MudAlert>
        }

        <MudBreadcrumbs Class="px-0 py-2" Items="_items"></MudBreadcrumbs>
        @if (Chapter is not null)
        {
            <MudText Typo="Typo.h4"><img src="@MyIcon.Quill" width="40" height="40" class="pr-2" />Chapter: @Chapter.Name</MudText>
            <MudText Class="py-2 flex-grow-1" Typo="Typo.h6"> @Chapter.Date, @Chapter.DayTime, @Chapter.Place </MudText>
            <MudText Typo="Typo.caption">Started at: @Chapter.CreatedDate</MudText>

            <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
                    <MudStack>
                    @if(Chapter.Posts is not null){
                            @foreach (var post in Posts)
                        {
                            if (post.Character is not null)
                            {
                                string postId = "post_big_number_" + post.Id.ToString();

                                <MudPaper Class="d-flex flex-row pa-2" Width="100%" MinHeight="300px">
                                    <MudPaper Class="d-flex flex-column pa-2" Width="200px">
                                            <MudText Align="Align.Center" Typo="Typo.h5">@post.Character.NPCName</MudText>
                                        <MudImage Src="@post.Character.ImageUrl" Alt="Avatar" Elevation="25" Class="rounded-lg " />

                                    </MudPaper>
                                    <MudPaper Class="d-flex flex-column pa-2 flex-grow-1">
                                        <MudStack Spacing="0" Row="true">
                                            <MudText Class="flex-grow-1" Typo="Typo.caption">Posted at: @post.CreatedDate</MudText>
                                            @if (post.CharacterId == UserInfo.SelectedCharacter.Id || UserInfo.CharacterMG == true)
                                            {
                                                <MudIconButton Class="pa-1" Icon="@Icons.Material.Filled.Edit" aria-label="edit" OnClick="@(()=>EditPost(post))"></MudIconButton>
                                            }
                                        </MudStack>                                
                                        <SfRichTextEditor Height="100%" ID="@postId"  @bind-Value="@post.Content" Readonly="true" ShowTooltip="false">
                                            <RichTextEditorImageSettings Path="./upload/postImages/" />
                                            <RichTextEditorToolbarSettings Items="@NoTools" />
                                        </SfRichTextEditor>
                                    </MudPaper>
                                </MudPaper>
                            }
                        }
                    }
                    <MudPagination @ref="@Pagination" Count="PageCount" Selected="@PageNum" SelectedChanged="SelectPage"></MudPagination>
                </MudStack>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                <div class="w-100">
                <MudStack>
                    @if (Chapter.Posts is not null)
                    {
                        @foreach (var post in Posts)
                        {
                            if (post.Character is not null)
                            {
                                string postId = "post_small_number_" + post.Id.ToString();

                                <MudPaper Width="100%" Class="d-flex flex-column pa-2 flex-grow-1">
                                    <MudStack Class="pb-1" Spacing="0" Row="true">
                                        <MudAvatar Color="Color.Dark" Style="height:37px; width:37px;"><MudImage ObjectPosition="ObjectPosition.Top" ObjectFit="ObjectFit.Cover" Src="@post.Character.ImageUrl"></MudImage></MudAvatar>
                                        <MudText Class="flex-grow-1 pl-1" Align="Align.Left" Typo="Typo.h6">@post.Character.NPCName</MudText>
                                        @if (post.CharacterId == UserInfo.SelectedCharacter.Id || UserInfo.CharacterMG == true)
                                        {
                                            <MudIconButton Class="pa-1" Icon="@Icons.Material.Filled.Edit" aria-label="edit" OnClick="@(()=>EditPost(post))"></MudIconButton>
                                        }
                                    </MudStack>

                                        <SfRichTextEditor Height="100%" ID="@postId" @bind-Value="@post.Content" Readonly="true" ShowTooltip="false">
                                            <RichTextEditorImageSettings Path="./upload/postImages/" />                                      
                                        <RichTextEditorToolbarSettings Items="@NoTools" />
                                    </SfRichTextEditor>
                                    <MudText Typo="Typo.caption">Posted at: @post.CreatedDate</MudText>
                                </MudPaper>
                            }
                        }
                    }
                    <MudPagination @ref="Pagination" Count="PageCount" SelectedChanged="SelectPage"></MudPagination>
                </MudStack>

                </div>
            </MudHidden>
        }
        <div id="bottom-container">
            <MudPaper Width="100%" Height="300px" Square="true" Class="d-flex flex-column my-2 pa-2">
                <SfRichTextEditor Enabled="SendPostEnabled" Height="90%" @bind-Value="@NewPost.Content" ShowTooltip="true">
                    <RichTextEditorImageSettings SaveFormat="SaveFormat.Blob" SaveUrl="api/FileUpload/Save" Path="./upload/postImages/" />
                    <RichTextEditorEvents OnActionBegin="ActionHandler" BeforeUploadImage="@BeforeUploadImage" OnImageUploadSuccess="@ImageUploadSuccess" />
                    <RichTextEditorToolbarSettings  Items="@Tools" />
                </SfRichTextEditor>
                <div class="d-flex flex-row">
                    <MudButton Class="mt-2 py-0" OnClick="CreatePost">@SendButtonText</MudButton>
                    @if (IsEditMode)
                    {
                        <MudButton Class="mt-2 py-0" OnClick="CancelEdit">Cancel Edit</MudButton>
                    }
                </div>
        </MudPaper>
         </div>       
</div>
}

<style>
    .e-richtexteditor.e-rte-tb-expand .e-rte-content, .e-richtexteditor.e-rte-tb-expand .e-source-content
    {
        border: none;
    }

    .e-richtexteditor .e-rte-container {
        border: none;
    }

    .e-richtexteditor.e-rte-tb-expand
    {
        border: none;
    }

    .e-richtexteditor .e-rte-content .e-content 
    {
        padding: 4px;
    }

    .e-richtexteditor.e-rte-full-screen{
        top:64px;
        right:56px;
        width:100%;
    }
</style>

@code{
    [Parameter] public int Id { get; set; }
    private ChapterDTO? Chapter { get; set; } = null;
    private List<PostDTO> Posts { get; set; } = new List<PostDTO>();
    private List<CharacterDTO> Characters { get; set; } = new List<CharacterDTO>();
    private IDictionary<int, AllParamsModel?> CharacterAllParams { get; set; } = new Dictionary<int, AllParamsModel?>();
    private ICollection<MobDTO> Mobs = new List<MobDTO>();
    private BattlePhaseDTO? BattlePhase = null;
    public PostDTO NewPost { get; set; } = new();
    public bool IsLoading { get; set; } = true;
    public bool IsLoadingCharacters { get; set; } = true;    
    private string Title { get; set; } = "Campaign name";
    private bool IsEditMode = false;
    private bool OngoingBattle = false;
    private string SendButtonText { get; set; } = "Send Post";
    private string BattleButton { get; set; } = "Start Battle";
    private int PostsPerPage { get; set; } = 10;
    private int PageNum { get; set; } = 1;
    private int PageCount { get; set; } = 1;
    private bool SendPostEnabled = true;

    private MudPagination Pagination;
    private List<ToolbarItemModel> NoTools = new List<ToolbarItemModel>();
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },        
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Blockquote },
    };


    public UserInfo? UserInfo { get; set; }
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>();
    private System.Action handler;
    private bool _open = false;
    private bool _scrollDown = true;

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    protected override async Task OnInitializedAsync()
    {
        await AuthorizeEntry();
        // PageCount = await GetPageCount();
        // PageNum = PageCount;
        // await LoadChapter();
        handler = async () => await LoadForSelectedCharacter();
        _callbackService.OnChange += handler;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){

            await AuthorizeEntry();
            PageCount = await GetPageCount();
            PageNum = PageCount;
            await LoadChapter();
        }
        UserInfo = await _userService.GetUserInfo();
        if (_scrollDown == true)
        {           
            await Task.Delay(500);
            await _jsRuntime.ScrollToElement("bottom-container");
            _scrollDown = false;
        }  
    }

    private async Task AuthorizeEntry()
    {
        UserInfo = await _userService.GetUserInfo();
        if (UserInfo?.IsAuthenticated == false)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }
        if (Id > 0 && UserInfo is not null && UserInfo.IsAdminOrMG == false)
        {

            var res = await _chapterRepository.CheckIfChapterBelongToUser(UserInfo.UserName, Id);
            if (res == false)
            {
                _navigationManager.NavigateTo($"/campaignlist", forceLoad: true);
            }
        }
    }


    private async Task LoadForSelectedCharacter()
    {
        UserInfo = await _userService.GetUserInfo();
        IsLoading = true;
        StateHasChanged();
        int charId = (int)UserInfo.SelectedCharacter.Id;
        if (charId == 0) 
            return;
        if (Chapter?.Characters.FirstOrDefault(c => c.Id == charId) is null
           && UserInfo?.CharacterMG == false)
        {

            NewPost.Content = "Character not present in this chapter!";
            SendPostEnabled = false;
        }
        else
        {
            SendPostEnabled = true;
            NewPost.Content = string.Empty;
        }
        _scrollDown = true;
        IsLoading = false;
        StateHasChanged();
    }


    private async Task LoadChapter()
    {
        IsLoading = true;
        StateHasChanged();
        Chapter = await _chapterRepository.GetById(Id);

        PageCount = await GetPageCount();
        Posts = (await _postRepository.GetPage(Id,PostsPerPage,PageNum)).ToList();

        // load characters 
        foreach(var charac in Chapter.Characters)
        {
            CharacterAllParams[charac.Id] = await LoadCharacter(charac.Id);
        }

        // load mobs
        await LoadMobs();
        await LoadForSelectedCharacter();

        _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Campaigns", href: $"/campaignlist/" ),
            new BreadcrumbItem("Chapters", href: $"/campaign/{Chapter.CampaignId}"),
            new BreadcrumbItem("Posts", href: $"/chapter/{Id}"),
        };
        Title = Chapter.Name;
        BattlePhase = await _battlePhaseRepository.GetCurrentForChapter(Id);
        if (BattlePhase is not null)
        {

            OngoingBattle = BattlePhase.BattleOngoing;
            BattleButton = OngoingBattle ? "End Battle" : "Start Battle";
        }
        _scrollDown = true;
        IsLoadingCharacters = false;
        IsLoading = false;
        StateHasChanged();
    }

    private async Task CreatePost()
    {
        if (string.IsNullOrEmpty(NewPost.Content))
            return;


        IsLoading = true;
        StateHasChanged();
        if (IsEditMode)
        {
            var result = await _postRepository.Update(NewPost);
            if (result is not null)
            {
                var index =  Posts.FindIndex(p => p.Id == NewPost.Id);
                if (index >= 0)
                    Posts[index].Content = NewPost.Content;
            }
            IsEditMode = false;
            SendButtonText = "Send Post";
        }
        else
        {
            NewPost.ChapterId = Id;
            NewPost.CreatedDate = DateTime.Now;
            UserInfo = await _userService.GetUserInfo();
            if(UserInfo?.IsAdminOrMG == true &&
              (UserInfo?.SelectedCharacter?.UserName != "gm" && UserInfo?.SelectedCharacter?.UserName != "GameMaster"))
            {
                var character = await _characterRepository.GetByName(SD.GameMaster_NPCName);                    
                NewPost.CharacterId = character.Id;
                NewPost.Character = character;
            }else{

                NewPost.ChapterId = Id;
                NewPost.CharacterId = (int)UserInfo?.SelectedCharacter?.Id;
                NewPost.Character = UserInfo?.SelectedCharacter;

            }

            var result = await _postRepository.Create(NewPost);
            if(result is not null)
                Posts.Add(NewPost);
        }
        NewPost = new();


        var newPageCount = await GetPageCount();
        if (newPageCount != PageCount || PageNum != newPageCount)
        {
            PageNum = PageCount = newPageCount;
            Posts = (await _postRepository.GetPage(Id, PostsPerPage, PageNum)).ToList();
            //  Pagination.
        }

        IsLoading = false;       

        StateHasChanged();
        _scrollDown = true;
    }

    private async Task EditPost(PostDTO post)
    {
        await _jsRuntime.ScrollToElement("bottom-container");
        NewPost = post;
        IsEditMode = true;
        SendButtonText = "Edit Post";

    }
    private void CancelEdit()
    {
        NewPost = new();
        IsEditMode = false;
        SendButtonText = "Send Post";

    }

    private void BeforeUploadImage(ImageUploadingEventArgs args)
    {
        var sizeInBytes = args.FilesData[0].Size;
        var imgSize = 500000;
        if (imgSize < sizeInBytes)
        {
            args.Cancel = true;
        }
    }

    private void ActionHandler(Syncfusion.Blazor.RichTextEditor.ActionBeginEventArgs arg)
    {
        if(arg.RequestType=="UL")
            arg.Cancel = true;
    }


    private void ImageUploadSuccess(ImageSuccessEventArgs args)
    {
        var headersString = args.Response.Headers.ToString();
        var headers = headersString.Split("name: ");
        headers = headers[1].Split("\r");

        // Update the modified image name to display a image in the editor.
        args.File.Name = headers[0];
    }

    private async Task GenerateFightSequence()
    {
        if (Chapter is null) return;
        var parameters = new DialogParameters<CreateFightSequenceDialog> {  { x => x.CharacterAllParams, CharacterAllParams.Values },
                                                                            { x => x.Mobs, Mobs },
                                                                            { x => x.Date, Chapter.Date },
                                                                            { x => x.ChapterId, Id }};

        var dialog = await DialogService.ShowAsync<CreateFightSequenceDialog>("Fight sequence", parameters, await SetDialogOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            IsLoadingCharacters = true;
            StateHasChanged();            
            await LoadMobs();
            await LoadChapter();
            IsLoadingCharacters = false;
            StateHasChanged();
            if(result.Data is not null)
                NewPost.Content += result.Data as string ?? string.Empty;
        }
    }

    private async Task AddExistingMob()
    {
        if (Chapter is null) return;
        var parameters = new DialogParameters<ExistingMobsDialog> { { x => x.Mobs, Mobs },
                                                                    { x => x.ChapterId, Id },
                                                                    { x => x.CampaignId, Chapter.CampaignId }};

        var dialog = await DialogService.ShowAsync<ExistingMobsDialog>("Existing mobs", parameters, await SetDialogOptions());
        var result = await dialog.Result;

        if (result?.Data is not null && !result.Canceled)
        {
            IsLoadingCharacters = true;
            StateHasChanged();
            // Mobs = (List<MobDTO>) result.Data;
            await LoadMobs();
            StateHasChanged();
            IsLoadingCharacters = false;
        }
    }

    private async Task SwichBattlePhase()
    {
        if (OngoingBattle)
            await EndBattlePhase();
        else
            await StartBattlePhase();
    }

    private async Task StartBattlePhase()
    {
        if (Chapter is null) return;
        BattlePhase = new(CharacterAllParams, Mobs, Chapter.CampaignId, Id);
        OngoingBattle = true;
        BattleButton = "End Battle";
        if (BattlePhase is not null)
            BattlePhase = await _battlePhaseRepository.Update(BattlePhase);
        else
            return;
        SnackBar.Add("Battle started!", Severity.Error);
    }
    private async Task NextTurn()
    {
        try{
            // Change temporary states
            // for characters
            ICollection<TraitDTO> newCharStates = new List<TraitDTO>();
            foreach (var characterParams in CharacterAllParams.Values)
            {
                if (characterParams?.TraitsTemporary is null || characterParams.TraitsTemporary.Any() == false) continue;
                var traitsToDelete = new List<TraitDTO>();
                foreach (var state in characterParams.TraitsTemporary)
                {
                    if (--state.TraitValue <= 0)
                    {
                        traitsToDelete.Add(state);
                    }
                    else
                    {
                        await _traitCharacterRepository.Update((TraitCharacterDTO)state);
                    }
                }

                //delete stats
                foreach (var trait in traitsToDelete)
                {
                    await _traitCharacterRepository.Delete(trait.Id);
                    characterParams.TraitsTemporary.Remove(trait);
                }

            }
            // for mobs
            List<string> newStates = new List<string>();
            foreach (var mob in Mobs)
            {
                newStates = new List<string>();
                var states = mob.States.Split(", ");
                foreach (var state in states)
                {
                    if (state == string.Empty) continue;
                    var statesParams = state.Split(":");
                    var name = statesParams[0];
                    var duration = Int32.Parse(statesParams[1]);
                    if(--duration > 0)
                    {
                        newStates.Add($"{name}:{duration}");
                    }
                }
                mob.States = string.Empty;
                foreach (var newState in newStates)
                {
                    mob.States += $"{newState}, ";
                }
                await _mobRepository.Update(mob);
            }

            if(BattlePhase is not null){
                BattlePhase.CurrentTurn++;
                BattlePhase = await _battlePhaseRepository.Update(BattlePhase);
                await LoadMobs();
                await LoadChapter();
                SnackBar.Add($"Turn {BattlePhase.CurrentTurn} started", Severity.Info);
            }
        }
        catch(Exception ex)
        {
            SnackBar.Add($"Error in Next turn action: " + ex.Message, Severity.Error);
        }
    }

    private async Task EndBattlePhase()
    {
        // End temporary states
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to end battle?",
            yesText: "Yes", cancelText: "No");
        if (result is null || result == false)
        {
            return;
        }

        // for characters - delete all temp traits
        foreach (var characterParams in CharacterAllParams.Values)
        {
            if (characterParams?.TraitsTemporary is null || characterParams.TraitsTemporary.Any() == false) continue;

            foreach (var trait in characterParams.TraitsTemporary)
            {
                if (trait.Name == States.Names.Dead || trait.Name == States.Names.Unconscious) continue;
                await _traitCharacterRepository.Delete(trait.Id);
            }
            characterParams.TraitsTemporary = new List<TraitDTO>();
        }
        // for mobs
        List<string> newStates = new List<string>();
        foreach (var mob in Mobs)
        {
            if (mob.States.Contains(States.Names.Dead))
                mob.States = $"{States.Names.Dead}:99";
            else if (mob.States.Contains(States.Names.Unconscious))
                mob.States = $"{States.Names.Unconscious}:99";
            else
                mob.States = string.Empty;


            await _mobRepository.Update(mob);
        }
        BattleButton = "Start Battle";
        if (BattlePhase is not null)
        {
            BattlePhase.BattleOngoing =  OngoingBattle = false;
            BattlePhase = await _battlePhaseRepository.Update(BattlePhase);
            BattlePhase = null;
            await LoadMobs();
            await LoadChapter();
            SnackBar.Add($"Battle Ended", Severity.Normal);
        }
    }

    private async Task MakeSkillRoll()
    {
        if (Chapter is null) return;
        var parameters = new DialogParameters<MakeSkillRollDialog>  {   { x => x.CharacterAllParams, CharacterAllParams.Values },
                                                                        { x => x.Mobs, Mobs },};

        var dialog = await DialogService.ShowAsync<MakeSkillRollDialog>("Skill roll", parameters, await SetDialogOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data is not null)
                NewPost.Content += result.Data as string ?? string.Empty;
            StateHasChanged();
        }
    }

    private async Task<DialogOptions> SetDialogOptions(MaxWidth maxWidth = MaxWidth.Medium)
    {
        DialogOptions options = new() { MaxWidth = maxWidth };
        if (await _vieportService.GetCurrentBreakpointAsync() <= Breakpoint.Md)
            options.FullScreen = true;
        return options;
    }
    private async Task<AllParamsModel> LoadCharacter(int id)
    {
        AllParamsModel allParams = new();
        allParams.Character = await _characterRepository.GetById(id);
        allParams.Attributes.FillPropertiesContainer(await _attributeRepository.GetAll(id));
        allParams.BaseSkills = await _baseSkillRepository.GetAll(id);
        allParams.SpecialSkills.FillPropertiesContainer(await _specialSkillRepository.GetAll(id));
        allParams.TraitsCharacter = (await _traitCharacterRepository.GetAll(id)).Where(u => u.IsTemporary == false).Cast<TraitDTO>().ToList();
        allParams.TraitsTemporary = (await _traitCharacterRepository.GetAll(id)).Where(u => u.IsTemporary == true).Cast<TraitDTO>().ToList();
        allParams.CurrentRace = await _raceRepository.GetById(allParams.Character.RaceId);
        allParams.Profession = await _professionRepository.GetById(allParams.Character.ProfessionId);
        allParams.Profession.Traits = (await _traitProfessionRepository.GetAll(allParams.Character.Id)).ToList();
        allParams.EquipmentSlots = (await _equipmentSlotRepository.GetAll(id)).ToList();
        allParams.Races = (await _raceRepository.GetAllApproved()).ToList();

        allParams.SpecialSkills.AddRelatedParametes();
        allParams.AllTraitsChange();
        allParams.Profession.CalculateClassParams(allParams.Attributes.GetAll());
        ICollection<WoundDTO> wounds = (await _woundRepository.GetAll(allParams.Character.Id)).ToList();
        ICollection<WoundDTO> conds = (await _woundRepository.GetAllCond(allParams.Character.Id)).Cast<WoundDTO>().ToList();
        wounds = wounds.Concat(conds).ToList();
        allParams.Health.FillPropertiesContainer(wounds);
        allParams.Health.UpdateHealthBonusesInAttributes();
        return allParams;
    }

    private async Task LoadMobs()
    {
        try
        {            
            Mobs = (await _mobRepository.GetAllForChapter(Id)).ToList();
            foreach (var mob in Mobs){

                mob.BattleProperties = new(mob);
                if (string.IsNullOrEmpty(mob.MainWeaponName) == false)
                {
                    mob.MainWeapon = await _equipmentRepository.GetByName(mob.MainWeaponName);
                }
                if (string.IsNullOrEmpty(mob.OffWeaponName) == false)
                {
                    mob.OffWeapon = await _equipmentRepository.GetByName(mob.OffWeaponName);
                }
                if (string.IsNullOrEmpty(mob.ShieldWeaponName) == false)
                {
                    mob.ShieldWeapon = await _equipmentRepository.GetByName(mob.ShieldWeaponName);
                }
                if (string.IsNullOrEmpty(mob.ArmorName) == false)
                {
                    mob.Armor = await _equipmentRepository.GetByName(mob.ArmorName);
                }
                mob.BattleProperties.CalculateBattleStats();
            }
        }
        catch(Exception ex)
        {
            SnackBar.Add($"Error while loading mobs: " + ex.Message, Severity.Error);
        }
    }

    private async Task<int> GetPageCount()
    {
        int postCount = await _postRepository.GetPostCount(Id);
        if (postCount == 0) return 1;
        return postCount % PostsPerPage == 0 ? (postCount / PostsPerPage) : (postCount / PostsPerPage) + 1;
    }      

    //Pagination 
    private async Task SelectPage(int page=1)
    {        
        IsLoading = true;
        StateHasChanged();
        PageNum = page;

        if(Chapter is null )
            Chapter = await _chapterRepository.GetById(Id);

        PageCount = await GetPageCount();
        Posts = (await _postRepository.GetPage(Id, PostsPerPage, PageNum)).ToList();

        IsLoading = false;
        StateHasChanged();
    }
    public void Dispose()
    {
        _callbackService.OnChange -= handler;
    }

}