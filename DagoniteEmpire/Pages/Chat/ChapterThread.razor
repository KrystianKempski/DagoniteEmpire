@page "/chapter/{id:int}/{charId:int}"

@using DA_Business.Services.Interfaces
@using Syncfusion.Blazor.Navigations;
@inject NavigationManager _navigationManager
@inject ISnackbar _snackBar
@inject IDialogService DialogService
@inject IJSRuntime _jsRuntime
@inject ICharacterRepository _characterRepository
@inject IMobRepository _mobRepository
@inject IChapterRepository _chapterRepository
@inject IPostRepository _postRepository
@inject IUserService _userService
@inject IChatManager _chatManager
@inject ICampaignRepository _campaignRepository
@inject IBrowserViewportService _vieportService

@using Microsoft.AspNetCore.SignalR.Client;
@using BreadcrumbItem = MudBlazor.BreadcrumbItem;

@if (IsLoading == true){
        <LoadingPage></LoadingPage>
}else{

<div class="character-panel">
    <MudStack Row="true">
        <MudButton OnClick="GenerateFightSequence">Generate fight </MudButton>
        <MudButton OnClick="AddNewMob">Add new mob</MudButton>
        <MudButton OnClick="AddExistingMob">Existing mobs</MudButton>

    </MudStack>
    <MudPaper Elevation="1">
        <MudStack Spacing="2">
            @foreach (var charac in Chapter.Characters)
            {
                <PanelCharacterComponent AllParams="CharacterAllParams[charac.Id]" Id="charac.Id"></PanelCharacterComponent>
            }
            @foreach (var mob in Mobs)
            {
                <PanelCharacterComponent Mob="mob" Id="mob.Id" IsMob="true"></PanelCharacterComponent>
            }

        </MudStack>


    </MudPaper>
    

</div>

    <div id="mam" class="margin-side container-lg" >

        <MudBreadcrumbs Class="px-0 py-2" Items="_items"></MudBreadcrumbs>
        @if (Chapter is not null)
        {
            <MudText Typo="Typo.h4"><img src="@MyIcon.Quill" width="40px" height="40px" class="pr-2" />Chapter: @Chapter.Name</MudText>
            <MudText Class="py-2 flex-grow-1" Typo="Typo.h6"> @Chapter.Day, @Chapter.Place </MudText>
            <MudText Typo="Typo.caption">Started at: @Chapter.CreatedDate</MudText>

            <div class="big-screen" id="send-message-cont">
                <MudStack>
                @if(Chapter.Posts is not null){
                    @foreach (var post in Posts)
                    {
                        if (post.Character is not null)
                        {
                            string postId = "post_big_number_" + post.Id.ToString();

                            <MudPaper Class="d-flex flex-row pa-2" Width="100%" MinHeight="300px">
                                <MudPaper Class="d-flex flex-column pa-2" Width="200px">
                                        <MudText Align="Align.Center" Typo="Typo.h5">@post.Character.NPCName</MudText>
                                        <MudImage Src="@post.Character.ImageUrl" Alt="Avatar" Elevation="25" Class="rounded-lg" />
                                        @if (@post.Character.NPCName != SD.NPCName_GameMaster)
                                        {
                                            <MudText Align="Align.Center" Typo="Typo.body1">Race: @post.Character.RaceName</MudText>
                                            <MudText Align="Align.Center" Typo="Typo.body1">Class: @post.Character.ProfessionName</MudText>
                                        }
                                </MudPaper>
                                <MudPaper Class="d-flex flex-column pa-2 flex-grow-1">
                                    <MudStack Spacing="0" Row="true">
                                        <MudText Class="flex-grow-1" Typo="Typo.caption">Posted at: @post.CreatedDate</MudText>
                                        @if (post.CharacterId == SelectedCharacter.Id || SelectedCharacter.NPCName == SD.NPCName_GameMaster)
                                        {
                                            <MudIconButton Class="pa-1" Icon="@Icons.Material.Filled.Edit" aria-label="edit" OnClick="@(()=>EditPost(post))"></MudIconButton>
                                        }
                                    </MudStack>
                                
                                    <SfRichTextEditor ID="@postId"  @bind-Value="@post.Content" Readonly="true" ShowTooltip="false">
                                        <RichTextEditorEvents Created="@(()=>ResizePostContent(postId))"></RichTextEditorEvents>
                                        <RichTextEditorToolbarSettings Items="@NoTools" />
                                    </SfRichTextEditor>
                                </MudPaper>
                            </MudPaper>
                        }
                    }
                }
            </MudStack>

            </div>
            <div class="small-screen w-100" id="send-message-cont">
                <MudStack>
                    @if (Chapter.Posts is not null)
                    {
                        @foreach (var post in Posts)
                        {
                            if (post.Character is not null)
                            {
                                string postId = "post_small_number_" + post.Id.ToString();

                                <MudPaper Width="100%" Class="d-flex flex-column pa-2 flex-grow-1">
                                    <MudStack Class="pb-1" Spacing="0" Row="true">
                                        <MudAvatar Color="Color.Dark" Style="height:37px; width:37px;"><MudImage Src="@post.Character.ImageUrl"></MudImage></MudAvatar>
                                        <MudText Class="flex-grow-1 pl-1" Align="Align.Left" Typo="Typo.h6">@post.Character.NPCName</MudText>
                                        @if (post.CharacterId == SelectedCharacter.Id || SelectedCharacter.NPCName == SD.NPCName_GameMaster)
                                        {
                                            <MudIconButton Class="pa-1" Icon="@Icons.Material.Filled.Edit" aria-label="edit" OnClick="@(()=>EditPost(post))"></MudIconButton>
                                        }
                                    </MudStack>

                                    <SfRichTextEditor ID="@postId" @bind-Value="@post.Content" Readonly="true" ShowTooltip="false">
                                        <RichTextEditorEvents Created="@(()=>ResizePostContent(postId))"></RichTextEditorEvents>
                                        <RichTextEditorToolbarSettings Items="@NoTools" />
                                    </SfRichTextEditor>
                                    <MudText Typo="Typo.caption">Posted at: @post.CreatedDate</MudText>
                                </MudPaper>
                            }
                        }
                    }
                </MudStack>

            </div>
        }
        <div id="bottom-container" class="ma-0">
        <MudPaper Width="100%" Height="300px" Square="true" Class="d-flex  flex-column flex-grow-1 my-2 pa-2">
            <SfRichTextEditor Height="100%" @bind-Value="@NewPost.Content"  ShowTooltip="true">
                    <RichTextEditorToolbarSettings Items="@Tools" />
                </SfRichTextEditor>
                <div class="d-flex flex-row">
                    <MudButton Class="mt-2 py-0" OnClick="CreatePost">@SendButtonText</MudButton>
                    @if (IsEditMode)
                    {
                        <MudButton Class="mt-2 py-0" OnClick="CancelEdit">Cancel Edit</MudButton>
                    }
                </div>
        </MudPaper>
         </div>   
    
</div>
}

<style>
    /*
        .e-richtexteditor .e-rte-content, .e-richtexteditor .e-source-content{
        border: none;
        } */

    .e-richtexteditor.e-rte-tb-expand .e-rte-content, .e-richtexteditor.e-rte-tb-expand .e-source-content{
        border: none;
    }

    .e-richtexteditor.e-rte-tb-expand{
        border: none;
    }

    .e-richtexteditor .e-rte-content .e-content {
        padding: 4px;

    }

   

</style>



@code{
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int CharId { get; set; }
    private ChapterDTO Chapter { get; set; } 
    private List<PostDTO> Posts { get; set; } = new List<PostDTO>();
    private List<CharacterDTO> Characters { get; set; } = new List<CharacterDTO>();
    private IDictionary<int, AllParamsModel?> CharacterAllParams { get; set; } = new Dictionary<int, AllParamsModel?>();
    private ICollection<MobDTO> Mobs = new List<MobDTO>();
    public PostDTO NewPost { get; set; } = new();
    public bool IsLoading { get; set; } = true;
    //public bool IsAdminOrMG { get; set; } = true;
    private string Title { get; set; } = "Campaign name";
    private CharacterDTO SelectedCharacter  = null;
    private bool IsEditMode = false;
    private string SendButtonText { get; set; } = "Send Post";
    private List<ToolbarItemModel> NoTools = new List<ToolbarItemModel>();
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };

    public UserInfo? UserInfo { get; set; }
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>();


    protected override async Task OnInitializedAsync()
    {

        UserInfo = await _userService.GetUserInfo();
        if (UserInfo?.IsAuthenticated == false)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }

        if(UserInfo is not null)
        {
            StateHasChanged();
        }
        if (UserInfo?.IsAdminOrMG == true)
        {
            SelectedCharacter = new()
                {
                    NPCName = "Game Master",
                    UserName = UserInfo.UserName,
                };
        }

        // _panelActivation.LeftPanelActive = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadChapter();
        }
        await _jsRuntime.ScrollToElement("bottom-container");
    }


    private async Task LoadChapter()
    {
        IsLoading = true;
        StateHasChanged();


        Chapter = await _chapterRepository.GetById(Id);
        Posts = (await _postRepository.GetAll(Id)).ToList();
        // load characters 
        foreach(var charac in Chapter.Characters)
        {
            CharacterAllParams[charac.Id] = null;
        }

        // load mobs
        Mobs = (await _mobRepository.GetAllForChapter(Id)).ToList();

        if (UserInfo?.IsAdminOrMG == true)
        {
            SelectedCharacter = await _characterRepository.GetByName(SD.NPCName_GameMaster);
        }
        else
        {
            SelectedCharacter = await _characterRepository.GetById(CharId);
        }
        _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Campaigns", href: $"/campaignlist/" ),
            new BreadcrumbItem("Chapters", href: $"/campaign/{Chapter.CampaignId}/{CharId}"),
            new BreadcrumbItem("Posts", href: $"/chapter/{Id}/{CharId}"),
        };
        Title = Chapter.Name;

        IsLoading = false;
        StateHasChanged();

    }

    private async Task CreatePost()
    {
        if (string.IsNullOrEmpty(NewPost.Content))
            return;


        IsLoading = true;
        StateHasChanged();
        if (IsEditMode)
        {
            var result = await _postRepository.Update(NewPost);
            if (result is not null)
            {
                var index =  Posts.FindIndex(p => p.Id == NewPost.Id);
                if (index >= 0)
                    Posts[index].Content = NewPost.Content;
            }
            IsEditMode = false;
            SendButtonText = "Send Post";
        }
        else
        {

            NewPost.ChapterId = Id;
            NewPost.CharacterId = SelectedCharacter.Id;
            NewPost.Character = SelectedCharacter;
            NewPost.CreatedDate = DateTime.Now;

            var result = await _postRepository.Create(NewPost);
            if(result is not null)
                Posts.Add(NewPost);

        }
        NewPost = new();

        IsLoading = false;
        StateHasChanged();
    }

    private async Task EditPost(PostDTO post)
    {
        await _jsRuntime.ScrollToElement("bottom-container");
        NewPost = post;
        IsEditMode = true;
        SendButtonText = "Edit Post";

    }
    private async Task CancelEdit()
    {
        NewPost = new();
        IsEditMode = false;
        SendButtonText = "Send Post";

    }

    public void ResizePostContent(string args)
    {
        //pass ID(column name) of multiline textbox
        _jsRuntime.InvokeVoidAsync("ResizeRichTextArea", $"{args}");
    }


    private async Task GenerateFightSequence()
    {

    }
    private async Task AddNewMob()
    {
        MobDTO NewMob = new();
        var parameters = new DialogParameters<CreateMobDialog> {  { x => x.NewMob, NewMob },
                                                                  { x => x.IsEdit, false } };

        var dialog = await DialogService.ShowAsync<CreateMobDialog>("Add mob", parameters, await SetDialogOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NewMob = (MobDTO)result.Data;
            Mobs.Add(NewMob);
        }
    }
    private void AddExistingMob(){

    }

    private async Task<DialogOptions> SetDialogOptions(MaxWidth maxWidth = MaxWidth.Medium)
    {
        DialogOptions options = new() { MaxWidth = maxWidth };
        if (await _vieportService.GetCurrentBreakpointAsync() <= Breakpoint.Md)
            options.FullScreen = true;
        return options;
    }
}