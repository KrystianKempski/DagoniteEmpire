@inject IEquipmentRepository _equipmentRepository
@inject ISnackbar Snackbar

<MudDialog ContentClass="p-1 m-0" Class="h-100 w-100 p-0 m-0">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <img src="@MyIcon.Anvil" width="40px" height="40px" class="pr-2" />
            @HeaderName
        </MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </TitleContent>
    <DialogContent>

            <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
            <MudDataGrid  Breakpoint="Breakpoint.None" T="EquipmentDTO" MultiSelection="true" Items="@Equipment" ReadOnly="true" Filterable="true" QuickFilter="@_quickFilter"
                         FilterMode="@DataGridFilterMode.ColumnFilterRow" Style="overscroll-behavior-y: contain;" Class="p-1 m-0 h-100" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
                         SortMode="@SortMode.None" Elevation="2" ColumnResizeMode="ResizeMode.Container" SelectOnRowClick="false" SelectedItemsChanged="@SelectedItemsChanged">
                    <Columns>
                        <SelectColumn T="EquipmentDTO" />
                        <PropertyColumn Filterable="false" Property="x => x.Name" />
                        <PropertyColumn Property="x => x.EquipmentType" Title="Type">
                            <FilterTemplate>
                                <MudIconButton OnClick="@OpenFilter" Icon="@_icon" Size="@Size.Small" />
                                <MudOverlay Visible="@_filterOpen" OnClick="@(() => _filterOpen = false)" />
                                <MudPopover Open="@_filterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                    Style="width:150px">
                                   <MudStack Spacing="0">
                                       <MudCheckBox T="bool" Label="Select All" Size="@Size.Small" Value="@_selectAll" ValueChanged="@SelectAll" />
                                       <MudStack Spacing="0" Style="overflow-y:auto;max-height:250px">
                                            @foreach (var item in SD.EquipmentType.All)
                                           {
                                                <MudCheckBox T="bool" Label="@item" Size="@Size.Small" Value="@(_selectedItems.FirstOrDefault(u=>u.EquipmentType == item) is not null)"
                                                             ValueChanged="@((value) => SelectedChanged(value, item))" />
                                           }
                                       </MudStack>
                                       <MudStack Row="true">
                                            <MudButton OnClick="@(() => ClearFilterAsync(context))">Clear</MudButton>
                                            <MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilterAsync(context))">Filter</MudButton>
                                       </MudStack>
                                   </MudStack>
                                </MudPopover>
                            </FilterTemplate>
                        </PropertyColumn>
                        <PropertyColumn Filterable="false" Property="x => x.Description" Title="Type" />
                    </Columns>
                </MudDataGrid>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
            <MudDataGrid Breakpoint="Breakpoint.None" T="EquipmentDTO" MultiSelection="true" Items="@Equipment" Filterable="true" Class="h-100 p-1 m-0" QuickFilter="@_quickFilter"
                         FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" FilterMode="@DataGridFilterMode.ColumnFilterRow" Style="overscroll-behavior-y: contain;"
                             SortMode="@SortMode.None" Elevation="2" ColumnResizeMode="ResizeMode.Container" SelectOnRowClick="false" SelectedItemsChanged="@SelectedItemsChanged">
                    <Columns>
                        <SelectColumn T="EquipmentDTO" />
                        <HierarchyColumn T="EquipmentDTO" />
                        <PropertyColumn Filterable="false" Property="x => x.Name"  />
                        <PropertyColumn Property="x => x.EquipmentType" Title="Type">
                            <FilterTemplate>
                                <MudIconButton OnClick="@OpenFilter" Icon="@_icon" Size="@Size.Small" />
                                <MudOverlay Visible="@_filterOpen" OnClick="@(() => _filterOpen = false)" />
                                <MudPopover Open="@_filterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                                    Style="width:150px">
                                   <MudStack Spacing="0">
                                       <MudCheckBox T="bool" Label="Select All" Size="@Size.Small" Value="@_selectAll" ValueChanged="@SelectAll" />
                                       <MudStack Spacing="0" Style="overflow-y:auto;max-height:250px">
                                            @foreach (var item in SD.EquipmentType.All)
                                            {
                                                    <MudCheckBox T="bool" Label="@item" Size="@Size.Small" Value="@(_selectedItems.FirstOrDefault(u=>u.EquipmentType == item) is not null)"
                                                                 ValueChanged="@((value) => SelectedChanged(value, item))" />
                                            }
                                       </MudStack>
                                       <MudStack Row="true">
                                            <MudButton OnClick="@(() => ClearFilterAsync(context))">Clear</MudButton>
                                            <MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilterAsync(context))">Filter</MudButton>
                                       </MudStack>
                                   </MudStack>
                                </MudPopover>
                            </FilterTemplate>
                        </PropertyColumn>
                    </Columns>
                    <ChildRowContent>
                        <MudText Typo="Typo.body1">@context.Item.Description</MudText>
                    </ChildRowContent>
                </MudDataGrid>
            </MudHidden>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OnCancelBtnClick">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="OnSaveTraitBtnClick">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new();
    [Parameter] public AllParamsModel AllParams { get; set; } = new();
    [Parameter] public ICollection<EquipmentSlotDTO> SelectedEquipment { get; set; } = new List<EquipmentSlotDTO>();
    private ICollection<EquipmentDTO> SelectedItems = new List<EquipmentDTO>();
    private IEnumerable<EquipmentDTO> Equipment { get; set; } = new List<EquipmentDTO>();
    private FilterSettings FilterSettings = new FilterSettings { Operator = Syncfusion.Blazor.Operator.Contains, Type = Syncfusion.Blazor.Grids.FilterType.FilterBar };
    public string HeaderName { get; set; } = "Select equipment";

    HashSet<EquipmentDTO> _selectedItems = new();
    HashSet<EquipmentDTO> _filterItems = new();
    FilterDefinition<EquipmentDTO> _filterDefinition;
    bool _selectAll = true;
    string _icon = Icons.Material.Outlined.FilterAlt;

    bool _filterOpen = false;
    private void OnSaveTraitBtnClick()
    {
        foreach (var e in SelectedItems)
        {
            SelectedEquipment.Add(new(e));
        }

        MudDialog.Close(DialogResult.Ok(SelectedEquipment));
        if (SelectedEquipment.Any())
            Snackbar.Add("Equipment selected", Severity.Success);

    }
    private void OnCancelBtnClick()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        Equipment = await _equipmentRepository.GetAllApproved();
        _selectedItems = Equipment.ToHashSet();
        _filterItems = Equipment.ToHashSet();
        _filterDefinition = new FilterDefinition<EquipmentDTO>
            {
                FilterFunction = x => _filterItems.Contains(x)
            };
    }
    private string _searchString;
    // quick filter - filter globally across multiple columns with the same input
    private Func<EquipmentDTO, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.EquipmentType.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
    private void SelectedItemsChanged(HashSet<EquipmentDTO> traits)
    {

        SelectedItems = traits.ToList();
        StateHasChanged();
    }

    void OpenFilter()
    {
        _filterOpen = true;
    }

    private void SelectedChanged(bool value, string itemType)
    {
        foreach (var item in Equipment.Where(u => u.EquipmentType == itemType))
        {
            if (value)           
                _selectedItems.Add(item);
            else
                _selectedItems.Remove(item);            
        }
        

        if(_selectedItems.Count == Equipment.Count())
            _selectAll = true;
        else
            _selectAll = false;
    }

    private async Task ClearFilterAsync(FilterContext<EquipmentDTO> context)
    {
        _selectedItems = Equipment.ToHashSet();
        _filterItems = Equipment.ToHashSet();
        _icon = Icons.Material.Outlined.FilterAlt;
        await context.Actions.ClearFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private async Task ApplyFilterAsync(FilterContext<EquipmentDTO> context)
    {
        _filterItems = _selectedItems.ToHashSet();
        _icon = _filterItems.Count == Equipment.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
        await context.Actions.ApplyFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private void SelectAll(bool value)
    {
        _selectAll = value;

        if (value)
        {
            _selectedItems = Equipment.ToHashSet();
        }
        else
        {
            _selectedItems.Clear();
        }
    }
}
