
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
             <MudIcon Icon="@MyIcon.Scroll" Color="Color.Primary" /> 
            @Title Chapter
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@NewChapter.Name" Label="Chapter name" />
        <MudTextField @bind-Value="@NewChapter.Description" Label="Description" Lines="3" />
        <MudStack Spacing="1" Row>
            <MudTextField @bind-Value="@NewChapter.DayTime" Label="Daytime" /> 
            <DateComponent Date="@NewChapter.Date" Editable="true"></DateComponent>
        </MudStack>
        <MudTextField @bind-Value="@NewChapter.Place" Label="Location" />
        <MudText Typo="Typo.caption">Choose player characters for chapter</MudText>
        <MudChipSet T="CharacterDTO" @bind-SelectedValues="SelectedCharacters" CheckMark SelectionMode="MudBlazor.SelectionMode.MultiSelection">
            @if (true)
            {
                int index = 0;
                @foreach (var adv in AllCharacters.OrderBy(c => c.Id))
                {
                    IncludedList.Add(false);
                    <MudChip @bind-Selected="IncludedList[index]" Text="@adv.NPCName" Value="@adv"></MudChip>
                    index++;
                }
            }
            
        </MudChipSet>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="CreateChapter">SAVE</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public ChapterDTO NewChapter { get; set; }
    [Parameter] public List<CharacterDTO> AllCharacters { get; set; } = new List<CharacterDTO>();
    [Parameter] public bool IsEdit { get; set; } = false;
    private string Title = "Create";
    private IReadOnlyCollection<CharacterDTO> SelectedCharacters { get; set; }
    private List<CharacterDTO> Characters { get; set; } = new List<CharacterDTO>();
    private List<bool> IncludedList = new List<bool>();
    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            Title = "Edit";
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        if (IsEdit)
        {
            Title = "Edit";
            int index = 0;
            foreach (var character in AllCharacters.OrderBy(c => c.Id))
            {
                if (NewChapter.Characters.FirstOrDefault(c => c.Id == character.Id) is not null)
                {
                    IncludedList[index] = true;
                }
                index++;
            }
        }
        StateHasChanged();
    }

    private void CreateChapter()
    {
        if (SelectedCharacters is not null)
        {            

            foreach (var charac in SelectedCharacters)
            {
                Characters.Add(charac);               
            }
        }
      
        NewChapter.Characters = Characters;
        NewChapter.CreatedDate = DateTime.Now;

        MudDialog.Close(DialogResult.Ok(NewChapter));
        if (IsEdit)
            Snackbar.Add("Chapter edited", Severity.Success);
        else 
            Snackbar.Add("Chapter created", Severity.Success);
    }
}
