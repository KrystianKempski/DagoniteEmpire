@inject IFileUpload _fileUpload;
@inject ISnackbar Snackbar
@inject IMobRepository _mobRepository
@inject ICampaignRepository _campaignRepository
@inject IChapterRepository _chapterRepository

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <img src="@MyIcon.Helm" width="40x" height="40px" class="helm-icon" />
            @Title mob character
        </MudText>
    </TitleContent>
    <DialogContent>

        <MudPaper Width="320px" Height="320px" Class="pa-2">
            <div class="portrait-relative">
                <div class="portrait-imageframe">
                    <img src="@NewMob.ImageUrl" class="portrait-image" />
                     <label class="input-label" for="input">@ChooseFile</label>
                    <InputFile id="input" OnChange="HandleImageUpload" class="sr-only" accept=".jpg,.png,.jpeg"></InputFile>
                </div>
            </div>
        </MudPaper>

        <MudStack Row="true">
            <MudTextField Required="true" @bind-Value="@NewMob.Name" Label="Name"  />
            <MudTextField Required="true" @bind-Value="@NewMob.RaceName" Label="Race"  />
            <MudTextField Required="true" @bind-Value="@NewMob.ProfessionName" Label="Class" />
             <MudSelect Required="true" @bind-Value="@NewMob.Relation" Label="Relation">
                <MudSelectItem Value="Relation.Ally">@Relation.Ally.ToString()</MudSelectItem>
                <MudSelectItem Value="Relation.Neutral">@Relation.Neutral.ToString()</MudSelectItem>
                <MudSelectItem Value="Relation.Enemy">@Relation.Enemy.ToString()</MudSelectItem>

            </MudSelect> 
        </MudStack>

        <MudTextField Required="true" @bind-Value="@NewMob.Description" Label="Description" Lines="3" />
        <MudTextField @bind-Value="@NewMob.Notes" Label="Notes" Lines="3" />
        <MudGrid>
            <MudItem xs="3">
                <MudNumericField Required="true" @bind-Value="@NewMob.AttackSkillValue" Label="Attack skill" />
            </MudItem>
            <MudItem xs="3">
                <MudNumericField Required="true" @bind-Value="@NewMob.ShieldSkillValue" Label="Shield skill" />
            </MudItem>
            <MudItem xs="3">
                <MudNumericField Required="true" @bind-Value="@NewMob.DodgeSkillValue" Label="Dodge skill" />
            </MudItem>
            <MudItem xs="3">
                <MudNumericField Required="true" @bind-Value="@NewMob.ArmorSkillValue" Label="Armor skill" />
            </MudItem>
            <MudItem xs="3">
                <MudNumericField Required="true" @bind-Value="@NewMob.ParrySkillValue" Label="Parry skill" />
            </MudItem>
            <MudItem xs="3">
                <MudNumericField Required="true" @bind-Value="@NewMob.LiftingSkillValue" Label="Lifting skill" />
            </MudItem>
            <MudItem xs="3">
                <MudNumericField Required="true" @bind-Value="@NewMob.PainResSkillValue" Label="Pain resistance" />
            </MudItem>
            <MudItem xs="3">
                <MudNumericField Required="true" @bind-Value="@NewMob.WrestlingSkillValue" Label="Wrestling" />
            </MudItem>

        </MudGrid>

         <MudGrid>
            <MudItem xs="6">
                <MudSelect Required="true" ShrinkLabel="true" @bind-Value="@NewMob.MainWeaponName" Label="Main weapon">
                    <MudSelectItem Value="string.Empty">None</MudSelectItem>
                    @foreach (string weapon in SD.BasicWeaponsMelee.All)
                    {
                        <MudSelectItem Value="@weapon">@weapon</MudSelectItem>
                    }
                    @foreach (string weapon in SD.BasicWeaponsShooting.All)
                    {
                        <MudSelectItem Value="@weapon">@weapon</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
                <MudItem xs="6">
                <MudSelect ShrinkLabel="true" @bind-Value="@NewMob.OffWeaponName" Label="Second weapon">
                    <MudSelectItem Value="string.Empty">None</MudSelectItem>
                    @foreach (string weapon in SD.BasicWeaponsMelee.All)
                    {
                        <MudSelectItem Value="@weapon">@weapon</MudSelectItem>
                    }
                    @foreach (string weapon in SD.BasicWeaponsShooting.All)
                    {
                        <MudSelectItem Value="@weapon">@weapon</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSelect ShrinkLabel="true"  @bind-Value="@NewMob.ShieldWeaponName" Label="Shield">
                    <MudSelectItem Value="string.Empty">None</MudSelectItem>
                    @foreach (string shield in SD.BasicShields.All)
                    {
                        <MudSelectItem Value="@shield">@shield</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSelect ShrinkLabel="true"  @bind-Value="@NewMob.ArmorName" Label="Armor">
                    <MudSelectItem Value="string.Empty">None</MudSelectItem>
                    @foreach (string armor in SD.BasicArmors.All)
                    {
                        <MudSelectItem Value="@armor">@armor</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
        <MudPaper Class="py-2" Elevation="0">
            <MudStack Row="true" Justify="Justify.SpaceBetween">
                <MudNumericField Required="true" @bind-Value="@NewMob.MaxWounds" Label="Maximum wounds" />
                <MudNumericField @bind-Value="@NewMob.CurrentWounds" Label="Current wounds" />
            </MudStack>

            <MudText>Current status: @NewMob.States</MudText>
            <MudStack Row="true" Justify="Justify.SpaceBetween">
                <MudButton OnClick="ClearStates">Clear states</MudButton>
                <MudSelect Value="SelectedState" T="string" ValueChanged="AddState" Label="AddState" AnchorOrigin="Origin.BottomCenter">
                    @foreach (string state in States.Names.All)
                    {
                        <MudSelectItem Value="@state">@state</MudSelectItem>
                    }
                </MudSelect>
                <MudNumericField @bind-Value="@StateDuration" Label="Duration" />
            </MudStack>
         
        </MudPaper>
        <MudStack Row="true" Justify="Justify.SpaceBetween">
            <MudSelect Value="@NewMob.Campaign" T="CampaignDTO" ValueChanged="SelectCampaign" Label="Select Campaign" Placeholder="Select campagin" AnchorOrigin="Origin.BottomCenter">
                @foreach (var campaign in Campaigns)
                {
                    <MudSelectItem Value="@campaign">@campaign.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect ReadOnly="IsCampaignSelected" Value="NewMob.Chapter" T="ChapterDTO" ValueChanged="SelectCharacter" Label="Select character" AnchorOrigin="Origin.BottomCenter">
                @foreach (var chapter in Chapters)
                {
                    <MudSelectItem Value="@chapter">@chapter.Name</MudSelectItem>
                }
            </MudSelect>
        </MudStack>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="SaveMobBtn">@Title</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public MobDTO NewMob { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; } = false;
    [Parameter] public int CampaignId { get; set; } = 0;
    [Parameter] public int ChapterId { get; set; } = 0;
    private string Title = "Create";
    private string SelectedState = string.Empty;
    private IEnumerable<CampaignDTO> Campaigns { get; set; } = new List<CampaignDTO>();
    private IEnumerable<ChapterDTO> Chapters { get; set; } = new List<ChapterDTO>();
    private bool IsCampaignSelected = true;
    private string ChooseFile = "Choose file";
    private int StateDuration = 1;
    private IList<IBrowserFile> files = new List<IBrowserFile>();
    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            Title = "Edit";
        }
        else
        {
            Title = "Add";
        }


        Campaigns = await _campaignRepository.GetAll();
        if (CampaignId > 0)
        {
            NewMob.Campaign = Campaigns.FirstOrDefault(c=>c.Id ==CampaignId) ;
            if(NewMob.Campaign is not null)
                NewMob.CampaignId = CampaignId;
        }
        if (ChapterId > 0)
        {
            NewMob.Chapter = await _chapterRepository.GetById(ChapterId);
            if (NewMob.Chapter is not null)
                NewMob.ChapterId = ChapterId;
        }
    }

    private async Task SaveMobBtn()
    {
        MobDTO updatedMob;

        if (IsEdit)
        {
             updatedMob = await _mobRepository.Update(NewMob);
            
        }else{
            updatedMob = await _mobRepository.Create(NewMob);
        }

        NewMob.Id = updatedMob.Id;

        MudDialog.Close(DialogResult.Ok(NewMob));
        if (IsEdit)
            Snackbar.Add("Mob edited", Severity.Success);
        else 
            Snackbar.Add("Mob created", Severity.Success);
    }

    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }

    private void AddState(string newStatus)
    {
        NewMob.States += $"{newStatus}:{StateDuration}, ";
    }
    private void ClearStates()
    {
        NewMob.States = string.Empty;
    }

    private async Task SelectCampaign(CampaignDTO campaign)
    {
        Chapters = await _chapterRepository.GetAll(campaign.Id);
        if (campaign.Id > 0)
        {
            IsCampaignSelected = false;
            NewMob.Campaign = campaign;
            NewMob.CampaignId = campaign.Id;
        }
    }
    private void SelectCharacter(ChapterDTO chapter)
    {
        if (chapter.Id > 0)
        {
            NewMob.Chapter = chapter;
            NewMob.ChapterId = chapter.Id;
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                ChooseFile = string.Empty;
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        NewMob.ImageUrl = await _fileUpload.UploadFile(file,SD.Portrait);
                    }
                    else
                    {
                        Snackbar.Add("Please select .jpg / .jpeg / .png file only",Severity.Warning);
                    }
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error while image upload: " + ex.ToString(), Severity.Error);
        }
    }
    
}
