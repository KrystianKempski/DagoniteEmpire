@using DA_DataAccess.CharacterClasses
@using DA_Models
@inject IFileUpload _fileUpload;
@inject ISnackbar Snackbar
@inject IMobRepository _mobRepository
@inject ICampaignRepository _campaignRepository
@inject IChapterRepository _chapterRepository
@inject ITraitRepository<TraitCharacterDTO> _traitCharacterRepository
@inject IWoundRepository _woundsRepository

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <img src="@MyIcon.Attack" width="40" height="40" />
            Fight sequence
        </MudText>
    </TitleContent>
    <DialogContent>

        <MudGrid>
            <MudItem xs="12">
                <MudSwitch @bind-Value="IsOppositeRoll" Color="Color.Primary">Is opposite roll</MudSwitch>
            </MudItem>
            <MudItem xs="6">
                @* ATTACKER *@
                <MudPaper Elevation="1" Class="pa-2 h-100">

                    @* Select Rolling character *@
                    <MudSelect Value="@Roller" T="string" Required="true" ValueChanged="SelectCharacterRolling" Label="Select Rolling character">
                        <MudSelectItem Value="string.Empty">@string.Empty</MudSelectItem>
                        @foreach(var attacker in CharacterAllParams) {
                            @if (attacker is not null )
                            {                            
                                <MudSelectItem Value="attacker.Character.NPCName">@attacker.Character.NPCName</MudSelectItem>
                            }
                        }
                        @foreach (var attacker in Mobs)
                        {
                            @if (attacker is not null)
                            {
                                <MudSelectItem Value="attacker.Name">@attacker.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>                
                    @* Select base skill  *@
                    <MudSelect ReadOnly="SelectedCharacterRolling is null" T="string" Required="true" @bind-Value="@BaseSkillRollName" Label="Select base skill">
                        @foreach (var baseSkill in SD.BaseSkills.All)
                        {
                            <MudSelectItem Value="baseSkill">@baseSkill</MudSelectItem>
                        }
                    </MudSelect>

                    @* Select special skill *@
                    <MudSelect ReadOnly="BaseSkillRollName == string.Empty" T="SpecialSkillDTO" Required="true" @bind-Value="@SpecialSkillRoll" Label="Select special skill">
                        @if(BaseSkillRollName != string.Empty)
                        {
                            @foreach (var baseSkill in SelectedCharacterRolling.SpecialSkills.GetAllSection(BaseSkillRollName))
                            {
                                <MudSelectItem Value="baseSkill">@baseSkill.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>  
                    <MudStack Row>
                        <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" OnClick="AddAttackerBonus"/>
                        <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Remove" OnClick="RemoveAttackerBonus" />
                    </MudStack>
                    @foreach(var item in AdditionalAttackerBonuses)
                    {
                        <MudStack Row>
                            <MudTextField @bind-Value="item.First">@item.First</MudTextField>
                            <div style="width:40px;">
                                <MudNumericField @bind-Value="item.Second"> @item.Second</MudNumericField>
                            </div>
                        </MudStack>
                    }
                   
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                 @if (IsOppositeRoll == false)
                {
                    <MudPaper Elevation="1" Class="pa-2 h-100">
                        <MudSelect T="int" Required="true" @bind-Value="DifficultyValue" Label="Select dificulty">
                            @foreach (var defender in SD.DifficultyLevel.ToList())
                            {
                                <MudSelectItem Value="defender.Value">@defender.Key</MudSelectItem>
                            }     
                        </MudSelect>
                        <MudNumericField Margin="0" Class="dense-numeric-field" Min="5" @bind-Value="DifficultyValue" ></MudNumericField>
                    </MudPaper> 
                }
                else
                {                
                    @* DEFENDER *@                
                    <MudPaper Elevation="1" Class="pa-2 h-100">
                        @* Select Defender *@
                         <MudSelect Value="Defender" T="string" Required="true" ValueChanged="SelectDefender" Label="Select Defender">
                                <MudSelectItem Value="string.Empty">@string.Empty</MudSelectItem>
                            @foreach (var defender in CharacterAllParams)
                            {
                                @if (defender.Character.NPCName != Defender)
                                {
                                    <MudSelectItem Value="defender.Character.NPCName">@defender.Character.NPCName</MudSelectItem>
                                }
                            }                            
                            @foreach (var defender in Mobs)
                            {
                                @if (defender.Name != Roller)
                                {
                                    <MudSelectItem Value="defender.Name">@defender.Name</MudSelectItem>
                                }
                            }
                        </MudSelect> 
                        @* Select base skill  *@
                         <MudSelect ReadOnly="SelectedCharacterDefending is null" T="string" Required="true" @bind-Value="@BaseSkillDefenceName" Label="Select base skill">
                            @foreach (var baseSkill in SD.BaseSkills.All)
                            {
                                <MudSelectItem Value="baseSkill">@baseSkill</MudSelectItem>
                            }
                        </MudSelect> 

                        @* Select special skill *@
                         <MudSelect ReadOnly="BaseSkillDefenceName == string.Empty" T="SpecialSkillDTO" Required="true" @bind-Value="@SpecialSkillDefence" Label="Select special skill">
                            @if (BaseSkillDefenceName != string.Empty)
                            {
                                @foreach (var baseSkill in SelectedCharacterDefending.SpecialSkills.GetAllSection(BaseSkillDefenceName))
                                {
                                    <MudSelectItem Value="baseSkill">@baseSkill.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>
                        <MudStack Row>
                            <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" OnClick="AddDefenderBonus" />
                            <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Remove" OnClick="RemoveDefenderBonus" />
                        </MudStack>
                        @foreach (var item in AdditionalDefenderBonuses)
                        {
                            <MudStack Row>
                                <MudTextField @bind-Value="item.First">@item.First</MudTextField>
                                <MudNumericField @bind-Value="item.Second"> @item.Second</MudNumericField>
                            </MudStack>
                        }
                    </MudPaper>                
                }
            </MudItem>
            <MudItem xs="12">
                <MudButton Class="p-2 m-2 w-100 justify-content-center"  Variant="Variant.Filled" Color="Color.Primary" OnClick="MakeRoll">Roll!</MudButton>
            </MudItem>

            <MudItem xs="12">
                <SfRichTextEditor Width="100%" Height="400px" @bind-Value="@RollResultString" ShowTooltip="true">
                    <RichTextEditorToolbarSettings Items="@Tools" />
                </SfRichTextEditor>
            </MudItem>
        </MudGrid>
    }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Exit</MudButton>
        <MudButton Color="Color.Error" OnClick="SaveSequenceBtn">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ICollection<AllParamsModel?> CharacterAllParams { get; set; } = new List<AllParamsModel?>();
    [Parameter] public IEnumerable<MobDTO> Mobs { get; set; } = new List<MobDTO>();


    private string RollResultString = string.Empty;
    private AllParamsModel? SelectedCharacterRolling = null;
    private AllParamsModel? SelectedCharacterDefending = null;
    private MobDTO? SelectedMobRolling = null;
    private MobDTO? SelectedMobDefending = null;
    private string Roller = string.Empty;
    private string Defender = string.Empty;
    private string BaseSkillRollName = string.Empty;
    private string BaseSkillDefenceName = string.Empty;
    private SpecialSkillDTO? SpecialSkillRoll = null;
    private SpecialSkillDTO? SpecialSkillDefence = null;

    public class Pair<T, U>
    {
        public Pair()
        {
        }

        public Pair(T first, U second)
        {
            this.First = first;
            this.Second = second;
        }

        public T First { get; set; }
        public U Second { get; set; }
    };

    private List<Pair<string, int>> AdditionalAttackerBonuses = new List<Pair<string, int>>();
    private List<Pair<string, int>> AdditionalDefenderBonuses = new List<Pair<string, int>>();

    private bool _isOppositeRoll = false;
    public bool IsOppositeRoll 
    {
        get => _isOppositeRoll;
        set
        {
            _isOppositeRoll = value;
            //StateHasChanged();
        }
    }
    private int DifficultyValue = 0;

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };

    private void Cancel()
    {
        if(RollResultString == string.Empty)
            MudDialog.Cancel();
        else
        {
            MudDialog.Close(DialogResult.Ok(RollResultString));
            Snackbar.Add("Fight sequence added", Severity.Success);
        }
    }

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task AddAttackerBonus()
    {
        AdditionalAttackerBonuses.Add(new Pair<string, int>("", 0));
    }

    private async Task RemoveAttackerBonus()
    {
        AdditionalAttackerBonuses.RemoveAt(AdditionalAttackerBonuses.Count-1); 
    }
    private async Task AddDefenderBonus()
    {
        AdditionalDefenderBonuses.Add(new Pair<string, int>("", 0));
    }

    private async Task RemoveDefenderBonus()
    {
        AdditionalDefenderBonuses.RemoveAt(AdditionalAttackerBonuses.Count-1);
    }

    private void SelectCharacterRolling(string attackerName)
    {
        try
        {

            var characterParams = CharacterAllParams.FirstOrDefault(p => p.Character.NPCName == attackerName);
            if (characterParams is not null)
            {
                SelectedCharacterRolling = characterParams;
                Roller = SelectedCharacterRolling.Character.NPCName;
                return;
            }
            var mob = Mobs.FirstOrDefault(m=>m.Name == attackerName);
            if(mob is not null)
            {
                SelectedMobRolling = mob;
                Roller = mob.Name;
            }
        }catch(Exception ex)
        {
            Snackbar.Add("Error while selecting Attacker: " + ex.Message);
        }
    }
    private void SelectDefender(string defenderName)
    {
        try{

            var characterParams = CharacterAllParams.FirstOrDefault(p => p.Character.NPCName == defenderName);
            if (characterParams is not null)
            {
                SelectedCharacterDefending = characterParams;
                return;
            }
            var mob = Mobs.FirstOrDefault(m => m.Name == defenderName);
            if (mob is not null)
            {
                SelectedMobDefending = mob;
            }
        }catch(Exception ex)
        {
            Snackbar.Add("Error while selecting Defender: " + ex.Message);
        }
    }



    private void MakeRoll()
    {
        RichText ResultStringMG = new();
        int sumOfAll = 0;
        if (SpecialSkillRoll is not null && SelectedCharacterRolling is not null)
        {
            sumOfAll = SpecialSkillRoll.SumBonus;
            ResultStringMG += $"{SelectedCharacterRolling.Character.NPCName} skill value: {sumOfAll}";
            ResultStringMG.NewLine();
            foreach (var item in AdditionalAttackerBonuses)
            {
                sumOfAll += item.Second;
                ResultStringMG += $"Bonus from {item.First}: {item.Second}";
                ResultStringMG.NewLine();
            }
        }
        ResultStringMG.NewLine();
        Tuple<bool, string> result;
        if (IsOppositeRoll == true && SpecialSkillDefence is not null && SelectedCharacterDefending is not null)
        {
            ResultStringMG += $"{SelectedCharacterDefending.Character.NPCName} skill value: {SpecialSkillDefence.SumBonus}";
            ResultStringMG.NewLine();
            DifficultyValue = SpecialSkillDefence.SumBonus;

            foreach(var item in AdditionalDefenderBonuses)
            {
                DifficultyValue += item.Second;
                ResultStringMG += $"Bonus from {item.First}: {item.Second}";
                ResultStringMG.NewLine();
            }
            result = SD.MakeOppositeRollTest(SelectedCharacterRolling.Character.NPCName, sumOfAll, SelectedCharacterDefending.Character.NPCName, DifficultyValue);
        }
        else
        {
            string? diffName = SD.DifficultyLevel.FirstOrDefault(u => u.Value == DifficultyValue).Key;

            if(string.IsNullOrEmpty(diffName)== false)
            {
                ResultStringMG += $"Difficulty level: {diffName} ({DifficultyValue})";
            }
            else
            {
                ResultStringMG += $"Difficulty level: {DifficultyValue}";
            }
            ResultStringMG.NewLine();
            result = SD.MakeRollTest(DifficultyValue, sumOfAll);
        }        

        ResultStringMG += result.Item2;
        ResultStringMG.EndText();
        RollResultString = ResultStringMG.AllText;
    }

    private async Task SaveSequenceBtn()
    {
        try
        {

            MudDialog.Close(DialogResult.Ok(RollResultString));
            Snackbar.Add("Fight resolved", Severity.Success);
        }
        catch(Exception ex)
        {
            Snackbar.Add("Error while saving: " + ex.Message, Severity.Error);
        }
    }    
}
