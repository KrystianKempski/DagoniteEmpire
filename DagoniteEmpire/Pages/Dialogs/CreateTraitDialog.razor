@using DA_DataAccess.CharacterClasses
@inject ISnackbar Snackbar
@inject IUserService _userService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <img src="@IconSource" width="40px" height="40px" class="pr-2" />
            @HeaderName
        </MudText>
    </TitleContent>
    <DialogContent>
            <div class="main-table">

            @if(IsWeaponQualityMode == false)
            {
                <div class="d-flex ">
                    <div class="d-flex flex-column flex-grow-1">
                        <label class="fw-bold py-1">@NewTrait.TraitLabel name</label>
                        <SfTextBox Readonly="IsInfoMode" Placeholder="Insert trait name" @bind-Value="@NewTrait.Name"></SfTextBox>
                    </div>
                    @if (NewTrait.TraitType == SD.TraitType_Character || NewTrait.TraitType == SD.TraitType_Temporary)
                    {
                        <div class="d-flex flex-column px-1">
                            @if (NewTrait.TraitType == SD.TraitType_Temporary)
                            {
                                <label class="fw-bold py-1">Duration</label>
                            }else{
                                <label class="fw-bold py-1">Trait value</label>
                            }
                            <SfNumericTextBox Readonly="IsInfoMode" Width="100px" TValue="int" @bind-Value="@NewTrait.TraitValue"></SfNumericTextBox>
                        </div>
                      @*   <div class="d-flex flex-column px-1">
                            <label class="fw-bold py-1">Unique</label>
                            <div class="justify-content-center mx-auto my-auto">
                                <SfCheckBox Disabled="IsInfoMode" @bind-Checked="NewTrait.IsUnique "></SfCheckBox>
                            </div>
                </div>*@
                    } 
                   @*      @if (UserInfo?.IsAdminOrMG == true)
                        {
                        <div class="d-flex flex-column px-1">
                            <label class="fw-bold py-1">Approve</label>
                            <div class="justify-content-center mx-auto my-auto">
                                    <SfCheckBox @bind-Checked="NewTrait.TraitApproved"></SfCheckBox>
                            </div>
                        </div>
                        } *@
                </div>
                <div class="align-items-start bonus-name py-0">
                    <label class="fw-bold  py-1">@NewTrait.TraitLabel description</label>
                </div>
                <div class="align-items-start">
                    <div class="col-12 bonus-name py-0">
                        <SfTextBox Readonly="IsInfoMode" Multiline=true Placeholder="Insert general description" @bind-Value="@NewTrait.Descr"></SfTextBox>
                    </div>
                </div>
                        
                <label class="fw-bold pt-4">Bonuses and penalties</label>
            }
            @if (NewTrait.Bonuses != null)
            {
                @foreach (var obj in NewTrait.Bonuses)
                {
                    <label class="bonus-cell">Bonus @obj.Index</label>
                    <div class="bonuses-columns">
                            <div class="bonus-cell">
                            <SfDropDownList Readonly="IsInfoMode" TValue="string" TItem=string Width="100%" Placeholder="Select a feature type" DataSource="@FeatureData" @bind-Value="@obj.FeatureType" Enabled="@IsNotWeaponQuality()"></SfDropDownList>
                            </div>
                        @if (obj.FeatureType == SD.FeatureAttribute)
                        {
                            <div class="bonus-cell">
                                <SfDropDownList Readonly="IsInfoMode" TValue="string" TItem="string" Width="100%" Placeholder="Select an Attribute " DataSource="@SD.Attributes.All" @bind-Value="@obj.FeatureName">
                                    <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                        else if (obj.FeatureType == SD.FeatureBaseSkill)
                        {
                            <div class="bonus-cell">
                                <SfDropDownList Readonly="IsInfoMode" TValue="string" TItem="string" Width="100%" Placeholder="Select base skill " DataSource="@SD.BaseSkills.All" @bind-Value="@obj.FeatureName">
                                    <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                        else if (obj.FeatureType == SD.FeatureSpecialSkill)
                        {
                            <div class="bonus-cell">
                                <SfDropDownList Readonly="IsInfoMode" TValue="string" TItem="SpecialSkillDTO" Width="100%" Placeholder="Select special skill " DataSource="@AllParams.SpecialSkills.GetAllArray()" @bind-Value="@obj.FeatureName">
                                    <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                        else if (obj.FeatureType == SD.FeatureWeaponQuality)
                        {
                            <div class="bonus-cell">
                                <SfDropDownList Readonly="IsInfoMode" TValue="string" TItem="string" Width="100%" Placeholder="Select special skill " DataSource="@WeaponQualityList" @bind-Value="@obj.FeatureName">
                                    <DropDownListFieldSettings Value="Id" Text="Id"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                        else if(obj.FeatureType == SD.FeatureOther)
                        {
                            <div class="bonus-double-cell">
                                <SfTextBox Readonly="IsInfoMode" Multiline=true Placeholder="Insert bonus description" @bind-Value="@obj.Description"></SfTextBox>

                            </div>
                        }
                        @if (@obj.FeatureName != null && @obj.FeatureType != SD.FeatureOther)
                        {
                            if (obj.FeatureType == SD.FeatureWeaponQuality)
                            {
                                <div class="bonus-cell">
                                    <SfNumericTextBox Readonly="IsInfoMode" Width="100%" TValue="int" @bind-Value="@obj.BonusValue"></SfNumericTextBox>
                                </div>
                            }
                            else
                            {
                                <div class="bonus-cell">
                                    <SfNumericTextBox Readonly="IsInfoMode" Width="100%" TValue="int" @bind-Value="@obj.BonusValue"></SfNumericTextBox>
                                </div>
                            }
                        }
                    </div>
                }
            }
            @if(IsInfoMode==false)
            {
                <div class="d-flex">
                    <button class="add-bonus-button" @onclick="OnAddBonusBtnClick"><i class="fa-solid fa-plus"></i></button>
                    <button class="add-bonus-button" @onclick="OnDeleteBonusBtnClick"><i class="fa-solid fa-minus"></i></button>
                </div>
            }
        <label class="warnign-message">@ErrorMessage</label>
                    
        </div> 
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OnCancelBtnClick">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="OnSaveTraitBtnClick">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public TraitDTO NewTrait { get; set; }
    [Parameter] public bool IsEditMode { get; set; } = false;
    [Parameter] public bool IsInfoMode { get; set; } = false;
    [Parameter] public bool IsWeaponQualityMode { get; set; } = false;
    [Parameter] public AllParamsModel AllParams { get; set; }

    public string HeaderName { get; set; } = "";
    private string IconSource = "";
    public UserInfo? UserInfo { get; set; }


    private bool IsNotWeaponQuality()
    {
        return !IsWeaponQualityMode;
    }

    private List<string> WeaponQualityList = new List<string>();

    private string ErrorMessage { get; set; } = string.Empty;

    private List<string> FeatureData = new List<string>
    {
        SD.FeatureAttribute,
        SD.FeatureBaseSkill,
        SD.FeatureSpecialSkill,
        SD.FeatureWeaponQuality,
        SD.FeatureOther
    };

    private void OnSaveTraitBtnClick()
    {

        if (IsWeaponQualityMode)
        {
            NewTrait.Name = SD.WeaponParametersDescr;
            NewTrait.Descr = "";
        }
        else
        {

            if (string.IsNullOrEmpty(NewTrait.Name) || string.IsNullOrEmpty(NewTrait.Descr))
            {
                ErrorMessage = $"Create name and description of trait";
                return;
            }
            if (IsEditMode == false && NewTrait.TraitType == SD.TraitType_Character && AllParams.TraitsCharacter.Where(t => t.Name == NewTrait.Name).Count() > 0)
            {
                ErrorMessage = $"That trait name already exists";
                return;
            }
        }
        foreach (var bonus in NewTrait.Bonuses)
        {
            if (bonus.BonusValue == 0 && bonus.Description == string.Empty)
            {
                ErrorMessage = $"Please fill all input fiels in bonus";
                return;
            }
        }
        if (!NewTrait.Bonuses.GroupBy(x => x.FeatureName).All(g => g.Count() == 1))
        {
            ErrorMessage = $"Bonuses cannot relate to the same feature more than once";
            return;
        }
        ErrorMessage = string.Empty;

        NewTrait.TraitType = NewTrait.TraitType;
        MudDialog.Close(DialogResult.Ok(NewTrait));
        string message = NewTrait.TraitLabel;
        message  += IsEditMode ?  "edited" : "added";
        Snackbar.Add(message, Severity.Success);
    }
    private void OnCancelBtnClick()
    {
        MudDialog.Cancel();
    }

    private void OnAddBonusBtnClick()
    {
        ErrorMessage = string.Empty;
        if (NewTrait.Bonuses == null)
            NewTrait.Bonuses = new List<BonusDTO>();
        var bonus = new BonusDTO();
        bonus.Index = NewTrait.Bonuses.Count() + 1;
        if(IsWeaponQualityMode == true)
        {
            bonus.FeatureType = SD.FeatureWeaponQuality;
        }
        NewTrait.Bonuses.Add(bonus);
    }

    private void OnDeleteBonusBtnClick()
    {
        ErrorMessage = string.Empty;
        if (NewTrait.Bonuses is not null && NewTrait.Bonuses.Count() > 0)
        {
            NewTrait.Bonuses.Remove(NewTrait.Bonuses.Last());
        }
    }

    protected override async Task OnInitializedAsync()
    {
        UserInfo = await _userService.GetUserInfo();
        ErrorMessage = string.Empty;
        foreach(var quality in SD.WeaponQuality.All)
        {
            WeaponQualityList.Add(quality);
        }
        if (IsWeaponQualityMode)
        {
            HeaderName = IsEditMode ? "Edit weapon properties" : "Add weapon properties";

            FeatureData = new List<string>
            {
                SD.FeatureWeaponQuality
            };
            IconSource = MyIcon.Attack;
        }
        else
        {
            FeatureData = new List<string>
            {
                SD.FeatureAttribute,
                SD.FeatureBaseSkill,
                SD.FeatureSpecialSkill,
                SD.FeatureWeaponQuality,
                SD.FeatureOther
            };

            HeaderName = IsEditMode ? "Edit " : "Add " + NewTrait.TraitLabel;

            switch (NewTrait.TraitType)
            {
                case SD.TraitType_Gear: IconSource = MyIcon.Anvil; break;
                case SD.TraitType_Profession:
                case SD.TraitType_Race:
                case SD.TraitType_Character: IconSource = MyIcon.Ability; break;
                case SD.TraitType_Temporary: IconSource = MyIcon.Stunned; break;

            }
        }
        MudDialog.StateHasChanged();
    }
}
