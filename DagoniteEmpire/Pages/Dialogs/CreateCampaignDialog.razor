@inject ISnackbar Snackbar
@inject ICharacterRepository _characterRepository

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <img src="@MyIcon.Bookmark" width="40px" height="40px" class="pr-2" />
            @Title Campaign
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@NewCampaign.Name" Label="Campaign name" />
        <MudTextField @bind-Value="@NewCampaign.Description" Label="Description" Lines="5" />
        <MudText Typo="Typo.caption">Choose player characters for campaign</MudText>
        <MudChipSet @bind-SelectedChips="SelectedCharacters" MultiSelection="true" Filter="true">
            @foreach (var adv in AllCharacters)
            {
                <MudChip Text="@adv.NPCName" Default="NewCampaign.Characters.Any(u=>u.Id == adv.Id)"></MudChip>
            }
            
        </MudChipSet>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="CreateCampaign">@Title</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public CampaignDTO NewCampaign { get; set; }
    [Parameter] public bool IsEdit { get; set; } = false;
    MudChip[] SelectedCharacters { get; set; }
    private List<CharacterDTO> Characters { get; set; } = new List<CharacterDTO>();
    private IEnumerable<CharacterDTO> AllCharacters { get; set; } = new List<CharacterDTO>();
    private string Title { get; set; } = "Create";

    protected override async Task OnInitializedAsync()
    {
        AllCharacters = await _characterRepository.GetAll();
        if (IsEdit)
            Title = "Edit";
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void CreateCampaign()
    {
        if (SelectedCharacters is not null)
        {            
            foreach (var charac in SelectedCharacters)
            {
                var adventurer = AllCharacters.FirstOrDefault(c => c.NPCName == charac.Text);
                if (adventurer is not null && !Characters.Any(c => c.NPCName == charac.Text))
                    Characters.Add(adventurer);
            }
        }
        NewCampaign.Characters = Characters;
        NewCampaign.CreatedDate = DateTime.Now;
        MudDialog.Close(DialogResult.Ok(NewCampaign));
        //In a real world scenario this bool would probably be a service to delete the item from api/database
        if (IsEdit)
          Snackbar.Add("Campaign Edited", Severity.Success);
        else
          Snackbar.Add("Campaign created", Severity.Success);

    }
}
