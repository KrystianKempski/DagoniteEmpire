@inject ISnackbar Snackbar
@inject ICharacterRepository _characterRepository

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <img src="@MyIcon.Bookmark" width="40px" height="40px" class="pr-2" />
            @Title Campaign
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@NewCampaign.Name" Label="Campaign name" />
        <MudTextField @bind-Value="@NewCampaign.Description" Label="Description" Lines="5" />
        <MudText Typo="Typo.caption">Choose player characters for campaign</MudText>
        <MudChipSet T="CharacterDTO" @bind-SelectedValues="SelectedCharacters" CheckMark SelectionMode="MudBlazor.SelectionMode.MultiSelection">
            @if(true)
            {
                int index =0;
                @foreach (var adv in AllCharacters.OrderBy(c=>c.Id))
                {
                    IncludedList.Add(false);
                    <MudChip @bind-Selected="IncludedList[index]" Text="@adv.NPCName" Value="@adv"></MudChip>
                    index++;
                }
            }            
        </MudChipSet>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="CreateCampaign">@Title</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public CampaignDTO NewCampaign { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; } = false;
    private IReadOnlyCollection<CharacterDTO> SelectedCharacters = new List<CharacterDTO>();
    private List<CharacterDTO> Characters { get; set; } = new List<CharacterDTO>();
    private IEnumerable<CharacterDTO> AllCharacters { get; set; } = new List<CharacterDTO>();
    private string Title { get; set; } = "Create";
    private List<bool> IncludedList = new List<bool>();
    protected override async Task OnInitializedAsync()
    {
        AllCharacters = await _characterRepository.GetAll();

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return; 

        if (IsEdit)
        {
            Title = "Edit";
            int index = 0;
            foreach (var character in AllCharacters.OrderBy(c => c.Id))
            {
                if (NewCampaign.Characters.FirstOrDefault(c => c.Id == character.Id) is not null)
                {
                    IncludedList[index] = true;
                }
                index++;
            }
        }
        StateHasChanged();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void CreateCampaign()
    {
        if (SelectedCharacters is not null)
        {            
            foreach (var charac in SelectedCharacters)
            {
                Characters.Add(charac);
            }
        }
        NewCampaign.Characters = Characters;
        NewCampaign.CreatedDate = DateTime.Now;
        MudDialog.Close(DialogResult.Ok(NewCampaign));
        if (IsEdit)
          Snackbar.Add("Campaign Edited", Severity.Success);
        else
          Snackbar.Add("Campaign created", Severity.Success);

    }
}
