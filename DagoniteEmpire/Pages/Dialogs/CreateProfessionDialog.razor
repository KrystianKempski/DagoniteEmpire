@using DA_DataAccess.CharacterClasses
@inject IJSRuntime _jsruntime
@inject IUserService _userService
<div class="race">
    <SfDialog Width="80%" Height="80%" @bind-Visible="@_createProfession.IsVisible" IsModal="true" AllowDragging="true" CloseOnEscape="false" EnableResize="true">
        <DialogEvents Opened="@DialogOpen"></DialogEvents>
        <DialogTemplates>
            <Header>Specify class</Header>
            <Content>       
                 <div class="main-table">
                     @if (IsLoading)
                    {
                        <LoadingPage></LoadingPage>
                    }
                    else
                    {
                        <label class="warnign-message">@ErrorMessage</label>
                        <div class="wide-screen-table">
                            <div class="d-flex ">
                                <div class="d-flex flex-column px-1 flex-grow-1">
                                    <label class="class-section py-1">Class name</label>
                                    <SfTextBox Placeholder="Insert class name" @bind-Value="@_createProfession.ProfessionDTO.Name"></SfTextBox>
                                </div>
                                <div class="d-flex flex-column px-1">
                                    <label class="class-section py-1">Related attribute</label>
                                    <InputSelect style="width: 150px;height: 32px;border: 1px solid RGB(206 212 218); border-radius: 4px; padding: 0px 4px 0px 4px;"
                                                 ValueExpression="@(()=>_createProfession.ProfessionDTO.RelatedAttributeName)"
                                                 Value="@_createProfession.ProfessionDTO.RelatedAttributeName"
                                                 ValueChanged="@((string value) => ChangeRelatedAttribute(value))">
                                        <option value="0" selected disabled>--Select--</option>
                                        @foreach(var attr in SD.Attributes.All)
                                        {
                                            <option value="@attr"> @attr</option>
                                        }
                                    </InputSelect>
                                </div>
                                @if (UserInfo?.IsAdminOrMG == true)
                                {
                                    <div class="d-flex flex-column px-1">
                                        <label class="column-section py-1">Class Level</label>
                                        <SfNumericTextBox Width="100px"  ShowSpinButton="false" @bind-Value="@_createProfession.ProfessionDTO.ClassLevel" OnChange="ChangeProfLevel"></SfNumericTextBox>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex flex-column px-1">
                                        <label class="column-section py-1">Class Level</label>
                                        <label class="prof-variables">@_createProfession.ProfessionDTO.ClassLevel</label>
                                    </div>
                                }

                                <div class="d-flex flex-column px-1">
                                    <label class="column-section py-1">Skill roll</label>
                                    <label class="prof-variables">@_createProfession.ProfessionDTO.ProfessionSkillRoll</label>
                                </div>
                                <div class="d-flex flex-column px-1">
                                    <label class="column-section py-1">Focus points</label>
                                     <label class="prof-variables">@_createProfession.ProfessionDTO.MaxFocusPoints</label>
                                </div>
                                @if (UserInfo?.IsAdminOrMG == true)
                                {
                                    <div class="d-flex flex-column px-1">
                                        <label class="class-section py-1">Approve</label>
                                        <div class="justify-content-center mx-auto my-auto">
                                            <SfCheckBox @bind-Checked="_createProfession.ProfessionDTO.IsApproved"></SfCheckBox>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="short-screen-table">
                            <div class="d-flex flex-column ">
                                <div class="d-flex" >
                                    <div class="d-flex flex-column px-1 flex-grow-1">
                                        <label class="class-section py-1">Class name</label>
                                        <SfTextBox Placeholder="Insert class name" @bind-Value="@_createProfession.ProfessionDTO.Name"></SfTextBox>
                                    </div>
                                    @if (UserInfo?.IsAdminOrMG == true)
                                    {
                                        <div class="d-flex flex-column px-1">
                                            <label class="class-section py-1">Approve</label>
                                            <div class="justify-content-center mx-auto my-auto">
                                                <SfCheckBox @bind-Checked="_createProfession.ProfessionDTO.IsApproved"></SfCheckBox>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="d-flex flex-column px-1">
                                    <label class="class-section py-1">Related attribute</label>
                                    <InputSelect style="height: 32px;border: 1px solid RGB(206 212 218); border-radius: 4px; padding: 0px 4px 0px 4px;"
                                                 ValueExpression="@(()=>_createProfession.ProfessionDTO.RelatedAttributeName)"
                                                 Value="@_createProfession.ProfessionDTO.RelatedAttributeName"
                                                 ValueChanged="@((string value) => ChangeRelatedAttribute(value))">
                                        
                                        <option value="0" selected disabled>--Select--</option>
                                        @foreach (var attr in SD.Attributes.All)
                                        {
                                            <option value="@attr"> @attr</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="d-flex">
                                    @if (UserInfo?.IsAdminOrMG == true)
                                    {
                                        <div class="d-flex flex-column px-1 variables">
                                            <label class="column-section py-1">Class Level</label>
                                            <SfNumericTextBox  ShowSpinButton="false" @bind-Value="@_createProfession.ProfessionDTO.ClassLevel" OnChange="ChangeProfLevel"></SfNumericTextBox>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="d-flex flex-column px-1 variables">
                                            <label class="column-section py-1">Class Level</label>
                                            <label class="prof-variables">@_createProfession.ProfessionDTO.ClassLevel</label>
                                        </div>
                                    }

                                    <div class="d-flex flex-column px-1 variables">
                                        <label class="column-section py-1">Skill roll</label>
                                        <label class="prof-variables">@_createProfession.ProfessionDTO.ProfessionSkillRoll</label>
                                    </div>
                                    <div class="d-flex flex-column px-1 variables">
                                        <label class="column-section py-1">Focus points</label>
                                        <label class="prof-variables">@_createProfession.ProfessionDTO.MaxFocusPoints</label>
                                    </div>
                                 </div>
                                
                            </div>

                        </div>
                        <div class="d-flex flex-column flex-grow-1">
                            <label class="class-section">Class description</label>
                            <SfRichTextEditor Height="300px" @ref="DescrEdit" @bind-Value="@_createProfession.ProfessionDTO.Description" ShowTooltip="true">
                                <RichTextEditorToolbarSettings Items="@Tools" Type="ToolbarType.MultiRow" />
                            </SfRichTextEditor>
                        </div>
                        @*  ACTIVE SKILLS  *@
                        <label class="class-section">Active class skills</label>

                        <div class="wide-screen-table">

                            <table class="table align-middle">
                                <thead>
                                    <tr>
                                        <th scope="col" class="level-row text-center">Level</th>
                                        <th scope="col" class="name-row text-center">Name</th>
                                        <th scope="col" class="descr-row text-center">Description</th>
                                        <th scope="col" class="number-row text-center">DC</th>
                                        <th scope="col" class="number-row text-center">Cost</th>
                                        <th scope="col" class="number-row text-center"> Range</th>
                                    </tr>
                                </thead>
                                <tbody>
                                @foreach (var skill in _createProfession.ProfessionDTO.Traits.Where(t=>t.IsActiveSkill==true))
                                {
                                    <tr>
                                        @if (skill.Index%2==0){
                                            <td rowspan="2"> <label class="short-row">@skill.Level</label> </td>
                                        }
                                        <td> <div class="name-cell"> <SfTextBox Placeholder="Insert skill name" @bind-Value="@skill.Name"></SfTextBox> </div> </td>
                                        <td>
                                            <div class="bonus-double-cell">
                                                <SfTextBox ID="@skill.Index.ToString()" OnChange="@(()=>ChangeDescription(skill.Index))" Multiline=true Placeholder="Insert skill description" @bind-Value="@skill.Descr">
                                                </SfTextBox>
                                            </div>
                                        </td>
                                        <td><div class="short-row"><SfNumericTextBox ShowSpinButton="false" @bind-Value="@skill.DC"></SfNumericTextBox></div></td>
                                        <td><div class="short-row"><SfNumericTextBox ShowSpinButton="false" @bind-Value="@skill.Cost"></SfNumericTextBox></div></td>
                                        <td><div class="short-row"><SfTextBox  @bind-Value="@skill.Range"></SfTextBox></div></td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                        <div class="short-screen-table">

                            <table class="table align-middle">
                                <thead>
                                    <tr>
                                        <th scope="col" class="level-row text-center">Level</th>
                                        <th scope="col" class="name-row-short text-center">Name</th>
                                        <th scope="col" class="number-row text-center">DC</th>
                                        <th scope="col" class="number-row text-center">Cost</th>
                                        <th scope="col" class="number-row text-center"> Range</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var skill in _createProfession.ProfessionDTO.Traits.Where(t => t.IsActiveSkill == true))
                                    {
                                        <tr>
                                            @if (skill.Index % 2 == 0)
                                            {
                                                <td rowspan="4"> <label class="short-row">@skill.Level</label> </td>
                                            }
                                            <td> <div class="name-cell"> <SfTextBox Placeholder="Insert skill name" @bind-Value="@skill.Name"></SfTextBox> </div> </td>
                                           
                                            <td><div class="short-row"><SfNumericTextBox ShowSpinButton="false" @bind-Value="@skill.DC"></SfNumericTextBox></div></td>
                                            <td><div class="short-row"><SfNumericTextBox Format="" ShowSpinButton="false" @bind-Value="@skill.Cost"></SfNumericTextBox></div></td>
                                            <td><div class="short-row"><SfTextBox @bind-Value="@skill.Range"></SfTextBox></div></td>
                                        </tr>
                                        <tr>
                                            <td colspan="4">
                                                <SfTextBox ID="@skill.Index.ToString()" OnChange="@(()=>ChangeDescription(skill.Index))" Multiline=true Placeholder="Insert skill description" @bind-Value="@skill.Descr">
                                                </SfTextBox>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                       @*  PASSIVE SKILLS  *@
                        <label class="class-section">Passive class skills</label>

                        <div class="wide-screen-table">

                            <table class="table align-middle">
                                <thead>
                                    <tr>
                                        <th scope="col" class="level-row text-center">Level</th>
                                        <th scope="col" class="name-row text-center">Name</th>
                                        <th scope="col" class="descr-row text-center">Description</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var skill in _createProfession.ProfessionDTO.Traits.Where(t=>t.IsActiveSkill==false))
                                    {
                                        <tr>
                                            <td> <label class="short-row">@skill.Level</label> </td>
                                            <td> <div class="name-cell"> <SfTextBox Placeholder="Insert skill name" @bind-Value="@skill.Name"></SfTextBox> </div> </td>
                                            <td>
                                                <div class="bonus-double-cell">
                                                    <SfTextBox ID="@skill.Index.ToString()" OnChange="@(()=>ChangeDescription(skill.Index))" Multiline=true Placeholder="Insert skill description" @bind-Value="@skill.Descr">
                                                    </SfTextBox>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="short-screen-table">

                            <table class="table align-middle">
                                <thead>
                                    <tr>
                                        <th scope="col" class="number-row text-center">Level</th>
                                        <th scope="col" class="name-row-short text-center">Name</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var skill in _createProfession.ProfessionDTO.Traits.Where(t => t.IsActiveSkill == false))
                                    {
                                        <tr>
                                            <td rowspan="2"> <label class="short-row">@skill.Level</label> </td>
                                            <td> <div class="name-cell"> <SfTextBox Placeholder="Insert skill name" @bind-Value="@skill.Name"></SfTextBox> </div> </td>
                                        </tr>
                                        <tr>
                                            <td colspan="2">
                                                <SfTextBox ID="@skill.Index.ToString()" OnChange="@(()=>ChangeDescription(skill.Index))" Multiline=true Placeholder="Insert skill description" @bind-Value="@skill.Descr">
                                                </SfTextBox>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <label class="warnign-message">@ErrorMessage</label>
                    } 
                </div>  
                
            </Content>
        </DialogTemplates>
        <DialogButtons>

            <DialogButton OnClick="@OnCancelBtnClick" Content="Cancel">
            </DialogButton>
            <DialogButton OnClick="@OnSaveProfBtnClick" Content="Save" IsPrimary="true">
            </DialogButton>
        </DialogButtons>
    </SfDialog>

</div>

<style>

    @@media (max-width: 800px) {
        .e-dialog.e-popup{
            width: 100% !important;
            height: 100% !important;
        }
    }
</style>

@code {
    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }

    public UserInfo? UserInfo { get; set; }


    private SfRichTextEditor DescrEdit = new SfRichTextEditor();

    private CreateProfessionModel _createProfession;
    [Parameter]
    public CreateProfessionModel CreateProfession
    {
        get => _createProfession;
        set{
            if (_createProfession == value) return;
            _createProfession = value;
            if (_createProfession.ProfessionDTO != null)
            {
                _createProfession.ProfessionDTO.CalculateClassParams(AllParams.Attributes.GetAll());
            }
            IsLoading = false;
            StateHasChanged();
            CreateProfessionChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<CreateProfessionModel> CreateProfessionChanged { get; set; }

    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsLoading { get; set; }= true;

    public IEditorSettings EditParams = new NumericEditCellParams
    {
        Params = new NumericTextBoxModel<object>() { ShowClearButton = true, ShowSpinButton = false }
    };

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };
    public void ChangeDescription(int args)
    {
        //pass ID(column name) of multiline textbox
        _jsruntime.InvokeVoidAsync("ResizeTextArea", $"{args}");
    }
    private async Task OnSaveProfBtnClick()
    {

        if (string.IsNullOrEmpty(CreateProfession.ProfessionDTO.Name) || string.IsNullOrEmpty(CreateProfession.ProfessionDTO.Description))
        {
            ErrorMessage = $"Create name and description of class";
            return;
        }
        if (string.IsNullOrEmpty(CreateProfession.ProfessionDTO.RelatedAttributeName))
        {
            ErrorMessage = $"Choose attribute related to class";
            return;
        }
        CreateProfession.ProfessionDTO.CurrentFocusPoints = CreateProfession.ProfessionDTO.MaxFocusPoints;
        ErrorMessage = string.Empty;
        CreateProfession.IsVisible = false;

        await CreateProfessionChanged.InvokeAsync(CreateProfession);
    }
    private void OnCancelBtnClick()
    {
        CreateProfession.IsVisible = false;
    }
    private void DialogOpen()
    { 
        this.DescrEdit.RefreshUIAsync();
        ErrorMessage = string.Empty;
        StateHasChanged();
    }

    private void ChangeProfLevel()
    {
        CreateProfession.ProfessionDTO.CalculateClassParams(AllParams.Attributes.GetAll());
        StateHasChanged();
    }

    private void ChangeRelatedAttribute(string attrName)
    {
        try
        {
            if (attrName != null && attrName != "0")
            {
                CreateProfession.ProfessionDTO.RelatedAttributeName = attrName;
                var attr = AllParams.Attributes.Get(attrName);
                if (attr == null) return;
                CreateProfession.ProfessionDTO.AddPropertyListener(attr);

                CreateProfession.ProfessionDTO.CalculateClassParams(AllParams.Attributes.GetAll());
                StateHasChanged();
                return;
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        UserInfo = await _userService.GetUserInfo();
    }

}
