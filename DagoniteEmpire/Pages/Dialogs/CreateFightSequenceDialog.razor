@inject IFileUpload _fileUpload;
@inject ISnackbar Snackbar
@inject IMobRepository _mobRepository
@inject ICampaignRepository _campaignRepository
@inject IChapterRepository _chapterRepository

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@MyIcon.Helm" Color="Color.Primary" />
            Fight sequence
        </MudText>
    </TitleContent>
    <DialogContent>


        @if (FightSequence is not null){

        <MudGrid>
            <MudItem xs="6">

                @* ATTACKER *@
                <MudPaper Elevation="1" Class="pa-2">

                        @* Select Attacker *@
                    <MudSelect Value="SelectedAttacker" T="string" Required="true" ValueChanged="SelectAttacker" Label="Select Attacker">
                        @foreach(var attacker in CharacterAllParams) {
                            @if (attacker is not null && attacker.Character.NPCName != SelectedDefender)
                            {                            
                                <MudSelectItem Value="attacker.Character.NPCName">@attacker.Character.NPCName</MudSelectItem>
                            }
                        }
                        @foreach (var attacker in Mobs)
                        {
                            @if (attacker is not null && attacker.Name != SelectedDefender)
                            {
                                <MudSelectItem Value="attacker.Name">@attacker.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>                
                    @* Select action type *@
                    <MudSelect T="string" Required="true" @bind-Value="@FightSequence.AttackAction" Label="Select action type">
                        @foreach (var defType in SD.DefenceType.All)
                        {
                            <MudSelectItem Value="defType">@defType</MudSelectItem>
                        }
                    </MudSelect>
                    @* Attacker states *@
                    @if ( string.IsNullOrEmpty(SelectedAttacker) == false)
                    {
                        <MudText Typo="Typo.button">States</MudText>
                        @if (FightSequence.AttackerStates is not null && FightSequence.AttackerStates.Any())
                        {                        
                            <MudGrid>
                                @foreach(var state in FightSequence.AttackerStates)
                                {
                                    <MudItem>
                                        <MudText>@state.Name, </MudText>                        
                                    </MudItem>
                                }
                            </MudGrid>
                        }
                    }
                    @* Other bonuses. penalties states *@
                </MudPaper>
            </MudItem>
            @* DEFENDER *@
            <MudItem xs="6">
                <MudPaper Elevation="1" Class="pa-2">
                    @* Select Defender *@
                    <MudSelect Value="SelectedDefender" T="string" Required="true" ValueChanged="SelectDefender" Label="Select Defender">
                        @foreach (var defender in CharacterAllParams)
                        {
                            @if (defender.Character.NPCName != SelectedAttacker)
                            {
                                <MudSelectItem Value="defender.Character.NPCName">@defender.Character.NPCName</MudSelectItem>
                            }
                        }
                        @foreach (var defender in Mobs)
                        {
                            @if (defender.Name != SelectedAttacker)
                            {
                                <MudSelectItem Value="defender.Name">@defender.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    @* Select defence type *@
                    <MudButton OnClick="SelectBestDefence">Select best</MudButton>
                    <MudSelect T="string" Required="true" @bind-Value="@FightSequence.DefenceType" Label="Select defence type">
                        @foreach (var defType in SD.DefenceType.All)
                        {
                            <MudSelectItem Value="defType">@defType</MudSelectItem>
                        }
                    </MudSelect>
                    @* Other bonuses. penalties states *@
            
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12">
                <MudButton Class="p-2 m-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="MakeAttackRoll">Roll!</MudButton>
            </MudItem>

            <MudItem xs="12">
                <SfRichTextEditor Width="100%" Height="400px" @bind-Value="@FightSequence.ResultStringMG" ShowTooltip="true">
                    <RichTextEditorToolbarSettings Items="@Tools" />
                </SfRichTextEditor>
            </MudItem>
        </MudGrid>
        }

             

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="SaveSequenceBtn">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    [Parameter] public ICollection<AllParamsModel?> CharacterAllParams { get; set; } = new List<AllParamsModel?>();
    [Parameter] public IEnumerable<MobDTO> Mobs { get; set; } = new List<MobDTO>();
    [Parameter] public int CampaignId { get; set; } = 0;
    [Parameter] public int ChapterId { get; set; } = 0;
    [Parameter] public DateModel Date { get; set; } = new(1,1);
    private string SelectedAttacker = string.Empty;
    private string SelectedDefender= string.Empty;

    FightSequenceModel? FightSequence { get; set; } = null;
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {

        FightSequence = new FightSequenceModel(Date);


    }

    private void SelectAttacker(string attackerName)
    {
        var characterParams = CharacterAllParams.FirstOrDefault(p => p.Character.NPCName == attackerName);
        if (characterParams is not null)
        {
            FightSequence.AddAttacker(characterParams);
            return;
        }
        var mob = Mobs.FirstOrDefault(m=>m.Name == attackerName);
        if(mob is not null)
        {
            FightSequence.AddAttacker(mob);
        }
    }
    private void SelectDefender(string defenderName)
    {
        var characterParams = CharacterAllParams.FirstOrDefault(p => p.Character.NPCName == defenderName);
        if (characterParams is not null)
        {
            FightSequence.AddDefender(characterParams);
            return;
        }
        var mob = Mobs.FirstOrDefault(m => m.Name == defenderName);
        if (mob is not null)
        {
            FightSequence.AddDefender(mob);
        }
    }

    private void SelectBestDefence()
    {

    }

    private void MakeAttackRoll()
    {
        FightSequence.CalculateAndWriteAttack();
    }


    private void SaveSequenceBtn()
    {
        // if (IsEdit)
        // {
        //     _mobRepository.Update(NewMob);
        // }
        // else
        // {
        //     _mobRepository.Create(NewMob);
        // }

        // MudDialog.Close(DialogResult.Ok(NewMob));
        // if (IsEdit)
        //     Snackbar.Add("Mob edited", Severity.Success);
        // else
        //     Snackbar.Add("Mob created", Severity.Success);
    }


}
