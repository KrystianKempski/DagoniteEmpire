@using DA_DataAccess.CharacterClasses
@using DA_Models
@inject IFileUpload _fileUpload;
@inject ISnackbar Snackbar
@inject IMobRepository _mobRepository
@inject ICampaignRepository _campaignRepository
@inject IChapterRepository _chapterRepository
@inject ITraitRepository<TraitCharacterDTO> _traitCharacterRepository
@inject IWoundRepository _woundsRepository

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <img src="@MyIcon.Attack" width="40x" height="40px" />
            Fight sequence
        </MudText>
    </TitleContent>
    <DialogContent>
    @if (FightSequence is not null)
    {
        <MudGrid>
            <MudItem xs="6">
                @* ATTACKER *@
                <MudPaper Elevation="1" Class="pa-2 h-100">

                        @* Select Attacker *@
                    <MudSelect Value="SelectedAttacker" T="string" Required="true" ValueChanged="SelectAttacker" Label="Select Attacker">
                            <MudSelectItem Value="string.Empty">@string.Empty</MudSelectItem>
                        @foreach(var attacker in CharacterAllParams) {
                            @if (attacker is not null && attacker.Character.NPCName != SelectedDefender)
                            {                            
                                <MudSelectItem Value="attacker.Character.NPCName">@attacker.Character.NPCName</MudSelectItem>
                            }
                        }
                        @foreach (var attacker in Mobs)
                        {
                            @if (attacker is not null && attacker.Name != SelectedDefender)
                            {
                                <MudSelectItem Value="attacker.Name">@attacker.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>                
                    @* Select action type *@
                    <MudSelect T="string" Required="true" @bind-Value="@FightSequence.AttackAction" Label="Select action type">
                        @foreach (var defType in SD.AttackAction.All)
                        {
                            if (defType == SD.AttackAction.Targeted) continue;
                            <MudSelectItem Value="defType">@defType</MudSelectItem>
                        }
                    </MudSelect>
                    @* Select if targeted and  location *@
                    <MudStack Spacing="1" Row>
                        <MudCheckBox @bind-Value="@IsTargeted" Label="Aimed?" ></MudCheckBox>
                        <MudSelect T="string" Disabled="@(IsTargeted == false)" Required="true" @bind-Value="@FightSequence.AttackLocation" Label="Select location">
                                @foreach (var location in Wounds.Location.All)
                            {
                                <MudSelectItem Value="location">@location</MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>                    
                    <MudCheckBox @bind-Value="@IsFlanking" Label="Flanking?"></MudCheckBox>                    
                    @* Attacker states *@
                        @if (FightSequence.Attacker.States is not null && FightSequence.Attacker.States.Any())
                        {
                        <MudText Typo="Typo.button">States</MudText>                       
                        <MudGrid>
                            @foreach(var state in FightSequence.Attacker.States)
                            {
                                <MudItem>
                                    <MudText>@state.Name, </MudText>                        
                                </MudItem>
                            }
                        </MudGrid>                        
                    }
                    @* Other bonuses. penalties states *@
                </MudPaper>
            </MudItem>
            @* DEFENDER *@
            <MudItem xs="6">
                    <MudPaper Elevation="1" Class="pa-2 h-100">
                    @* Select Defender *@
                    <MudSelect Value="SelectedDefender" T="string" Required="true" ValueChanged="SelectDefender" Label="Select Defender">
                            <MudSelectItem Value="string.Empty">@string.Empty</MudSelectItem>
                        @foreach (var defender in CharacterAllParams)
                        {
                            @if (defender.Character.NPCName != SelectedAttacker)
                            {
                                <MudSelectItem Value="defender.Character.NPCName">@defender.Character.NPCName</MudSelectItem>
                            }
                        }                            
                        @foreach (var defender in Mobs)
                        {
                            @if (defender.Name != SelectedAttacker)
                            {
                                <MudSelectItem Value="defender.Name">@defender.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    @* Select defence type *@
                    <MudStack Class="p-0 m-0" Spacing="1" Row>

                    <MudButton OnClick="SelectBestDefence">Select best</MudButton>
                    <MudSelect T="string" Required="true" @bind-Value="@FightSequence.DefenceType" Label="Select defence type">
                        @if(string.IsNullOrEmpty(SelectedDefender) == false)
                        {
                            @foreach (var defType in SD.DefenceType.All)
                            {
                                if (defType == SD.DefenceType.Shield && (FightSequence?.Defender.Props?.ShieldUsed is null || FightSequence.IsShieldDefenceAllowed == false)) continue;
                                if (defType == SD.DefenceType.Armor && FightSequence?.Defender.Props?.ArmorUsed is null) continue;
                                if (defType == SD.DefenceType.Parry && FightSequence?.IsParryDefenceAllowed == false) continue;
                                <MudSelectItem Value="defType">@defType</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    </MudStack>
                        <MudStack Spacing="1" Row>
                            <MudCheckBox @bind-Value="@IsSurrounded" Label="Surrounded?"></MudCheckBox>
                            <MudNumericField Disabled="@(IsSurrounded == false)" @bind-Value="@SurroundedValue" Label="How many?"> </MudNumericField>
                        </MudStack>
                    @* Defender states *@
                    @if (FightSequence.Defender.States is not null && FightSequence.Defender.States.Any())
                    {
                        <MudText Typo="Typo.button">States</MudText>
                        <MudGrid>
                            @foreach (var state in FightSequence.Defender.States)
                            {
                                <MudItem>
                                    <MudText>@state.Name, </MudText>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    @* Other bonuses. penalties states *@
            
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12">
                <MudButton Class="p-2 m-2 w-100 justify-content-center"  Variant="Variant.Filled" Color="Color.Primary" OnClick="MakeAttackRoll">Roll!</MudButton>
            </MudItem>

            <MudItem xs="12">
                <SfRichTextEditor Width="100%" Height="400px" @bind-Value="@FightSequence.ResultStringMG.AllText" ShowTooltip="true">
                    <RichTextEditorToolbarSettings Items="@Tools" />
                </SfRichTextEditor>
            </MudItem>
        </MudGrid>
    }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="SaveSequenceBtn">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ICollection<AllParamsModel?> CharacterAllParams { get; set; } = new List<AllParamsModel?>();
    [Parameter] public IEnumerable<MobDTO> Mobs { get; set; } = new List<MobDTO>();
    [Parameter] public int CampaignId { get; set; } = 0;
    [Parameter] public int ChapterId { get; set; } = 0;
    [Parameter] public DateModel Date { get; set; } = new(1,1);

    private string SelectedAttacker = string.Empty;
    private string SelectedDefender= string.Empty;
    private bool IsReadyToRoll = false;
    private bool _isTargeted = false;
    private bool IsTargeted {
        get => _isTargeted;
        set
        {
            _isTargeted = value;
            if (_isTargeted == false && FightSequence is not null)
                FightSequence.AttackLocation = string.Empty;            

        }
    } 
    private bool _isFlanking = false;
    private bool IsFlanking 
    {
        get => _isFlanking;
        set
        {
            _isFlanking = value;
            if (FightSequence is null) return;
            if (_isFlanking == true)
            {
                var trait = StateSeeder.GetStateDTO(States.Names.Flanking, false, 1);
                FightSequence?.Attacker.States?.Add(trait);
                StateHasChanged();
            }
            else
            {
                var trait = FightSequence?.Attacker.States?.FirstOrDefault(u => u.Name == States.Names.Flanking);
                if (trait is not null)
                {
                    FightSequence?.Attacker.States?.Remove(trait);
                    StateHasChanged();
                }
            }
        }
    }
    private bool _isSurrounded = false;
    private bool IsSurrounded
    {
        get => _isSurrounded;
        set
        {
            _isSurrounded = value;
            if (FightSequence is null) return;
            if (_isSurrounded == true )
            {
                var trait = StateSeeder.GetStateDTO(States.Names.Surrounded, false, SurroundedValue);
                FightSequence?.Defender.States?.Add(trait);
                StateHasChanged();
            }
            else
            {
                var trait = FightSequence?.Defender.States?.FirstOrDefault(u => u.Name == States.Names.Surrounded);
                if(trait is not null)
                {
                    FightSequence?.Defender.States?.Remove(trait);
                    StateHasChanged();
                }
            }

        }
    }
    private int SurroundedValue = 2;

    private FightSequenceModel? FightSequence { get; set; } = null;
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        FightSequence = new FightSequenceModel(Date);
    }

    private void SelectAttacker(string attackerName)
    {
        SelectedAttacker = attackerName;
        var characterParams = CharacterAllParams.FirstOrDefault(p => p.Character.NPCName == attackerName);
        if (characterParams is not null)
        {
            FightSequence.Attacker =  FightSequenceModel.AddFighter(characterParams);
            return;
        }
        var mob = Mobs.FirstOrDefault(m=>m.Name == attackerName);
        if(mob is not null)
        {
            FightSequence.Defender =  FightSequenceModel.AddFighter(mob);
        }
    }
    private void SelectDefender(string defenderName)
    {
        SelectedDefender = defenderName;
        var characterParams = CharacterAllParams.FirstOrDefault(p => p.Character.NPCName == defenderName);
        if (characterParams is not null)
        {
            FightSequence.Defender = FightSequenceModel.AddFighter(characterParams);
            FightSequence.DefenceType = FightSequence.SelectBestDefence();
            return;
        }
        var mob = Mobs.FirstOrDefault(m => m.Name == defenderName);
        if (mob is not null)
        {
            FightSequence.Defender =  FightSequenceModel.AddFighter(mob);
            FightSequence.DefenceType = FightSequence.SelectBestDefence();
        }
    }

    private void SelectBestDefence()
    {
        if(FightSequence is not null)
            FightSequence.DefenceType = FightSequence.SelectBestDefence();
    }

    private void MakeAttackRoll()
    {
        if (SelectedAttacker == string.Empty || SelectedDefender == string.Empty || FightSequence is null || FightSequence.AttackAction == string.Empty ||
           (_isTargeted == true && FightSequence.AttackLocation == string.Empty) || FightSequence.DefenceType == string.Empty)
        {
            Snackbar.Add("Some component is missing", Severity.Warning);
            return;
        }

        if (IsSurrounded)
        {
            var trait = FightSequence?.Defender.States?.FirstOrDefault(u => u.Name == States.Names.Surrounded);
            if(trait is not null)
                trait.TraitValue = SurroundedValue;
        }
        FightSequence.CalculateAndWriteAttack();
    }

    private async void SaveSequenceBtn()
    {
        try
        {
            AllParamsModel? attackerChar = null;
            AllParamsModel? defenderChar = null;
            MobDTO? attackerMob = null;
            MobDTO? defenderMob = null;
            // find character or mob to modyfy
            foreach (var charParams in CharacterAllParams)
            {
                if (charParams is null) continue;
                if (charParams.Character.NPCName == SelectedAttacker)
                {
                    attackerChar = charParams;
                }
                if (charParams.Character.NPCName == SelectedDefender)
                {
                    defenderChar = charParams;
                }  
            }
            foreach(var mobs in Mobs)
            {
                if (mobs is null) continue;
                if (mobs.Name == SelectedAttacker)
                {
                    attackerMob = mobs;
                }
                if (mobs.Name == SelectedDefender)
                {
                    defenderMob = mobs;
                }
            }
            if (attackerChar is not null && string.IsNullOrEmpty(FightSequence?.Attacker.NewStates) == false)
            {
                await AddNewStates(FightSequence.Attacker.NewStates,attackerChar.Character.Id);
            }
            if (defenderChar is not null && FightSequence is not null)
            {
                foreach (var wound in FightSequence.NewWounds)
                {
                    wound.CharacterId = defenderChar.Character.Id;
                    await _woundsRepository.Create(wound);
                }
                if ( string.IsNullOrEmpty(FightSequence?.Defender.NewStates) == false)
                    await AddNewStates(FightSequence.Defender.NewStates,defenderChar.Character.Id);                
            }
            if (attackerMob is not null)
            {
                await _mobRepository.Update(attackerMob);
            }
            if (defenderMob is not null && FightSequence is not null)
            {
                defenderMob.CurrentWounds += Wounds.GetValueFromSeverity(FightSequence.WoundSeverity);
                defenderMob.States += FightSequence.Defender.NewStates;
                await _mobRepository.Update(defenderMob);
            }

            MudDialog.Close();
            Snackbar.Add("Fight resolved", Severity.Success);
        }
        catch(Exception ex)
        {
            Snackbar.Add("Error while saving", Severity.Error);
        }
    }

    private async Task AddNewStates(string stateString,int charId)
    {
        try
        {
            if (stateString == string.Empty) return;
            var statesArray = stateString.Split(", ");
            foreach (var state in statesArray)
            {
                if (state == string.Empty) continue;
                var stateArray = state.Split(":");
                string name = stateArray[0];
                int duration = Int32.Parse(stateArray[1]);
                if (name == string.Empty) continue;
                TraitCharacterDTO newState = StateSeeder.GetStateDTO(name, false, duration, charId);
                // delete same traits that already exist
                var allTraits = await _traitCharacterRepository.GetAll(charId);
                var existingTrait = allTraits.FirstOrDefault(t=>t.Name == name);
                if (existingTrait is not null)
                {
                    await _traitCharacterRepository.Delete(existingTrait.Id);
                }
                // add new one
                await _traitCharacterRepository.Create(newState);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error while adding state", Severity.Error);
        }
    }
}
