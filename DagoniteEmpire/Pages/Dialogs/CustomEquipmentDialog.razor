@inject AuthenticationStateProvider GetAuthenticationStateAsync
<div class="race">


    <SfDialog Width="80%" Height="80%" @bind-Visible="@CustomEquipmentComponent.IsVisible" IsModal="true" AllowDragging="true" CloseOnEscape="false" EnableResize="true">
        <DialogEvents Opened="@DialogOpen"></DialogEvents>
        <DialogTemplates>
            <Header>Create a new item</Header>
            <Content>
       
                 <div class="main-table">

                     @if (IsLoading)
                    {
                        <div class="text-center">
                            <img src="/images/loading.gif" width="60px">
                        </div>
                    }
                    else
                    {
                        <div class="wide-screen-table">
                            <div class="d-flex ">
                                <div class="d-flex flex-column flex-grow-1 pe-1">
                                    <label class="fw-bold py-1">Item name</label>
                                    <SfTextBox Placeholder="Insert item name" @bind-Value="@_customEquipmentComponent.EquipmentDTO.Name"></SfTextBox>
                                </div>
                                <div class="d-flex flex-column flex-grow-1 px-1">
                                    <label class="fw-bold py-1">Weight</label>
                                    <SfNumericTextBox Min=0 TValue="decimal" Format="C1" ShowSpinButton="false" @bind-Value="@_customEquipmentComponent.EquipmentDTO.Weight"></SfNumericTextBox>
                                </div>
                                <div class="d-flex flex-column flex-grow-1 px-1">
                                    <label class="fw-bold py-1">Price</label>
                                    <SfNumericTextBox Min=0 TValue="decimal" Format="C4" ShowSpinButton="false" @bind-Value="@_customEquipmentComponent.EquipmentDTO.Price"></SfNumericTextBox>
                                </div>
                                @if (AllParams.IsAdminOrMG)
                                {
                                    <div class="d-flex flex-column px-1">
                                        <label class="fw-bold py-1">Approve</label>
                                        <div class="justify-content-center mx-auto my-auto">
                                            <SfCheckBox @bind-Checked="_customEquipmentComponent.EquipmentDTO.IsApproved"></SfCheckBox>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="short-screen-table">

                            <div class="d-flex ">
                                <div class="d-flex flex-column flex-grow-1 pe-1">
                                    <label class="fw-bold py-1">Item name</label>
                                    <SfTextBox Placeholder="Insert item name" @bind-Value="@_customEquipmentComponent.EquipmentDTO.Name"></SfTextBox>
                                </div>
                            </div>
                            <div class="d-flex ">
                                <div class="d-flex flex-column flex-grow-1 px-1">
                                    <label class="fw-bold py-1">Weight</label>
                                    <SfNumericTextBox Min=0 TValue="decimal" Format="C1" ShowSpinButton="false" @bind-Value="@_customEquipmentComponent.EquipmentDTO.Weight"></SfNumericTextBox>
                                </div>
                                <div class="d-flex flex-column flex-grow-1 px-1">
                                    <label class="fw-bold py-1">Price</label>
                                    <SfNumericTextBox Min=0 TValue="decimal" Format="C4" ShowSpinButton="false" @bind-Value="@_customEquipmentComponent.EquipmentDTO.Price"></SfNumericTextBox>
                                </div>
                                @if (AllParams.IsAdminOrMG)
                                {
                                    <div class="d-flex flex-column px-1">
                                        <label class="fw-bold py-1">Approve</label>
                                        <div class="justify-content-center mx-auto my-auto">
                                            <SfCheckBox @bind-Checked="_customEquipmentComponent.EquipmentDTO.IsApproved"></SfCheckBox>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="d-flex flex-column flex-grow-1">
                            <label class="fw-bold  p-1">Item description</label>
                            <SfRichTextEditor Height="350px" @ref="DescrEdit" @bind-Value="@_customEquipmentComponent.EquipmentDTO.Description" ShowTooltip="true">
                                <RichTextEditorToolbarSettings Items="@Tools" Type="ToolbarType.MultiRow" />
                            </SfRichTextEditor>
                        </div>

                        <label class="fw-bold pt-4">Item traits</label>
                        @if (_customEquipmentComponent.EquipmentDTO.Traits != null)
                        {
                            <div class="traits">
                                <TraitsComponent @bind-Traits="@CustomEquipmentComponent.Traits" TraitType="@TraitType"></TraitsComponent>
                            </div>
                        }
                    <label class="warnign-message">@ErrorMessage</label>
                    } 
                    
                </div>  
                
            </Content>
        </DialogTemplates>
        <DialogButtons>

            <DialogButton OnClick="@OnCancelBtnClick" Content="Cancel">
            </DialogButton>
            <DialogButton OnClick="@OnSaveRaceBtnClick" Content="Save" IsPrimary="true">
            </DialogButton>
        </DialogButtons>
    </SfDialog>

</div>

<style>
    @@media (max-width: 400px) {
        .e-dialog.e-popup{
            width: 100% !important;
            height: 100% !important;
        }
    }
</style>

@code {
    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }
    private CustomEquipmentModel _customEquipmentComponent = new();
    [Parameter]
    public CustomEquipmentModel CustomEquipmentComponent
    {
        get => _customEquipmentComponent;
        set{
            if (_customEquipmentComponent == value) return;
            _customEquipmentComponent = value;
            if (_customEquipmentComponent.EquipmentDTO != null)
            {
                _customEquipmentComponent.EquipmentDTO.Traits = new List<TraitEquipmentDTO>();
                foreach (var trait in _customEquipmentComponent.Traits)
                {
                    _customEquipmentComponent.EquipmentDTO.Traits.Add(new TraitEquipmentDTO(trait, _customEquipmentComponent.EquipmentDTO));
                }
            }
            IsLoading = false;
            StateHasChanged();
            CustomEquipmentComponentChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<CustomEquipmentModel> CustomEquipmentComponentChanged { get; set; }
    private SfRichTextEditor DescrEdit = new();
    private SfDialog Dialog;
    private string TraitType { get; set; } = @SD.TraitType_Gear;
    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsLoading { get; set; }= true;

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };

    private async Task OnSaveRaceBtnClick()
    {

        if (string.IsNullOrEmpty(CustomEquipmentComponent.EquipmentDTO.Name) || string.IsNullOrEmpty(CustomEquipmentComponent.EquipmentDTO.Description))
        {
            ErrorMessage = $"Create name and item description";
            return;
        }
        if (CustomEquipmentComponent.EquipmentDTO != null)
        {
            CustomEquipmentComponent.EquipmentDTO.Traits = new List<TraitEquipmentDTO>();
            foreach (var trait in CustomEquipmentComponent.Traits)
            {
                CustomEquipmentComponent.EquipmentDTO.Traits.Add(new TraitEquipmentDTO(trait, CustomEquipmentComponent.EquipmentDTO));
            }
            var shortDescr = (await DescrEdit.GetTextAsync());
            if (shortDescr.Length>100)
                shortDescr= shortDescr?[0..100] + "...";
            CustomEquipmentComponent.EquipmentDTO.ShortDescr = shortDescr;
        }
        ErrorMessage = string.Empty;
        CustomEquipmentComponent.IsVisible = false;

        await CustomEquipmentComponentChanged.InvokeAsync(CustomEquipmentComponent);
    }
    private async Task OnCancelBtnClick()
    {
        CustomEquipmentComponent.IsVisible = false;
    }
    private async Task DialogOpen()
    {  //_customEquipmentComponent = new();

        this.DescrEdit.RefreshUIAsync();
        ErrorMessage = string.Empty;
        StateHasChanged();
    }
}
