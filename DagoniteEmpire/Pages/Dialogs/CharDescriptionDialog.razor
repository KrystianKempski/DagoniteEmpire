<div class="description-frame">

    <div class="sheet-img">
        @* <img src="../images/old_paper2.png" class="stretch" /> *@
    </div>
    <h3 class="my-3 ml-3 text-center">DESCRIPTION</h3>
    <div class="descr-container">
        <div class="description-richtext">
            <SfRichTextEditor Height="100%" @ref="DescrShow" @bind-Value="@SavedDescription" Readonly="true" ShowTooltip="false">
                <RichTextEditorToolbarSettings Items="@NoTools" />
                <p>Here write a description of your character</p>
            </SfRichTextEditor>
        </div>
        <button class="add-trait" @onclick="OnStartDescriptionDialog">Description</button>
    </div>
    <SfDialog Width="80%" Height="80%" @bind-Visible="@IsDescrDialVisible" IsModal="true" AllowDragging="true" CloseOnEscape="false" EnableResize="true">
        <DialogEvents Opened="@DialogOpen"></DialogEvents>
        <DialogTemplates>
            <Header>Write character description</Header>
            <Content >
                <SfRichTextEditor @ref="DescrEdit" @bind-Value="@UnsavedDescription" Height="100%">
                    <RichTextEditorToolbarSettings Items="@Tools" Type="ToolbarType.MultiRow" />
               
                </SfRichTextEditor> 
            </Content>
        </DialogTemplates>
        <DialogButtons>

            <DialogButton OnClick="@OnCancelBtnClick" Content="Cancel">
            </DialogButton>
            <DialogButton OnClick="@OnSaveDescrBtnClick" Content="Save" IsPrimary="true">
            </DialogButton>
        </DialogButtons>
    </SfDialog>
</div>

<style>
    @@media (max-width: 400px) {
        .e-dialog.e-popup {
            width: 100% !important;
            height: 100% !important;
        }
    }
</style>

@code {


    [Parameter]
    public EventCallback<string> DescriptionConfirmation { get; set; }

    [Parameter]
    public string SavedDescription { get; set; } = "<p>Here write a description of your character</p>";

    private string UnsavedDescription { get; set; } = "";
    private bool IsDescrDialVisible = false;
    SfRichTextEditor DescrEdit = new SfRichTextEditor();
    SfRichTextEditor DescrShow = new SfRichTextEditor();
    private List<ToolbarItemModel> NoTools = new List<ToolbarItemModel>();
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };
    private void OnStartDescriptionDialog()
    {
        UnsavedDescription = SavedDescription;
        IsDescrDialVisible = true;
    }

    private async Task OnSaveDescrBtnClick()
    {
        IsDescrDialVisible = false;
        SavedDescription = UnsavedDescription;
        await DescriptionConfirmation.InvokeAsync(SavedDescription);
    }
    private async Task OnCancelBtnClick()
    {
        IsDescrDialVisible = false;
    }
    private async Task DialogOpen()
    {
        this.DescrEdit.RefreshUIAsync();
    }

}
