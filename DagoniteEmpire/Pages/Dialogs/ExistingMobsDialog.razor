@inject IMobRepository _mobRepository
@inject ICampaignRepository _campaignRepository
@inject IChapterRepository _chapterRepository
@inject IUserService _userService;
@inject ISnackbar _snackBar
@inject IDialogService DialogService
@inject IBrowserViewportService _vieportService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <img src="@MyIcon.Goblin" width="40px" height="40px" class="pr-2" />
            @Title mob characters
        </MudText>
    </TitleContent>
    <DialogContent>

        <MudDataGrid T="MobDTO" MultiSelection="true" Items="Mobs" ReadOnly="true" Filterable="true" Class="px-2 py-2"
                 Hideable="false" SortMode="@SortMode.None" Groupable="false" Elevation="2" ColumnResizeMode="ResizeMode.None" SelectedItemsChanged="@SelectedItemsChanged">
        <ToolBarContent>
            <MudButton Class="pa-2 justify-content-start w-auto" OnClick="@(() => AddMob())" StartIcon="@Icons.Material.Outlined.Add" ButtonType="MudBlazor.ButtonType.Button">Add mob</MudButton>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="MobDTO" />
            <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="padding:4px 4px 4px 12px;" Property="x => x.Campaign.Name" Title="Campaign name" />
            <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="padding:4px 4px 4px 12px;" Property="x => x.Chapter.Name" Title="Chapter name" />
            <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="padding:4px 4px 4px 12px;;" Property="x => x.Name" />
            <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="padding:4px 4px 4px 12px;; " Property="x => x.RaceName" Title="Race" />
            <PropertyColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="padding:4px 4px 4px 12px;; " Property="x => x.ProfessionName" Title="Class" />
            <TemplateColumn HeaderStyle="font-weight:bold; padding:4px 4px 4px 12px;" CellStyle="width:80px; padding:4px 4px 4px 12px;" Title="Actions">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditMob(@context.Item))" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteMob(@context.Item))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>


    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close">Close</MudButton>
        <MudButton Color="Color.Error" OnClick="SaveBtn">Add selected to chapter</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ICollection<MobDTO> Mobs { get; set; } = new List<MobDTO>();
    [Parameter] public int CampaignId { get; set; } = 0;
    [Parameter] public int ChapterId { get; set; } = 0;

    private IEnumerable<MobDTO> MobsToAdd = new List<MobDTO>();
    private bool IsLoading = false;

    private string Title = "Add";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                IsLoading = true;
                StateHasChanged();
                await LoadMobs();

                IsLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            _snackBar.Add("Error while initialize: " + ex.ToString(), Severity.Error);
        }
    }

    private async Task LoadMobs()
    {
        Mobs = (await _mobRepository.GetAll()).ToList();
        foreach (var mob in Mobs)
        {
            if (mob.CampaignId > 0)
                mob.Campaign = await _campaignRepository.GetById(mob.CampaignId);
            if (mob.ChapterId > 0)
                mob.Chapter = await _chapterRepository.GetById(mob.ChapterId);
        }
    }

    private async Task SaveBtn()
    {
        if (MobsToAdd.Any() == false)
            return;
        foreach(var mob in MobsToAdd)
        {
            mob.CampaignId = CampaignId;
            mob.ChapterId = ChapterId;
            await _mobRepository.Update(mob);
        }
        Mobs = (await _mobRepository.GetAll()).ToList();
        MudDialog.Close(DialogResult.Ok(Mobs));
        _snackBar.Add("Selected mobs added to chapter", Severity.Success);
    }

    private void Close()
    {
        MudDialog.Close();
    }

    private void SelectedItemsChanged(HashSet<MobDTO> mobs)
    {
        MobsToAdd = mobs.ToList();
    }

    public async Task AddMob()
    {
        MobDTO NewMob = new();
        var parameters = new DialogParameters<CreateMobDialog> {  { x => x.NewMob, NewMob },
                                                                  { x => x.IsEdit, false },
                                                                  { x => x.CampaignId, CampaignId },
                                                                  { x => x.ChapterId, ChapterId }};

        var dialog = await DialogService.ShowAsync<CreateMobDialog>("Add mob", parameters, await SetDialogOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NewMob = (MobDTO)result.Data;
            Mobs.Add(NewMob);
        }
    }
    public async Task EditMob(MobDTO newMob)
    {
        var parameters = new DialogParameters<CreateMobDialog> {  { x => x.NewMob, newMob },
                                                                  { x => x.IsEdit, true } };

        var dialog = await DialogService.ShowAsync<CreateMobDialog>("Edit mob", parameters, await SetDialogOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            newMob = (MobDTO)result.Data;
        }
    }

    private void DeleteMob(MobDTO mob)
    {
        string name = mob.Name;
        Mobs.Remove(mob);
        if (mob.Id != 0)
            _mobRepository.Delete(mob.Id);
        _snackBar.Add(name + " deleted", Severity.Success);
    }

    private async Task<DialogOptions> SetDialogOptions(MaxWidth maxWidth = MaxWidth.Medium)
    {
        DialogOptions options = new() { MaxWidth = maxWidth };
        if (await _vieportService.GetCurrentBreakpointAsync() <= Breakpoint.Md)
            options.FullScreen = true;
        return options;
    }

}