@using DA_DataAccess.CharacterClasses
@inject IUserService _userService
<div class="traits">

    <SfDialog Width="50%" Height="50%" @bind-Visible="@_customTraitModel.IsVisible" IsModal="true" AllowDragging="true" CloseOnEscape="false" EnableResize="true">
        <DialogEvents Opened="@DialogOpen"></DialogEvents>
        <DialogTemplates>
            <Header>@HeaderName</Header>
            <Content>
                 <div class="main-table">

                    @if (IsLoading)
                    {
                        <LoadingPage></LoadingPage>
                    }
                    else
                    {
                        @if(CustomTraitModel.IsWeaponQualityMode){
                        }
                        else
                        {
                            
                            <div class="d-flex ">
                                <div class="d-flex flex-column flex-grow-1">
                                <label class="fw-bold py-1">Trait name</label>
                                    <SfTextBox Placeholder="Insert trait name" @bind-Value="@_customTraitModel.TraitDTO.Name"></SfTextBox>
                                </div>
                                @if (TraitType == SD.TraitType_Advantage)
                                {
                                    <div class="d-flex flex-column px-1">
                                        <label class="fw-bold py-1">Trait value</label>
                                        <SfNumericTextBox Width="100px" TValue="int" @bind-Value="@_customTraitModel.TraitDTO.TraitValue"></SfNumericTextBox>
                                    </div>
                                    <div class="d-flex flex-column px-1">
                                        <label class="fw-bold py-1">Unique</label>
                                        <div class="justify-content-center mx-auto my-auto">
                                            <SfCheckBox @bind-Checked="_customTraitModel.TraitDTO.IsUnique "></SfCheckBox>
                                        </div>
                                    </div>
                                }
                                @if (UserInfo?.IsAdminOrMG == true)
                                {
                                <div class="d-flex flex-column px-1">
                                    <label class="fw-bold py-1">Approve</label>
                                    <div class="justify-content-center mx-auto my-auto">
                                            <SfCheckBox @bind-Checked="_customTraitModel.TraitDTO.TraitApproved"></SfCheckBox>
                                    </div>
                                </div>
                                }
                            </div>
                            <div class="align-items-start bonus-name py-0">
                                <label class="fw-bold  py-1">Trait description</label>
                            </div>
                            <div class="align-items-start">
                                <div class="col-12 bonus-name py-0">
                                    <SfTextBox Multiline=true Placeholder="Insert general trait description" @bind-Value="@_customTraitModel.TraitDTO.Descr"></SfTextBox>
                                </div>
                            </div>
                        
                            <label class="fw-bold pt-4">Bonuses and penalties</label>
                        }
                        @if (_customTraitModel.TraitDTO.Bonuses != null)
                        {
                            @foreach (var obj in _customTraitModel.TraitDTO.Bonuses)
                            {
                                <label class="bonus-cell">Bonus @obj.Index</label>
                                <div class="bonuses-columns">
                                        <div class="bonus-cell">
                                        <SfDropDownList TValue="string" TItem=string Width="100%" Placeholder="Select a feature type" DataSource="@FeatureData" @bind-Value="@obj.FeatureType" Enabled="@IsNotWeaponQuality()"></SfDropDownList>
                                        </div>
                                    @if (obj.FeatureType == SD.FeatureAttribute)
                                    {
                                        <div class="bonus-cell">
                                            <SfDropDownList TValue="string" TItem="AttributeDTO" Width="100%" Placeholder="Select an Attribute " DataSource="@AllParams.Attributes.Values.ToArray()" @bind-Value="@obj.FeatureName">
                                                <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    }
                                    else if (obj.FeatureType == SD.FeatureBaseSkill)
                                    {
                                        <div class="bonus-cell">
                                            <SfDropDownList TValue="string" TItem="BaseSkillDTO" Width="100%" Placeholder="Select base skill " DataSource="@AllParams.BaseSkills" @bind-Value="@obj.FeatureName">
                                                <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    }
                                    else if (obj.FeatureType == SD.FeatureSpecialSkill)
                                    {
                                        <div class="bonus-cell">
                                            <SfDropDownList TValue="string" TItem="SpecialSkillDTO" Width="100%" Placeholder="Select special skill " DataSource="@AllParams.SpecialSkills.GetAllArray()" @bind-Value="@obj.FeatureName">
                                                <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    }
                                    else if (obj.FeatureType == SD.FeatureWeaponQuality)
                                    {
                                        <div class="bonus-cell">
                                            <SfDropDownList TValue="string" TItem="WeaponQualityList" Width="100%" Placeholder="Select special skill " DataSource="@LocalData" @bind-Value="@obj.FeatureName">
                                                <DropDownListFieldSettings Value="Id" Text="Id"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    }
                                    else if(obj.FeatureType == SD.FeatureOther)
                                    {
                                        <div class="bonus-double-cell">
                                            <SfTextBox Multiline=true Placeholder="Insert bonus description" @bind-Value="@obj.Description"></SfTextBox>

                                        </div>
                                    }
                                    @if (@obj.FeatureName != null && @obj.FeatureType != SD.FeatureOther)
                                    {
                                        if (obj.FeatureType == SD.FeatureWeaponQuality)
                                        {
                                            <div class="bonus-cell">
                                                <SfNumericTextBox Width="100%" TValue="int" @bind-Value="@obj.BonusValue"></SfNumericTextBox>
                                            </div>
                                        }
                                        else
                                        {

                                            <div class="bonus-cell">
                                                <SfNumericTextBox Width="100%" TValue="int" @bind-Value="@obj.BonusValue"></SfNumericTextBox>
                                            </div>
                                        }
                                    }

                                </div>
                            }
                        }
                        <div class="d-flex">
                            <button class="add-bonus-button" @onclick="OnAddBonusBtnClick"><i class="fa-solid fa-plus"></i></button>
                            <button class="add-bonus-button" @onclick="OnDeleteBonusBtnClick"><i class="fa-solid fa-minus"></i></button>
                         </div>
                    <label class="warnign-message">@ErrorMessage</label>
                    } 
                </div> 

            </Content>
        </DialogTemplates>
        <DialogButtons>

            <DialogButton OnClick="@OnCancelBtnClick" Content="Cancel">
            </DialogButton>
            <DialogButton OnClick="@OnSaveTraitBtnClick" Content="Save" IsPrimary="true">
            </DialogButton>
        </DialogButtons>
    </SfDialog>

</div>

<style>
    @@media (max-width: 400px) {
        .e-dialog.e-popup {
            width: 100% !important;
            height: 100% !important;
        }
    }
</style>

@code {
    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }

    public UserInfo? UserInfo { get; set; }
    [Parameter]
    public EventCallback<CustomTraitModel> CustomTraitModelChanged { get; set; }
    [Parameter]
    public string TraitType { get; set; }

    CustomTraitModel _customTraitModel;

    [Parameter]
    public CustomTraitModel CustomTraitModel
    {
        get => _customTraitModel;
        set{
            if (_customTraitModel == value) return;
            _customTraitModel = value;
            IsLoading = false;
            StateHasChanged();
            CustomTraitModelChanged.InvokeAsync(value);
        }
    }
    private string HeaderName = "Create a new Trait";

    private bool IsNotWeaponQuality()
    {
        return !CustomTraitModel.IsWeaponQualityMode;
    }

    public class WeaponQualityList
    {
        public string Id { get; set; }
    };
    List<WeaponQualityList> LocalData = new List<WeaponQualityList> {
        new WeaponQualityList() { Id= SD.WeaponQuality.Fast },
        new WeaponQualityList() { Id= SD.WeaponQuality.Slow },
        new WeaponQualityList() { Id= SD.WeaponQuality.Parrying },
        new WeaponQualityList() { Id= SD.WeaponQuality.ShieldDestructive },
        new WeaponQualityList() { Id= SD.WeaponQuality.ArmorPiercing},
        new WeaponQualityList() { Id= SD.WeaponQuality.Long},
        new WeaponQualityList() { Id= SD.WeaponQuality.Heavy},
        new WeaponQualityList() { Id= SD.WeaponQuality.Devastating},
        new WeaponQualityList() { Id= SD.WeaponQuality.Weak },
        new WeaponQualityList() { Id= SD.WeaponQuality.Stunning},
        new WeaponQualityList() { Id= SD.WeaponQuality.Snatching},
        new WeaponQualityList() { Id= SD.WeaponQuality.Disarming},
        new WeaponQualityList() { Id= SD.WeaponQuality.Armor},
        new WeaponQualityList() { Id= SD.WeaponQuality.ArmorDefenceBonus},
        new WeaponQualityList() { Id= SD.WeaponQuality.ArmorPenalty},
        new WeaponQualityList() { Id= SD.WeaponQuality.Durability},
        new WeaponQualityList() { Id= SD.WeaponQuality.ShieldDefenceBonus},
        new WeaponQualityList() { Id= SD.WeaponQuality.Bulky},
        new WeaponQualityList() { Id= SD.WeaponQuality.Precise},
        new WeaponQualityList() { Id= SD.WeaponQuality.Range},
        new WeaponQualityList() { Id= SD.WeaponQuality.Light},
      };

    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsLoading { get; set; }= true;

    private List<string> FeatureData = new List<string>
    {
        SD.FeatureAttribute,
        SD.FeatureBaseSkill,
        SD.FeatureSpecialSkill,
        SD.FeatureOther
    };

    private async Task OnSaveTraitBtnClick()
    {

        if (CustomTraitModel.IsWeaponQualityMode)
        {
            CustomTraitModel.TraitDTO.Name = "Weapon parameters";
            CustomTraitModel.TraitDTO.Descr = "";
        }
        else
        {
            if (CustomTraitModel.TraitDTO.Bonuses == null || CustomTraitModel.TraitDTO.Bonuses.Count == 0)
            {
                ErrorMessage = $"There must be at least one bonus in trait";
                return;
            }

            if (string.IsNullOrEmpty(CustomTraitModel.TraitDTO.Name) || string.IsNullOrEmpty(CustomTraitModel.TraitDTO.Descr))
            {
                ErrorMessage = $"Create name and description of trait";
                return;
            }
            if (CustomTraitModel.IsEditMode == false && AllParams.Traits.Where(t => t.Name == CustomTraitModel.TraitDTO.Name).Count() > 0)
            {
                ErrorMessage = $"That trait name already exists";
                return;
            }
        }
        foreach (var bonus in CustomTraitModel.TraitDTO.Bonuses)
        {
            if (bonus.BonusValue == 0 && bonus.Description == string.Empty)
            {
                ErrorMessage = $"Please fill all input fiels in bonus";
                return;
            }
        }
        if (!CustomTraitModel.TraitDTO.Bonuses.GroupBy(x => x.FeatureName).All(g => g.Count() == 1))
        {
            ErrorMessage = $"Bonuses cannot relate to the same feature more than once";
            return;
        }


        ErrorMessage = string.Empty;

        CustomTraitModel.IsVisible = false;
        if (CustomTraitModel.IsWeaponQualityMode)
            CustomTraitModel.TraitDTO.SummaryDescr = "";
        else
            CustomTraitModel.TraitDTO.SummaryDescr = CustomTraitModel.TraitDTO.Descr + ". ";

        foreach (var bonus in CustomTraitModel.TraitDTO.Bonuses)
        {

            if (bonus.Description != null && bonus.Description.Length > 0)
            {
                CustomTraitModel.TraitDTO.SummaryDescr += bonus.Description + ", ";
            }
            else
            {
                string val;
                if (bonus.BonusValue > 0)
                    val = $"+{bonus.BonusValue}";
                else
                    val = $"{bonus.BonusValue}";
                CustomTraitModel.TraitDTO.SummaryDescr += $"{val} to {bonus.FeatureName}; ";
            }

        }

        if (CustomTraitModel.IsWeaponQualityMode)
            CustomTraitModel.TraitDTO.Descr = CustomTraitModel.TraitDTO.SummaryDescr;

        CustomTraitModel.TraitDTO.TraitType = TraitType;

        await CustomTraitModelChanged.InvokeAsync(CustomTraitModel);
    }
    private async Task OnCancelBtnClick()
    {
        CustomTraitModel.IsVisible = false;
    }

    private async Task DialogOpen()
    {

        ErrorMessage = string.Empty;
        if (CustomTraitModel.IsWeaponQualityMode)
        {
            if (CustomTraitModel.IsEditMode)
            {
                HeaderName = "Edit weapon properties";
            }
            else
            {
                HeaderName = "Create weapon properties";
            }
            FeatureData = new List<string>
            {
                SD.FeatureWeaponQuality
            };
        }
        else
        {
            FeatureData = new List<string>
            {
                SD.FeatureAttribute,
                SD.FeatureBaseSkill,
                SD.FeatureSpecialSkill,
                SD.FeatureOther
            };
            if (CustomTraitModel.IsEditMode)
            {
                HeaderName = "Edit trait";
            }
            else
            {
                HeaderName = "Create a new trait";
            }

        }
        StateHasChanged();
    }
    private async Task OnAddBonusBtnClick()
    {
        ErrorMessage = string.Empty;
        if (CustomTraitModel.TraitDTO.Bonuses == null)
            CustomTraitModel.TraitDTO.Bonuses = new List<BonusDTO>();
        var bonus = new BonusDTO();
        bonus.Index = CustomTraitModel.TraitDTO.Bonuses.Count() + 1;
        if(CustomTraitModel.IsWeaponQualityMode == true)
        {
            bonus.FeatureType = SD.FeatureWeaponQuality;
        }
        CustomTraitModel.TraitDTO.Bonuses.Add(bonus);
    }

    private async Task OnDeleteBonusBtnClick()
    {
        ErrorMessage = string.Empty;
        if (CustomTraitModel.TraitDTO.Bonuses is not null && CustomTraitModel.TraitDTO.Bonuses.Count() > 0)
        {
            CustomTraitModel.TraitDTO.Bonuses.Remove(CustomTraitModel.TraitDTO.Bonuses.Last());
        }
    }

    protected override async Task OnInitializedAsync()
    {
        UserInfo = await _userService.GetUserInfo();
        
    }

}
