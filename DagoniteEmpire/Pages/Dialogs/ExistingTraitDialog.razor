@using DA_DataAccess.CharacterClasses
@inject ITraitRepository<TraitCharacterDTO> _traitCharacterRepository
@inject ITraitRepository<TraitProfessionDTO> _traitProfessionRepository
@inject ITraitRepository<TraitRaceDTO> _traitRaceRepository
@inject ISnackbar Snackbar
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType
@using SelectionMode = Syncfusion.Blazor.Grids.SelectionMode

    <MudDialog >
        <TitleContent>
            <MudText Typo="Typo.h6">
            <img src="@IconSource" width="40px" height="40px" class="pr-2" />
                    @HeaderName
            </MudText>
        </TitleContent>
        <DialogContent>
        <div class="main-table">
            <MudDataGrid @ref="Grid" ReadOnly="false" T="TraitDTO" MultiSelection="MultiRowSelection" Items="Traits" Filterable="true" Class="px-2 py-2" EditMode="DataGridEditMode.Cell" Bordered="true" Dense="true"
                         FooterClass="d-none" EditTrigger="DataGridEditTrigger.Manual"
                         Hideable="false" SortMode="@SortMode.None" Groupable="false" Elevation="2" ColumnResizeMode="ResizeMode.None" SelectOnRowClick="false" SelectedItemsChanged="@SelectedItemsChanged">
                <Columns>
                    <SelectColumn  T="TraitDTO" />
                    <PropertyColumn CellStyle="max-width:80px;" Editable="false" Property="x => x.Name" Title="Name" />
                    <PropertyColumn Editable="false" Property="x => x.SummaryDescr" Title="Description" />
                    @if (TraitType == SD.TraitType_Temporary)
                    {
                        <PropertyColumn CellStyle="max-width:40px;" Editable="true" Property="x => x.TraitValue" Title="Duration" />
                    }
                </Columns>
            </MudDataGrid>
        </div>
    </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancelBtnClick">Cancel</MudButton>
            <MudButton Color="Color.Error" OnClick="OnSaveTraitBtnClick">Save</MudButton>
        </DialogActions>
    </MudDialog>


@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public AllParamsModel AllParams { get; set; }
    [Parameter] public List<TraitDTO> ChosenTraits { get; set; } = new List<TraitDTO>();
    [Parameter] public string TraitType { get; set; } = SD.TraitType_Character;
    [Parameter] public bool MultiRowSelection { get; set; } = true;
    [Parameter] public int MinLevel { get; set; } = 0;
    private string TraitName = "";
    private bool IsCellEditMode = false;
    private CheckboxSelectionType checkboxMode = CheckboxSelectionType.Default;
    private MudDataGrid<TraitDTO> Grid = null;
    private IEnumerable<TraitDTO> Traits { get; set; }
    public string HeaderName { get; set; } = "Add existing traits";
    private string IconSource = MyIcon.Ability;

    protected override async Task OnInitializedAsync()
    {
        if (TraitType == SD.TraitType_Character)
            Traits = (await _traitCharacterRepository.GetAllApproved()).ToList().Where(t=>t.IsTemporary == false);
        else if (TraitType == SD.TraitType_Race)
            Traits = await _traitRaceRepository.GetAllApproved();
        else if (TraitType == SD.TraitType_Temporary)
        {
            Traits = (await _traitCharacterRepository.GetAllApproved()).ToList().Where(t => t.IsTemporary == true);
        }
        else if (TraitType == SD.TraitType_Profession)
        {
            Traits = (await _traitProfessionRepository.GetAllApproved()).ToList().Where(t => t.IsActiveSkill == false && t.Level <= MinLevel);
            if (AllParams.Profession.CasterType == SpellcasterType.Wizard)
                Traits = Traits.Where(u => u.Name.StartsWith(SD.ProfessionSkills.SorcererMagic) == false);
            else if (AllParams.Profession.CasterType == SpellcasterType.Sorcerer)
                Traits = Traits.Where(u => u.Name.StartsWith(SD.ProfessionSkills.WizardMagic) == false);
        }

        if (MultiRowSelection)
        {
            IsCellEditMode = false;
        }else{
            IsCellEditMode = false;
        }

        switch (TraitType)
        {
            case SD.TraitType_Character: TraitName = "trait"; break;
            case SD.TraitType_Temporary: TraitName = "state"; break;
            case SD.TraitType_Gear: TraitName = "item trait"; break;
            case SD.TraitType_Profession: TraitName = "skill"; break;
            case SD.TraitType_Race: TraitName = "trait"; break;
        }
        HeaderName = "Add " + TraitName + "s " + "from existing";

        switch (TraitType)
        {
            case SD.TraitType_Gear: IconSource = MyIcon.Anvil; break;
            case SD.TraitType_Profession:
            case SD.TraitType_Race:
            case SD.TraitType_Character: IconSource = MyIcon.Ability; break;
            case SD.TraitType_Temporary: IconSource = MyIcon.Stunned; break;

        }

        MudDialog.StateHasChanged();
    }


    private void SelectedItemsChanged(HashSet<TraitDTO> traits)
    {
        if(MultiRowSelection == false)
        {
            var item = Grid.SelectedItem ;
            traits = new HashSet<TraitDTO>();
            traits.Add(item);
            Grid.Selection = traits;
        }
        ChosenTraits = traits.ToList();
        StateHasChanged();
    }


    private async Task OnSaveTraitBtnClick()
    {
        
        MudDialog.Close(DialogResult.Ok(ChosenTraits));
        if (Traits.Any())
        {
            string text = "";
            if (MultiRowSelection)
                text = "Selected " + TraitName + "s added";
            else
                text = ChosenTraits.First().Name + " selected";
            Snackbar.Add(text, Severity.Success);
        }
    }
    private void OnCancelBtnClick()
    {
        MudDialog.Cancel();
    }
}
