@using DA_DataAccess.CharacterClasses
@inject ISnackbar Snackbar
@inject IUserService _userService
@inject IDialogService DialogService
@inject IBrowserViewportService _vieportService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <img src="@MyIcon.Scroll" width="40x" height="40px" class="helm-icon" />
            @HeaderName
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="main-table">
            <div class="d-flex ">
                <div class="d-flex flex-column flex-grow-1">
                <label class="fw-bold py-1">Profession skill name</label>
                    <SfTextBox Readonly="IsInfoMode" Placeholder="Talent name" @bind-Value="@NewTrait.Name"></SfTextBox>
                </div>

                @if (UserInfo?.IsAdminOrMG == true)
                {
                <div class="d-flex flex-column px-1">
                    <label class="fw-bold py-1">Approve</label>
                    <div class="justify-content-center mx-auto my-auto">
                    <SfCheckBox  @bind-Checked="NewTrait.TraitApproved"></SfCheckBox>
                    </div>
                </div>
                }
            </div>
            <div class="align-items-start bonus-name py-0">
                <label class="fw-bold  py-1">Profession skill description</label>
            </div>
            <div class="align-items-start">
                <div class="col-12 bonus-name py-0">
                    <SfTextBox Readonly="IsInfoMode" Multiline=true Placeholder="Insert general trait description" @bind-Value="@NewTrait.Descr"></SfTextBox>
                </div>
            </div>
           
                        
            <label class="fw-bold pt-4">Bonuses and penalties</label>

            @if (NewTrait.Bonuses != null)
            {
                @foreach (var obj in NewTrait.Bonuses)
                {
                    <label class="bonus-cell">Bonus @obj.Index</label>
                    <div class="bonuses-columns">
                            <div class="bonus-cell">
                            <SfDropDownList Readonly="IsInfoMode" TValue="string" TItem=string Width="100%" Placeholder="Select a feature type" DataSource="@FeatureData" @bind-Value="@obj.FeatureType"></SfDropDownList>
                            </div>
                        @if (obj.FeatureType == SD.FeatureAttribute)
                        {
                            <div class="bonus-cell">
                                <SfDropDownList Readonly="IsInfoMode" TValue="string" TItem="AttributeDTO" Width="100%" Placeholder="Select an Attribute " DataSource="@AllParams.Attributes.GetAllArray()" @bind-Value="@obj.FeatureName">
                                    <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                        else if (obj.FeatureType == SD.FeatureBaseSkill)
                        {
                            <div class="bonus-cell">
                                <SfDropDownList Readonly="IsInfoMode"  TValue="string" TItem="BaseSkillDTO" Width="100%" Placeholder="Select base skill " DataSource="@AllParams.BaseSkills" @bind-Value="@obj.FeatureName">
                                    <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                        else if (obj.FeatureType == SD.FeatureSpecialSkill)
                        {
                            <div class="bonus-cell">
                                <SfDropDownList Readonly="IsInfoMode" TValue="string" TItem="SpecialSkillDTO" Width="100%" Placeholder="Select special skill " DataSource="@AllParams.SpecialSkills.GetAllArray()" @bind-Value="@obj.FeatureName">
                                    <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                        else if (obj.FeatureType == SD.FeatureWeaponQuality)
                        {
                            <div class="bonus-cell">
                                <SfDropDownList Readonly="IsInfoMode" TValue="string" TItem="string" Width="100%" Placeholder="Select weapon quality" DataSource="@WeaponQualityList" @bind-Value="@obj.FeatureName">
                                    <DropDownListFieldSettings Value="Id" Text="Id"></DropDownListFieldSettings>
                                </SfDropDownList>
                            </div>
                        }
                        else if(obj.FeatureType == SD.FeatureOther)
                        {
                            <div class="bonus-double-cell">
                                <SfTextBox Readonly="IsInfoMode" Multiline=true Placeholder="Insert bonus description" @bind-Value="@obj.Description"></SfTextBox>

                            </div>
                        }
                        @if (@obj.FeatureName != null && @obj.FeatureType != SD.FeatureOther)
                        {
                            if (obj.FeatureType == SD.FeatureWeaponQuality)
                            {
                                <div class="bonus-cell">
                                    <SfNumericTextBox Readonly="IsInfoMode"  Width="100%" TValue="int" @bind-Value="@obj.BonusValue"></SfNumericTextBox>
                                </div>
                            }
                            else
                            {

                                <div class="bonus-cell">
                                    <SfNumericTextBox Readonly="IsInfoMode" Width="100%" TValue="int" @bind-Value="@obj.BonusValue"></SfNumericTextBox>
                                </div>
                            }
                        }

                    </div>
                }

                <div class="d-flex">
                    <button class="add-bonus-button" @onclick="OnAddBonusBtnClick"><i class="fa-solid fa-plus"></i></button>
                    <button class="add-bonus-button" @onclick="OnDeleteBonusBtnClick"><i class="fa-solid fa-minus"></i></button>
                    </div>

            <label class="warnign-message">@ErrorMessage</label>
            } 
        </div>

        <MudDivider Class="mt-4 mb-2" />

        @if (IsActiveSkill)
        {
            <div class="d-flex py-2">
                <div class="d-flex flex-column me-4">
                    <label class="fw-bold py-1">DC</label>
                    <SfNumericTextBox Readonly="IsInfoMode" Placeholder="DC" @bind-Value="@NewTrait.DC"></SfNumericTextBox>
                </div>
                <div class="d-flex flex-column me-4">
                    <label class="fw-bold py-1">Cost</label>
                    <SfNumericTextBox Readonly="IsInfoMode" Placeholder="Cost" @bind-Value="@NewTrait.Cost"></SfNumericTextBox>
                </div>
                <div class="d-flex flex-column me-4">
                    <label class="fw-bold py-1">Range</label>
                    <SfTextBox Readonly="IsInfoMode" Placeholder="Range" @bind-Value="@NewTrait.Range"></SfTextBox>
                </div>
            </div>
        }
        else
        {           
            <div class="d-flex py-2">
                <MudButton Class="me-4" Variant="Variant.Filled" OnClick="SelectExistingSkill">Select existing talent</MudButton>
                <MudButton Variant="Variant.Filled" OnClick="ClearSkill">Clear skill</MudButton>
            </div>
        }

    </DialogContent>
    <DialogActions>

        <MudButton OnClick="OnCancelBtnClick">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="OnSaveTraitBtnClick">Save</MudButton>

    </DialogActions>
</MudDialog>

<style>
    @@media (max-width: 400px) {
        .e-dialog.e-popup {
            width: 100% !important;
            height: 100% !important;
        }
    }
</style>

@code {
    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }
    [Parameter] public AllParamsModel AllParams { get; set; }
    [Parameter] public TraitProfessionDTO NewTrait { get; set; }
    [Parameter] public bool IsEditMode { get; set; } = false;
    [Parameter] public bool IsInfoMode { get; set; } = false;
    [Parameter] public bool IsActiveSkill { get; set; } = false;

    public UserInfo? UserInfo { get; set; }
    public string TraitType { get; set; } = SD.TraitType_Profession;
    private string HeaderName = "Modify talent";

    List<string> WeaponQualityList = new List<string> {
        SD.WeaponQuality.Fast,
        SD.WeaponQuality.Slow,
        SD.WeaponQuality.Parrying ,
        SD.WeaponQuality.ShieldDestructive ,
        SD.WeaponQuality.ArmorPiercing,
        SD.WeaponQuality.Long,
        SD.WeaponQuality.Heavy,
        SD.WeaponQuality.Devastating,
        SD.WeaponQuality.Weak ,
        SD.WeaponQuality.Stunning,
        SD.WeaponQuality.Snatching,
        SD.WeaponQuality.Disarming,
        SD.WeaponQuality.Armor,
        SD.WeaponQuality.ArmorDefenceBonus,
        SD.WeaponQuality.ArmorPenalty,
        SD.WeaponQuality.Durability,
        SD.WeaponQuality.ShieldDefenceBonus,
        SD.WeaponQuality.Bulky,
        SD.WeaponQuality.Precise,
        SD.WeaponQuality.Range,
        SD.WeaponQuality.Light,
      };

    private string ErrorMessage { get; set; } = string.Empty;

    private List<string> FeatureData = new List<string>
    {
        SD.FeatureAttribute,
        SD.FeatureBaseSkill,
        SD.FeatureSpecialSkill,
        SD.FeatureWeaponQuality,
        SD.FeatureOther
    };

    private void OnSaveTraitBtnClick()
    {
        if (string.IsNullOrEmpty(NewTrait.Name) || string.IsNullOrEmpty(NewTrait.Descr))
        {
            ErrorMessage = $"Create name and description of trait";
            return;
        }
        if (IsEditMode == false && AllParams.TraitsProfession.Where(t => t.Name == NewTrait.Name).Count() > 0)
        {
            ErrorMessage = $"That trait name already exists";
            return;
        }

        foreach (var bonus in NewTrait.Bonuses)
        {
            if (bonus.BonusValue == 0 && bonus.Description == string.Empty)
            {
                ErrorMessage = $"Please fill all input fiels in bonus";
                return;
            }
        }
        if (!NewTrait.Bonuses.GroupBy(x => x.FeatureName).All(g => g.Count() == 1))
        {
            ErrorMessage = $"Bonuses cannot relate to the same feature more than once";
            return;
        }

        ErrorMessage = string.Empty;       
        NewTrait.TraitType = TraitType;
        MudDialog.Close(DialogResult.Ok(NewTrait));
        string text = "";
        if (NewTrait.IsActiveSkill)
            text = "Active skill modified";
        else
            text = "Passive skill modified";
        Snackbar.Add(text, Severity.Success);
    }
    private void OnCancelBtnClick()
    {
        MudDialog.Close(DialogResult.Cancel());
    }
    protected override async Task OnInitializedAsync()
    {
        ErrorMessage = string.Empty;
        UserInfo = await _userService.GetUserInfo();

        FeatureData = new List<string>
        {
            SD.FeatureAttribute,
            SD.FeatureBaseSkill,
            SD.FeatureSpecialSkill,
            SD.FeatureWeaponQuality,
            SD.FeatureOther
        };

        if (TraitType == SD.TraitType_Profession)
        {
            HeaderName = "Edit profession skill";
        }
        else
        {
            if (IsEditMode)
                HeaderName = "Edit trait";
            else
                HeaderName = "Create a new trait";
        }
    }

    private void OnAddBonusBtnClick()
    {
        ErrorMessage = string.Empty;
        if (NewTrait.Bonuses == null)
            NewTrait.Bonuses = new List<BonusDTO>();
        var bonus = new BonusDTO();
        bonus.Index = NewTrait.Bonuses.Count() + 1;

        NewTrait.Bonuses.Add(bonus);
    }

    private void OnDeleteBonusBtnClick()
    {
        ErrorMessage = string.Empty;
        if (NewTrait.Bonuses is not null && NewTrait.Bonuses.Count() > 0)
        {
            NewTrait.Bonuses.Remove(NewTrait.Bonuses.Last());
        }
    }
    private async Task SelectExistingSkill()
    {

        List<TraitDTO> ChosenTraits = new List<TraitDTO>();
        var parameters = new DialogParameters<ExistingTraitDialog> { { x => x.ChosenTraits, ChosenTraits },
                                                                   { x => x.TraitType, TraitType },
                                                                   { x => x.MinLevel, NewTrait.Level },
                                                                   { x => x.MultiRowSelection, false },
                                                                   { x => x.AllParams, AllParams }};

        var dialog = await DialogService.ShowAsync<ExistingTraitDialog>("Select " + NewTrait.TraitLabel, parameters, await SetDialogOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            ChosenTraits = (List<TraitDTO>)result.Data;
            if (ChosenTraits is null)
                throw new Exception("error in trait selection dialog");

            if (ChosenTraits.Any())
            {
                //copy properties of selected generic triait to current trait
                var selectedTrait = (TraitProfessionDTO)ChosenTraits.First();

                foreach (var prop in selectedTrait.GetType().GetProperties())
                {
                    if (prop.Name != "ProfessionId" && prop.Name != "Id" && prop.Name != "Level" && NewTrait.GetType().GetProperty(prop.Name).CanWrite ){
                        var val  = prop.GetValue(selectedTrait, null);
                        NewTrait.GetType().GetProperty(prop.Name).SetValue(NewTrait, val, null);
                    }
                }
            }
        }
        IsInfoMode = true;
        StateHasChanged();
    }
    private void ClearSkill()
    {
        NewTrait.Descr= string.Empty;
        NewTrait.Name = string.Empty;
        NewTrait.TraitValue = 0;
        NewTrait.Bonuses = new List<BonusDTO>();
        IsInfoMode = false;
        StateHasChanged();
    }

    private async Task<DialogOptions> SetDialogOptions(MaxWidth maxWidth = MaxWidth.Large)
    {
        DialogOptions options = new() { MaxWidth = maxWidth };
        if (await _vieportService.GetCurrentBreakpointAsync() <= Breakpoint.Md)
            options.FullScreen = true;
        return options;
    }

}
