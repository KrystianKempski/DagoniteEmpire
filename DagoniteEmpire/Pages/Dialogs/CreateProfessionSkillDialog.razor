@using DA_DataAccess.CharacterClasses
@inject IUserService _userService
<div class="traits">

    <SfDialog Width="50%" Height="50%" @bind-Visible="@_professionSkillModel.IsVisible" IsModal="true" AllowDragging="true" CloseOnEscape="false" EnableResize="true">
        <DialogEvents Opened="@DialogOpen"></DialogEvents>
            <Header>@HeaderName</Header>
        <DialogTemplates>
            <Content>
                 <div class="main-table">

                    @if (IsLoading)
                    {
                        <LoadingPage></LoadingPage>
                    }
                    else
                    {
                            
                        <div class="d-flex ">
                            <div class="d-flex flex-column flex-grow-1">
                            <label class="fw-bold py-1">Talent name</label>
                                <SfTextBox Placeholder="Talent name" @bind-Value="@_professionSkillModel.TraitDTO.Name"></SfTextBox>
                            </div>

                            @if (UserInfo?.IsAdminOrMG == true)
                            {
                            <div class="d-flex flex-column px-1">
                                <label class="fw-bold py-1">Approve</label>
                                <div class="justify-content-center mx-auto my-auto">
                                    <SfCheckBox @bind-Checked="ProfessionSkillModel.TraitDTO.TraitApproved"></SfCheckBox>
                                </div>
                            </div>
                            }
                        </div>
                        <div class="align-items-start bonus-name py-0">
                            <label class="fw-bold  py-1">Talent description</label>
                        </div>
                        <div class="align-items-start">
                            <div class="col-12 bonus-name py-0">
                                <SfTextBox Multiline=true Placeholder="Insert general trait description" @bind-Value="@_professionSkillModel.TraitDTO.Descr"></SfTextBox>
                            </div>
                        </div>
                        
                        <label class="fw-bold pt-4">Bonuses and penalties</label>

                        @if (_professionSkillModel.TraitDTO.Bonuses != null)
                        {
                            @foreach (var obj in _professionSkillModel.TraitDTO.Bonuses)
                            {
                                <label class="bonus-cell">Bonus @obj.Index</label>
                                <div class="bonuses-columns">
                                        <div class="bonus-cell">
                                        <SfDropDownList TValue="string" TItem=string Width="100%" Placeholder="Select a feature type" DataSource="@FeatureData" @bind-Value="@obj.FeatureType"></SfDropDownList>
                                        </div>
                                    @if (obj.FeatureType == SD.FeatureAttribute)
                                    {
                                        <div class="bonus-cell">
                                            <SfDropDownList  TValue="string" TItem="AttributeDTO" Width="100%" Placeholder="Select an Attribute " DataSource="@AllParams.Attributes.GetAllArray()" @bind-Value="@obj.FeatureName">
                                                <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    }
                                    else if (obj.FeatureType == SD.FeatureBaseSkill)
                                    {
                                        <div class="bonus-cell">
                                            <SfDropDownList  TValue="string" TItem="BaseSkillDTO" Width="100%" Placeholder="Select base skill " DataSource="@AllParams.BaseSkills" @bind-Value="@obj.FeatureName">
                                                <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    }
                                    else if (obj.FeatureType == SD.FeatureSpecialSkill)
                                    {
                                        <div class="bonus-cell">
                                            <SfDropDownList TValue="string" TItem="SpecialSkillDTO" Width="100%" Placeholder="Select special skill " DataSource="@AllParams.SpecialSkills.GetAllArray()" @bind-Value="@obj.FeatureName">
                                                <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    }
                                    else if (obj.FeatureType == SD.FeatureWeaponQuality)
                                    {
                                        <div class="bonus-cell">
                                            <SfDropDownList TValue="string" TItem="string" Width="100%" Placeholder="Select weapon quality" DataSource="@WeaponQualityList" @bind-Value="@obj.FeatureName">
                                                <DropDownListFieldSettings Value="Id" Text="Id"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    }
                                    else if(obj.FeatureType == SD.FeatureOther)
                                    {
                                        <div class="bonus-double-cell">
                                            <SfTextBox Multiline=true Placeholder="Insert bonus description" @bind-Value="@obj.Description"></SfTextBox>

                                        </div>
                                    }
                                    @if (@obj.FeatureName != null && @obj.FeatureType != SD.FeatureOther)
                                    {
                                        if (obj.FeatureType == SD.FeatureWeaponQuality)
                                        {
                                            <div class="bonus-cell">
                                                <SfNumericTextBox  Width="100%" TValue="int" @bind-Value="@obj.BonusValue"></SfNumericTextBox>
                                            </div>
                                        }
                                        else
                                        {

                                            <div class="bonus-cell">
                                                <SfNumericTextBox  Width="100%" TValue="int" @bind-Value="@obj.BonusValue"></SfNumericTextBox>
                                            </div>
                                        }
                                    }

                                </div>
                            }
                        }

                        <div class="d-flex">
                            <button class="add-bonus-button" @onclick="OnAddBonusBtnClick"><i class="fa-solid fa-plus"></i></button>
                            <button class="add-bonus-button" @onclick="OnDeleteBonusBtnClick"><i class="fa-solid fa-minus"></i></button>
                            </div>

                    <label class="warnign-message">@ErrorMessage</label>
                    } 
                </div> 

            </Content>
        </DialogTemplates>

        <DialogButtons>

            <DialogButton OnClick="@OnCancelBtnClick" Content="Cancel">
            </DialogButton>
            <DialogButton OnClick="@OnSaveTraitBtnClick" Content="Save" IsPrimary="true">
            </DialogButton>
        </DialogButtons>

    </SfDialog>

</div>

<style>
    @@media (max-width: 400px) {
        .e-dialog.e-popup {
            width: 100% !important;
            height: 100% !important;
        }
    }
</style>

@code {
    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }

    public UserInfo? UserInfo { get; set; }
    [Parameter]
    public EventCallback<ProfessionSkillModel> ProfessionSkillModelChanged { get; set; }

    public string TraitType { get; set; } = SD.TraitType_Profession;

    private string HeaderName = "Modify talent";
    private ProfessionSkillModel _professionSkillModel;

    [Parameter]
    public ProfessionSkillModel ProfessionSkillModel
    {
        get => _professionSkillModel;
        set{
            if (_professionSkillModel == value) return;
            _professionSkillModel = value;
            IsLoading = false;
            StateHasChanged();
            ProfessionSkillModelChanged.InvokeAsync(value);
        }
    }


    List<string> WeaponQualityList = new List<string> {
        SD.WeaponQuality.Fast,
        SD.WeaponQuality.Slow,
        SD.WeaponQuality.Parrying ,
        SD.WeaponQuality.ShieldDestructive ,
        SD.WeaponQuality.ArmorPiercing,
        SD.WeaponQuality.Long,
        SD.WeaponQuality.Heavy,
        SD.WeaponQuality.Devastating,
        SD.WeaponQuality.Weak ,
        SD.WeaponQuality.Stunning,
        SD.WeaponQuality.Snatching,
        SD.WeaponQuality.Disarming,
        SD.WeaponQuality.Armor,
        SD.WeaponQuality.ArmorDefenceBonus,
        SD.WeaponQuality.ArmorPenalty,
        SD.WeaponQuality.Durability,
        SD.WeaponQuality.ShieldDefenceBonus,
        SD.WeaponQuality.Bulky,
        SD.WeaponQuality.Precise,
        SD.WeaponQuality.Range,
        SD.WeaponQuality.Light,
        SD.WeaponQuality.TwoHanded,
      };

    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsLoading { get; set; }= true;

    private List<string> FeatureData = new List<string>
    {
        SD.FeatureAttribute,
        SD.FeatureBaseSkill,
        SD.FeatureSpecialSkill,
        SD.FeatureWeaponQuality,
        SD.FeatureOther
    };

    private async Task OnSaveTraitBtnClick()
    {
        if (string.IsNullOrEmpty(ProfessionSkillModel.TraitDTO.Name) || string.IsNullOrEmpty(ProfessionSkillModel.TraitDTO.Descr))
        {
            ErrorMessage = $"Create name and description of trait";
            return;
        }
        if (ProfessionSkillModel.IsEditMode == false && AllParams.Traits.Where(t => t.Name == ProfessionSkillModel.TraitDTO.Name).Count() > 0)
        {
            ErrorMessage = $"That trait name already exists";
            return;
        }
        
        foreach (var bonus in ProfessionSkillModel.TraitDTO.Bonuses)
        {
            if (bonus.BonusValue == 0 && bonus.Description == string.Empty)
            {
                ErrorMessage = $"Please fill all input fiels in bonus";
                return;
            }
        }
        if (!ProfessionSkillModel.TraitDTO.Bonuses.GroupBy(x => x.FeatureName).All(g => g.Count() == 1))
        {
            ErrorMessage = $"Bonuses cannot relate to the same feature more than once";
            return;
        }

        ErrorMessage = string.Empty;

        ProfessionSkillModel.IsVisible = false;
       
        ProfessionSkillModel.TraitDTO.TraitType = TraitType;

        await ProfessionSkillModelChanged.InvokeAsync(ProfessionSkillModel);
    }
    private void OnCancelBtnClick()
    {
        ProfessionSkillModel.IsVisible = false;
    }

    private void DialogOpen()
    {

        ErrorMessage = string.Empty;

        FeatureData = new List<string>
        {
            SD.FeatureAttribute,
            SD.FeatureBaseSkill,
            SD.FeatureSpecialSkill,
            SD.FeatureWeaponQuality,
            SD.FeatureOther
        };

        if (TraitType == SD.TraitType_Profession)
        {             
            HeaderName = "Edit proffestion skill";
        }
        else
        {
            if (ProfessionSkillModel.IsEditMode)
                HeaderName = "Edit trait";
            else
                HeaderName = "Create a new trait";
        }

        
        StateHasChanged();
    }
    private void OnAddBonusBtnClick()
    {
        ErrorMessage = string.Empty;
        if (ProfessionSkillModel.TraitDTO.Bonuses == null)
            ProfessionSkillModel.TraitDTO.Bonuses = new List<BonusDTO>();
        var bonus = new BonusDTO();
        bonus.Index = ProfessionSkillModel.TraitDTO.Bonuses.Count() + 1;

        ProfessionSkillModel.TraitDTO.Bonuses.Add(bonus);
    }

    private void OnDeleteBonusBtnClick()
    {
        ErrorMessage = string.Empty;
        if (ProfessionSkillModel.TraitDTO.Bonuses is not null && ProfessionSkillModel.TraitDTO.Bonuses.Count() > 0)
        {
            ProfessionSkillModel.TraitDTO.Bonuses.Remove(ProfessionSkillModel.TraitDTO.Bonuses.Last());
        }
    }

    protected override async Task OnInitializedAsync()
    {
        UserInfo = await _userService.GetUserInfo();        
    }
}
