@using Cropper.Blazor.Components
@inject IFileUpload _fileUpload;
@inject IUserService _userService
@inject IJSRuntime _jsRuntime
@inject IDialogService DialogService
@inject IBrowserViewportService _vieportService

<div class="portrait">
    <MudPaper Class="w-100 h-100 pa-2">
        <div class="portrait-relative">
    <h3 class="my-3 ml-3 text-center">PORTRAIT</h3>
    <div class="portrait-imageframe">
        <img src="@AllParams.Character.ImageUrl" class="portrait-image" />
            @if (AllParams.Character.ImageUrl == "/images/def-char-img.webp")
            {                    
                <label class="input-label" for="input">@ChooseFile</label>
            }
            else
            {
                <label class="input-label" for="input"> </label>
            }
            <InputFile accept=".jpeg,.jpg,.png" id="input" OnChange="HandleImageUpload" class="sr-only"></InputFile>
    </div>

    <div class="points-control">
        <label class="points-label">Avalible experience points:</label>
        @if (UserInfo?.IsAdminOrMG == true)
        {
            <span class="points-indicator ml-auto"><MudNumericField Margin="0" Class="dense-numeric-field" Min="0" @bind-Value="AllParams.Character.CurrentExpPoints" @bind-Value:after="ChangeParams"></MudNumericField></span>
        }
        else
        {
            <span class="points-indicator ml-auto">@AllParams.Character.CurrentExpPoints</span>
        }
    </div>
    <div class="points-control">
        @if (AllParams.Character.IsApproved == false || UserInfo?.IsAdminOrMG == true)
        {
            <label class="points-label">Avalible attribute points:</label>
            <span class="points-indicator ml-auto">@AllParams.Character.AttributePoints</span>
        }
    </div>
        </div>
    </MudPaper>
</div>
<style>
    .cropper-example {
        max-height: 300px;
        width: 100%;
    }
</style>

@code {

    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }
    [Parameter]
    public EventCallback OnPortraitChange { get; set; }
    public string ImageUrl { get; set; } = "";

    private string ChooseFile = "Choose file";
    UserInfo? UserInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserInfo = await _userService.GetUserInfo();
        StateHasChanged();        
    }

    private async Task ChangeParams()
    {
        await OnPortraitChange.InvokeAsync();
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            if (e.GetMultipleFiles(1).Count > 0)
            {
                ChooseFile = string.Empty;
                foreach (var file in e.GetMultipleFiles(1))
                {
                    var parameters = new DialogParameters<CropperDialog> { { x => x.File, e.File } };
                    var dialog = await DialogService.ShowAsync<CropperDialog>("Cropp portrait", parameters, await SetOptions());
                    var result = await dialog.Result;

                    if (result?.Data is not null && !result.Canceled)
                    {
                        var url = (string)result.Data;
                        AllParams.Character.ImageUrl = await _fileUpload.UploadFile(url, SD.Portrait);
                        await OnPortraitChange.InvokeAsync();
                    }
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError("Error while image upload: " + ex.ToString());
        }
    }
    private async Task<DialogOptions> SetOptions(MaxWidth maxWidth = MaxWidth.Medium)
    {
        DialogOptions options = new() { MaxWidth = maxWidth };
        if (await _vieportService.GetCurrentBreakpointAsync() <= Breakpoint.Md)
            options.FullScreen = true;
        return options;
    }

}