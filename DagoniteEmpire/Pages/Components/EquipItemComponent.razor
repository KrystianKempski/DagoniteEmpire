<div>
    <InputSelect class="form-select p-1" ValueExpression="@(()=>SelectedGear)"
            Value="@SelectedGear"
            ValueChanged="@((string value) => ChangeGear(value))">
        <option value="Empty">Empty</option>
        @foreach (var eq in AllGearsOfType)
        {
            <option value="@eq.Name"> @eq.Name</option>
        }
    </InputSelect>
</div>

@code {
    private string SelectedGear ="Empty";

    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }

    [Parameter]
    public string GearItem { get; set; } = "";
    private string GearType;


    public ICollection<EquipmentDTO> AllGearsOfType { get; set; } = new List<EquipmentDTO>(); 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GearType = GearItem;
            if (GearType == "Ring1" || GearType == "Ring2") GearType = "Rings";
            EquipmentDTO newGear = (EquipmentDTO)AllParams.Character.GetType().GetProperty(GearItem).GetValue(AllParams.Character, null);
            if (newGear is not null)
            {
                SelectedGear = newGear.Name;
            }
            ReloadGears();
        }
    }

    public void ReloadGears()
    {
        if (AllParams is not null)
        {
            AllGearsOfType = AllParams.Equipment.Where(u => u.EquipmentType == GearType).ToList();
            StateHasChanged();
        }
    }

    private async Task ChangeGear(string eq)
    {
        try
        {
            if (AllParams.Character.Head is not null && AllParams.Character.Head.Name == eq)
                return;

            EquipmentDTO newGear = (EquipmentDTO)AllParams.Character.GetType().GetProperty(GearItem).GetValue(AllParams.Character, null);

            //unequip gear
            if (newGear is not null)
            {
                var removedEquipment = AllParams.Character?.Equipment?.FirstOrDefault(u => u.Id == newGear.Id);
                if (removedEquipment is not null)
                    removedEquipment.IsEquipped = false;
            }

            if (eq == "Empty")
                return;

            var putOnEquipment = AllParams.Character?.Equipment?.FirstOrDefault(u => u.Name == eq);
            if (putOnEquipment is not null)
            {
                putOnEquipment.IsEquipped = true;
                AllParams.Character.GetType().GetProperty(GearItem).SetValue(AllParams.Character, putOnEquipment);
            }

        }
        catch (Exception ex)
        {
           // IsLoading = false;
           // await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }
    }

}
