<div>
    <InputSelect class="form-select p-1" ValueExpression="@(()=>SelectedGearName)"
                 Value="@SelectedGearName"
            ValueChanged="@((string value) => ChangeGear(value))">
        <option value="Empty">Empty</option>
        @foreach (var eq in AllGearsOfType)
        {
            <option value="@eq.Equipment.Name"> @eq.Equipment.Name</option>
        }
    </InputSelect>
</div>

@code {
    private string SelectedGearName ="Empty";

    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }

    [Parameter]
    public string SlotType { get; set; } = "";

    [Parameter]
    public EventCallback OnGearChange { get; set; }

    public string ItemType { get; set; } = "";

    public EquipmentSlotDTO? SelectedItem { get; set; }


    public ICollection<EquipmentSlotDTO> AllGearsOfType { get; set; } = new List<EquipmentSlotDTO>(); 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ItemType = SlotType;
            if (ItemType == SD.SlotType.Ring1 || ItemType == SD.SlotType.Ring2)
                ItemType = SD.EquipmentType.Rings;


            SelectedItem = AllParams.EquipmentSlots?.FirstOrDefault(s => s.SlotType == SlotType);

            if (SelectedItem is not null)
            {
                SelectedGearName = SelectedItem.Equipment.Name;
            }
            else
            {
                SelectedGearName = "Empty";
            }
            ReloadGears();
        }
    }

    public void ReloadGears()
    {
        if (AllParams is not null)
        {
            bool resetGear = false;
            if (ItemType == SD.EquipmentType.Rings)
                resetGear = true;

            if (SlotType == SD.SlotType.WeaponMain1 || SlotType == SD.SlotType.WeaponMain2)
            {
                AllGearsOfType = AllParams.EquipmentSlots.Where(u => u.Equipment.EquipmentType == SD.EquipmentType.WeaponMelee ||
                                                                     u.Equipment.EquipmentType == SD.EquipmentType.WeaponRanged).ToList();
                resetGear = true;
            }
            else if (SlotType == SD.SlotType.WeaponOff1 || SlotType == SD.SlotType.WeaponOff2)
            {
                AllGearsOfType = AllParams.EquipmentSlots.Where(u => u.Equipment.EquipmentType == SD.EquipmentType.WeaponMelee ||
                                                                     u.Equipment.EquipmentType == SD.EquipmentType.Shield).ToList();
                resetGear = true;
            }
            else
            {
                AllGearsOfType = AllParams.EquipmentSlots.Where(u => u.Equipment.EquipmentType == ItemType).ToList();
            }

            if (resetGear)
            {
                SelectedItem = AllParams.EquipmentSlots?.FirstOrDefault(s => s.SlotType == SlotType);
                if (SelectedItem is not null)
                    SelectedGearName = SelectedItem.Equipment.Name;
                else
                    SelectedGearName = "Empty";
            }

            StateHasChanged();
        }
    }

    private async Task ChangeGear(string eq)
    {
        try
        {
            //unequip gear
            if (SelectedItem is not null)
            {
                SelectedItem.IsEquipped = false;
                SelectedItem.SlotType = "other";
            }
            SelectedGearName = eq;
            if (eq == "Empty")
            {
                SelectedItem = null;
                OnGearChange.InvokeAsync();
                return;
            }

            var putOnEquipment = AllParams.EquipmentSlots?.FirstOrDefault(u => u.Equipment.Name == eq);
            if (putOnEquipment is not null)
            {
                putOnEquipment.IsEquipped = true;
                putOnEquipment.SlotType = SlotType;
                SelectedItem = putOnEquipment;
            }

            OnGearChange.InvokeAsync();
        }
        catch (Exception ex)
        {
            ;
            // IsLoading = false;
           // await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }
    }

}
