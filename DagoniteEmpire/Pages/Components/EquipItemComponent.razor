<div>
    <InputSelect class="form-select p-1" ValueExpression="@(()=>SelectedGear)"
            Value="@SelectedGear"
            ValueChanged="@((string value) => ChangeGear(value))">
        <option value="Empty">Empty</option>
        @foreach (var eq in AllGearsOfType)
        {
            <option value="@eq.Equipment.Name"> @eq.Equipment.Name</option>
        }
    </InputSelect>
</div>

@code {
    private string SelectedGear ="Empty";

    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }

    [Parameter]
    public string GearItem { get; set; } = "";
    private string GearType;

    public EquipmentSlotDTO? SelectedItem { get; set; }


    public ICollection<EquipmentSlotDTO> AllGearsOfType { get; set; } = new List<EquipmentSlotDTO>(); 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GearType = GearItem;
            if (GearType == "Ring1" || GearType == "Ring2") GearType = "Rings";
            SelectedItem = AllParams.Character?.EquipmentSlots?.FirstOrDefault(s => s.SlotType==GearType);
            if (SelectedItem is not null)
            {
                SelectedGear = SelectedItem.Equipment.Name;
            }
            ReloadGears();
        }
    }

    public void ReloadGears()
    {
        if (AllParams is not null)
        {
            AllGearsOfType = AllParams.EquipmentSlots.Where(u => u.SlotType == GearType).ToList();
            StateHasChanged();
        }
    }

    private async Task ChangeGear(string eq)
    {
        try
        {
            //unequip gear
            if (SelectedItem is not null)
            {
                SelectedItem.IsEquipped = false;
            }

            if (eq == "Empty")
                return;

            var putOnEquipment = AllParams.Character?.EquipmentSlots?.FirstOrDefault(u => u.Equipment.Name == eq);
            if (putOnEquipment is not null)
            {
                putOnEquipment.IsEquipped = true;
                SelectedItem = putOnEquipment;
            }

        }
        catch (Exception ex)
        {
            ;
            // IsLoading = false;
           // await _jsRuntime.ToastrError("Error in character sheet version. Please create new one");
        }
    }

}
