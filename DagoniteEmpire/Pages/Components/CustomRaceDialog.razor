<div class="race">
    <SfDialog Width="80%" Height="80%" @bind-Visible="@_customRaceComponent.IsVisible" IsModal="true" AllowDragging="true" CloseOnEscape="false" EnableResize="true">
        <DialogEvents Opened="@DialogOpen"></DialogEvents>
        <DialogTemplates>
            <Header>Create a new race</Header>
            <Content>
       
                 <div class="main-table">

                     @if (IsLoading)
                    {
                        <div class="text-center">
                            <img src="/images/loading.gif">
                        </div>
                    }
                    else
                    {
                        <div class="d-flex flex-column flex-grow-1">
                            <label class="fw-bold py-1">Race name</label>
                            <SfTextBox Placeholder="Insert race name" @bind-Value="@_customRaceComponent.RaceDTO.Name"></SfTextBox>
                        </div>
                        <div class="d-flex flex-column flex-grow-1">
                            <label class="fw-bold  p-1">Trait description</label>
                            <SfRichTextEditor Height="250px" @ref="DescrEdit" @bind-Value="@_customRaceComponent.RaceDTO.Description" ShowTooltip="true">
                                <RichTextEditorToolbarSettings Items="@Tools" Type="ToolbarType.MultiRow" />
                            </SfRichTextEditor>
                        </div>
                        
                        <label class="fw-bold pt-4">Bonuses and penalties</label>
                        @if (_customRaceComponent.RaceDTO.Traits != null)
                        {
                            <div class="traits">
                                <TraitsComponent Attributes="@Attributes" BaseSkills="@BaseSkills" SpecialSkills="@SpecialSkills" @bind-Traits="@CustomRaceComponent.Traits" TraitType="@TraitType"></TraitsComponent>
                            </div>
                        }
                    <label class="warnign-message">@ErrorMessage</label>
                    } 
                    
                </div>  
                
            </Content>
        </DialogTemplates>
        <DialogButtons>

            <DialogButton OnClick="@OnCancelBtnClick" Content="Cancel">
            </DialogButton>
            <DialogButton OnClick="@OnSaveRaceBtnClick" Content="Save" IsPrimary="true">
            </DialogButton>
        </DialogButtons>
    </SfDialog>

</div>

@code {
    [Parameter]
    public IEnumerable<AttributeDTO> Attributes { get; set; }
    [Parameter]
    public IEnumerable<BaseSkillDTO> BaseSkills { get; set; }
    [Parameter]
    public ICollection<SpecialSkillDTO> SpecialSkills { get; set; }

    private CustomRaceModel _customRaceComponent;
    private SfRichTextEditor DescrEdit;

    [Parameter]
    public CustomRaceModel CustomRaceComponent
    {
        get => _customRaceComponent;
        set{
            if (_customRaceComponent == value) return;
            _customRaceComponent = value;
            if (_customRaceComponent.RaceDTO != null)
            {
                _customRaceComponent.RaceDTO.Traits = new List<TraitRaceDTO>();
                foreach (var trait in _customRaceComponent.Traits)
                {
                    TraitRaceDTO raceTrait = new TraitRaceDTO(trait, _customRaceComponent.RaceDTO.Id);
                    _customRaceComponent.RaceDTO.Traits.Add(raceTrait);
                }
            }
            IsLoading = false;
            StateHasChanged();
            CustomRaceComponentChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<CustomRaceModel> CustomRaceComponentChanged { get; set; }

    private string TraitType { get; set; } = @SD.TraitType_Race;
    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsLoading { get; set; }= true;
    public bool IsAdminOrMG { get; set; } = false;

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    private async Task OnSaveRaceBtnClick()
    {
        if (CustomRaceComponent.Traits == null || CustomRaceComponent.Traits.Count() == 0)
        {
            ErrorMessage = $"There must be at least one trait in race";
            return;
        }
        if (string.IsNullOrEmpty(CustomRaceComponent.RaceDTO.Name) || string.IsNullOrEmpty(CustomRaceComponent.RaceDTO.Description))
        {
            ErrorMessage = $"Create name and description of race";
            return;
        }
        if (CustomRaceComponent.RaceDTO != null)
        {
            CustomRaceComponent.RaceDTO.Traits = new List<TraitRaceDTO>();
            foreach (var trait in CustomRaceComponent.Traits)
            {
                TraitRaceDTO raceTrait = new TraitRaceDTO(trait, CustomRaceComponent.RaceDTO.Id);
                CustomRaceComponent.RaceDTO.Traits.Add(raceTrait);
            }
        }

        ErrorMessage = string.Empty;
        CustomRaceComponent.IsVisible = false;

        await CustomRaceComponentChanged.InvokeAsync(CustomRaceComponent);
    }
    private async Task OnCancelBtnClick()
    {
        CustomRaceComponent.IsVisible = false;
    }
    private async Task DialogOpen()
    {

        this.DescrEdit.RefreshUI();
        ErrorMessage = string.Empty;
        StateHasChanged();
    }
}
