@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject IUserService _userService
@inject NavigationManager _navigationManager
<div class="equipment">
    <h3 class="my-3 ml-3 text-center">EQUIPMENT</h3>
    <div class="table-container">
        <table class="table align-middle">
            <thead>
                <tr>
                    <th scope="col" class="name-row">Name</th>
                    <th scope="col" class="value-row text-center">Count</th>
                    <th scope="col" class="value-row text-center">Price</th>
                    <th scope="col" class="value-row text-center">Weight</th>
                    <th scope="col" class="action-row text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var obj in AllParams.EquipmentSlots)
                {
                    <tr>
                        <td class="nobottomborder">
                            <label class="name-label">@obj.Equipment.Name</label>
                        </td>
                        <td class="text-center nobottomborder">
                            <div class="control">
                                <span class="indicator">@obj.Count</span>
                                <div class="arrows">
                                    <button @onclick="@(()=>IncrCount(obj))" class="carret"><i class="fa-regular fa-square-caret-up align-top"></i></button>
                                    <button @onclick="@(()=>DecrCount(obj))" class="carret"><i class="fa-regular fa-square-caret-down align-top"></i></button>
                                </div>
                            </div>
                        </td>
                        <td class="text-center nobottomborder">
                            <label class="text-label text-center">@obj.Price.ToString("F3")</label>
                        </td>
                        <td class="text-center nobottomborder">
                            <label class="text-label text-center">@obj.Weight.ToString("F1")</label>
                        </td>
                        <td class="text-center nobottomborder">
                            <div class="row m-0">
                                @if (obj.Equipment.IsApproved == false || UserInfo?.IsAdminOrMG == true)
                                {
                                    <button @onclick="@(()=>EditEquipment(obj))" class="col btn-small"><i class="fa-solid fa-pencil"></i></button>
                                    <button @onclick="@(()=>DeleteEquipment(obj))" class="col btn-small"><i class="fa-solid fa-trash"></i></button>
                                }
                            </div>
                        </td>
                    </tr>
                    <tr >
                        <td colspan="5">
                            <label class="text-label">@obj.Equipment.ShortDescr</label>
                        </td>
                    </tr>
                }
                <tr>
                    <td class="">
                        <label class="name-label">All equipment: </label>
                    </td>
                    <td >
                        
                    </td>
                    <td class="text-center">
                        <label class="text-label text-center">@EquipmentPrice.ToString("F3")</label>
                    </td>
                    <td class="text-center">
                        <label class="text-label text-center">@EquipmentWeight.ToString("F1")</label>
                    </td>
                    <td class="text-center">
                       
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="buttons-row">
            <button @onclick="@(()=>AddCustomEquipment())" class="add-trait">Add new</button>
            <button @onclick="@(()=>AddExistingEquipment())" class="add-trait">Existing items</button>
            @if (AllParams.Character.IsApproved == true && PageMode == false)
            {
                <button @onclick="@(()=>GoToItemPage())" class="add-trait">Details</button>
            }
        </div>
    </div>


    @if (CustomEquipmentComponent != null)
    {
        <CustomEquipmentDialog @bind-CustomEquipmentComponent="@CustomEquipmentComponent"></CustomEquipmentDialog>
    }
    @if (EquipmentChosen != null)
    {
        <ExistingEquipmentDialog @bind-EquipmentChosen="@EquipmentChosen"></ExistingEquipmentDialog>
    }
</div>

@code {
    [CascadingParameter]
    public AllParamsModel AllParams { get; set; } = new();

    [Parameter]
    public EventCallback OnTraitsChange { get; set; }

    [Parameter]
    public bool PageMode { get; set; }

    UserInfo? UserInfo { get; set; }

    private SfRichTextEditor DescrEdit = new();

    private decimal EquipmentWeight;
    private decimal EquipmentPrice;


    private CustomEquipmentModel _customEquipmentComponent = new();
    private CustomEquipmentModel CustomEquipmentComponent
    {
        get => _customEquipmentComponent;
        set
        {
            if (value.EquipmentSlotDTO != null)
            {
                var obj = AllParams.EquipmentSlots.FirstOrDefault(u => u.Equipment.Name == value.EquipmentSlotDTO.Equipment.Name);
                if (obj == null)
                {
                    AllParams.EquipmentSlots.Add(value.EquipmentSlotDTO);

                }
                else
                {
                    obj = value.EquipmentSlotDTO;
                }

                AllParams.GearChange();
                OnTraitsChange.InvokeAsync();
            }
            if (_customEquipmentComponent == value) return;
            _customEquipmentComponent = value;
        }
    }

    private EquipmentChosenModel _equipmentChosen = new ();
    private EquipmentChosenModel EquipmentChosen
    {
        get => _equipmentChosen;
        set
        {
            if (value.EquipmentChosen != null && value.EquipmentChosen.Count() > 0)
            {
                foreach (var equ in value.EquipmentChosen)
                {
                    if (AllParams.EquipmentSlots.FirstOrDefault(u => u.Equipment.Name == equ.Equipment.Name) == null)
                    {
                        AllParams.EquipmentSlots.Add(equ);
                    }
                }
                AllParams.GearChange();
                OnTraitsChange.InvokeAsync();
                CalculateEquipWeightAndPrice();

            }
            if (_equipmentChosen == value) return;
            _equipmentChosen = value;

        }
    }

    private async Task CalculateEquipWeightAndPrice()
    {
        EquipmentWeight = 0.0m;
        EquipmentPrice = 0.0m;
        foreach (var slot in AllParams.EquipmentSlots)
        {
            EquipmentWeight += slot.Equipment.Weight;
            EquipmentPrice += slot.Equipment.Price;
        }
        StateHasChanged();
    }

    private async Task AddCustomEquipment()
    {
        CustomEquipmentComponent.EquipmentSlotDTO = new();
        CustomEquipmentComponent.Traits = new List<TraitDTO>();
        CustomEquipmentComponent.IsVisible = true;
    }
    private async Task AddExistingEquipment()
    {
        EquipmentChosen = new();
        EquipmentChosen.IsVisible = true;
    }

    private async Task GoToItemPage()
    {
        _navigationManager.NavigateTo($"/equipment/{AllParams.Character.Id}");
    }

    private async Task EditEquipment(EquipmentSlotDTO slot)
    {
        CustomEquipmentComponent.EquipmentSlotDTO = slot;
        CustomEquipmentComponent.Traits = CustomEquipmentComponent.EquipmentSlotDTO.Equipment?.Traits.OfType<TraitDTO>().ToList();
        CustomEquipmentComponent.IsVisible = true;
        CustomEquipmentComponent.IsEditMode = true;
        CalculateEquipWeightAndPrice();
    }

    private async Task DeleteEquipment(EquipmentSlotDTO slot)
    {
        if (slot.Id != 0)
        {

            if (slot.Equipment.IsApproved == false)
            {
               // await _traitEquipmentRepository.Delete(slot.Equipment.Id);

            }
        }
        AllParams.EquipmentSlots = AllParams.EquipmentSlots.Where(u => u.Equipment.Name != slot.Equipment.Name).ToList();
        await AllParams.GearChange();
        OnTraitsChange.InvokeAsync();
        CalculateEquipWeightAndPrice();
    }


    private async Task IncrCount(EquipmentSlotDTO obj)
    {

        decimal unitWeigh = obj.Equipment.Weight / obj.Count;
        decimal unitPrice = obj.Equipment.Price / obj.Count;
        obj.Count++;
        obj.Equipment.Weight = unitWeigh * obj.Count;
        obj.Equipment.Price = unitPrice * obj.Count;

        CalculateEquipWeightAndPrice();
    }

    private async Task DecrCount(EquipmentSlotDTO obj)
    {
        if (obj.Count>1)
        {
            decimal unitWeigh = obj.Equipment.Weight / obj.Count;
            decimal unitPrice = obj.Equipment.Price / obj.Count;

            obj.Count--;

            obj.Weight = unitWeigh * obj.Count;
            obj.Price = unitPrice * obj.Count;
            CalculateEquipWeightAndPrice();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UserInfo = await _userService.GetUserInfo();
            CalculateEquipWeightAndPrice();
        }
    }
}