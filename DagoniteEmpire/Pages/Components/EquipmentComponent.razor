@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject IUserService _userService
@inject IBrowserViewportService _vieportService
@using DialogOptions = MudBlazor.DialogOptions
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
<div class="equipment">
    <h3 class="my-3 ml-3 text-center">EQUIPMENT</h3>
    <div class="table-container" >
        <table class="table align-middle" >
            <thead>
                <tr>
                    <th scope="col" class="name-row">Name</th>
                    <th scope="col" class="value-row text-center">Count</th>
                    <th scope="col" class="value-row text-center">Price</th>
                    <th scope="col" class="value-row text-center">Weight</th>
                    <th scope="col" class="action-row text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var obj in AllParams.EquipmentSlots)
                {
                    <tr>
                        <td class="nobottomborder">
                            <label class="name-label">@obj.Equipment.Name</label>
                        </td>
                        <td class="text-center nobottomborder">
                            <div class="control">
                                <span class="indicator">@obj.Count</span>
                                <div class="arrows">
                                    <button @onclick="@(()=>IncrCount(obj))" class="carret"><i class="fa-regular fa-square-caret-up align-top"></i></button>
                                    <button @onclick="@(()=>DecrCount(obj))" class="carret"><i class="fa-regular fa-square-caret-down align-top"></i></button>
                                </div>
                            </div>
                        </td>
                        <td class="text-center nobottomborder">
                            <label class="text-label text-center">@obj.Price.ToString("F3")</label>
                        </td>
                        <td class="text-center nobottomborder">
                            <label class="text-label text-center">@obj.Weight.ToString("F1")</label>
                        </td>
                        <td class="text-center nobottomborder">
                            <div class="row m-0">
                                @if (obj.Equipment.IsApproved == false || UserInfo?.IsAdminOrMG == true)
                                {
                                    <button @onclick="@(()=>EditEquipment(obj))" class="col btn-small"><i class="fa-solid fa-pencil"></i></button>
                                }
                                else
                                {
                                    <button @onclick="@(()=>EditEquipment(obj))" class="col btn-small"><i class="fa-solid fa-info"></i></button>
                                }
                                <button @onclick="@(()=>DeleteEquipment(obj))" class="col btn-small"><i class="fa-solid fa-trash"></i></button>

                            </div>
                        </td>
                    </tr>
                    <tr >
                        <td colspan="5">
                            <label class="text-label">@obj.Equipment.ShortDescr</label>
                        </td>
                    </tr>
                }
                <tr>
                    <td class="">
                        <label class="name-label">All equipment: </label>
                    </td>
                    <td >
                    </td>
                    <td class="text-center">
                        <label class="text-label text-center">@EquipmentPrice.ToString("F3")</label>
                    </td>
                    <td class="text-center">
                        <label class="text-label text-center">@EquipmentWeight.ToString("F1")</label>
                    </td>
                    <td class="text-center">
                       
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="buttons-row">
            <button @onclick="@(()=>AddCustomEquipment())" class="add-trait">Add new</button>
            <button @onclick="@(()=>AddExistingEquipment())" class="add-trait">Existing items</button>
            @if (AllParams.Character.IsApproved == true && PageMode == false)
            {
                <button @onclick="@(()=>GoToItemPage())" class="add-trait">Details</button>
            }
        </div>
    </div>

</div>

@code {
    [CascadingParameter]
    public AllParamsModel AllParams { get; set; } = new();

    [Parameter]
    public EventCallback OnTraitsChange { get; set; }

    [Parameter]
    public bool PageMode { get; set; }

    UserInfo? UserInfo { get; set; }

    private SfRichTextEditor DescrEdit = new();

    private decimal EquipmentWeight;
    private decimal EquipmentPrice;


    private void CalculateEquipWeightAndPrice()
    {
        EquipmentWeight = 0.0m;
        EquipmentPrice = 0.0m;
        foreach (var slot in AllParams.EquipmentSlots)
        {
            EquipmentWeight += slot.Weight;
            EquipmentPrice += slot.Price;
        }

    }

    private async Task AddCustomEquipment()
    {
        EquipmentSlotDTO NewSlot = new();
        var parameters = new DialogParameters<CreateEquipmentSlotDialog> {  { x => x.NewSlot, NewSlot },
                                                                          { x => x.AllParams, AllParams } };

        var dialog = await DialogService.ShowAsync<CreateEquipmentSlotDialog>("Create new item", parameters, await SetOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NewSlot =  (EquipmentSlotDTO)result.Data;
            var obj = AllParams.EquipmentSlots.FirstOrDefault(u => u.Equipment.Name == NewSlot.Equipment.Name);
            if (obj == null)
            {
                AllParams.EquipmentSlots.Add(NewSlot);

            }
            else
            {
                obj = NewSlot;
            }
            await UpdateEquipment();
        }
    }
    private async Task AddExistingEquipment()
    {
        List<EquipmentSlotDTO> SelectedEquipment = new List<EquipmentSlotDTO>();
        var parameters = new DialogParameters<ExistingEquipmentSelectDialog> {  { x => x.SelectedEquipment, SelectedEquipment },
                                                                                { x => x.AllParams, AllParams } };

        var dialog = await DialogService.ShowAsync<ExistingEquipmentSelectDialog>("Create new item", parameters, await SetOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            SelectedEquipment = (List<EquipmentSlotDTO>)result.Data;
            if (SelectedEquipment is not null && SelectedEquipment.Any())
            {
                foreach (var equ in SelectedEquipment)
                {
                    if (AllParams.EquipmentSlots.FirstOrDefault(u => u.Equipment.Name == equ.Equipment.Name) == null)
                    {
                        AllParams.EquipmentSlots.Add(equ);
                    }
                }
                await UpdateEquipment();
            }
        }
    }

    private void GoToItemPage()
    {
        _navigationManager.NavigateTo($"/equipment/{AllParams.Character.Id}");
    }

    private async Task EditEquipment(EquipmentSlotDTO slot)
    {
        var parameters = new DialogParameters<CreateEquipmentSlotDialog> {  { x => x.NewSlot, slot },
                                                                            { x => x.AllParams, AllParams } };

        var dialog = await DialogService.ShowAsync<CreateEquipmentSlotDialog>("Edit item", parameters, await SetOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            slot = (EquipmentSlotDTO)result.Data;
            await UpdateEquipment();
        }
    }

    private async Task DeleteEquipment(EquipmentSlotDTO slot)
    {
        AllParams.EquipmentSlots = AllParams.EquipmentSlots.Where(u => u.Equipment.Name != slot.Equipment.Name).ToList();
        await UpdateEquipment();
    }
    private async Task UpdateEquipment()
    {
        AllParams.GearChange();
        await OnTraitsChange.InvokeAsync();
        CalculateEquipWeightAndPrice();
        StateHasChanged();
    }
    private void IncrCount(EquipmentSlotDTO obj)
    {
        obj.Count++;
        CalculateEquipWeightAndPrice();
    }

    private void DecrCount(EquipmentSlotDTO obj)
    {
        if (obj.Count>1)
        {
            obj.Count--;
            CalculateEquipWeightAndPrice();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UserInfo = await _userService.GetUserInfo();
            CalculateEquipWeightAndPrice();
        }
    }

    private async Task<DialogOptions> SetOptions(MaxWidth maxWidth = MaxWidth.Large)
    {
        DialogOptions options = new() { MaxWidth = maxWidth };
        if (await _vieportService.GetCurrentBreakpointAsync() <= Breakpoint.Md)
            options.FullScreen = true;
        return options;
    }

}