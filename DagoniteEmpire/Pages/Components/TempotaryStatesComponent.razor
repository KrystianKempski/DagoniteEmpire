
@inject IDialogService DialogService
@inject IUserService _userService
@inject IBrowserViewportService _vieportService
@using DialogOptions = MudBlazor.DialogOptions
<div class="traits">
    <div class="table-container">
        <table class="table align-middle">
            <thead>
                <tr>
                    <th scope="col" class="name-row">Name</th>
                    <th scope="col" class="description-row">Description</th>
                    @if (TraitType == SD.TraitType_Character)
                    {
                        <th scope="col" class="trait-value-row text-center">Value</th>
                    }
                    @if (IsInfoMode == false)
                    {
                        <th scope="col" class="action-row text-center">Actions</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var obj in Traits)
                {
                    <tr>
                        <td>
                            <label class="name-label">@obj.Name</label>
                        </td>
                        <td>
                            <label class="name-label">@obj.SummaryDescr</label>
                        </td>
                        @if (TraitType == SD.TraitType_Character)
                        {
                            <td class="text-center">
                                <label class="name-label text-center">@obj.TraitValue</label>
                            </td>
                        }
                        @if (IsInfoMode == false)
                        {
                            <td>
                                <div class="row m-0">
                                    @if (obj.TraitApproved)
                                    {
                                        <button @onclick="@(()=>EditTrait(obj))" class="col btn-small"><i class="fa-solid fa-info"></i></button>
                                    }
                                    else
                                    {
                                        <button @onclick="@(()=>EditTrait(obj))" class="col btn-small"><i class="fa-solid fa-pencil"></i></button>
                                    }
                                    <button @onclick="@(()=>DeleteTrait(obj))" class="col btn-small"><i class="fa-solid fa-trash"></i></button>
                                </div>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="row">
        @if (TraitType == SD.TraitType_Character && (UserInfo?.IsAdminOrMG == true || AllParams.Character.IsApproved == false))
        {
            <label class="balance">Traits balance: @AllParams.Character.TraitBalance </label>
        }

        @if (IsInfoMode == false || UserInfo?.IsAdminOrMG == true || AllParams.Character.IsApproved == false || TraitType != SD.TraitType_Character)
        {
            <div class="buttons-row">
                <button @onclick="@(()=>AddCustomTrait())" class="add-trait">Add @TraitName</button>
                <button @onclick="@(()=>AddExistingTrait())" class="add-trait">Existing @TraitName</button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public ICollection<TraitDTO> Traits { get; set; } = new List<TraitDTO>();
    [Parameter]
    public EventCallback<ICollection<TraitDTO>> TraitsChanged { get; set; }
    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }
    [Parameter]
    public EventCallback OnTraitsChange { get; set; }
    [Parameter]
    public string TraitType { get; set; } = string.Empty;
    [Parameter]
    public bool WeaponQualityAvalible { get; set; } = false;
    public UserInfo? UserInfo { get; set; }
    [Parameter]
    public bool IsInfoMode { get; set; } = false;
    [Parameter]
    public string TraitName { get; set; } = "Trait";

    protected override async Task OnInitializedAsync()
    {
        UserInfo = await _userService.GetUserInfo();
    }

    private async Task AddCustomTrait()
    {
        TraitDTO NewTrait = new TraitCharacterDTO(true);
        var parameters = new DialogParameters<CreateTraitDialog> {  { x => x.NewTrait, NewTrait },
                                                                    { x => x.AllParams, AllParams } };


        var dialog = await DialogService.ShowAsync<CreateTraitDialog>("Create trait", parameters, await SetOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NewTrait = (TraitDTO)result.Data;
            Traits.Add(NewTrait);
            await UpdateTraits();
        }
    }

    private async Task AddExistingTrait()
    {
        List<TraitDTO> ChosenTraits = new List<TraitDTO>();
        var parameters = new DialogParameters<ExistingTraitDialog> { { x => x.ChosenTraits, ChosenTraits },
                                                                   { x => x.TraitType, TraitType },
                                                                   { x => x.AllParams, AllParams }};

        var dialog = await DialogService.ShowAsync<ExistingTraitDialog>("Select traits", parameters, await SetOptions());
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            ChosenTraits = (List<TraitDTO>)result.Data;
            if (ChosenTraits is null)
                throw new Exception("error in trait selection dialog");

            foreach (var trait in ChosenTraits)
            {
                if (Traits.FirstOrDefault(u => u.Name == trait.Name) == null)
                {
                    Traits.Add(trait);
                }
            }
            await UpdateTraits();
        }
    }

    private async Task<DialogOptions> SetOptions(MaxWidth maxWidth = MaxWidth.Medium)
    {
        DialogOptions options = new() { MaxWidth = maxWidth };
        if (await _vieportService.GetCurrentBreakpointAsync() <= Breakpoint.Md)
            options.FullScreen = true;
        return options;
    }

    private async Task EditTrait(TraitDTO trait)
    {
        bool IsInfoMode = false, IsWeaponQualityMode = false;
        if (trait.TraitApproved)
            IsInfoMode = true;
        if (trait.TraitType == SD.TraitType_Gear && trait.Bonuses.First().FeatureType == SD.FeatureWeaponQuality)
            IsWeaponQualityMode = true;
        else
            IsWeaponQualityMode = false;

        var parameters = new DialogParameters<CreateTraitDialog> { { x => x.NewTrait, trait },
                                                                   { x => x.IsEditMode, true },
                                                                   { x => x.AllParams, AllParams },
                                                                   { x => x.IsWeaponQualityMode, IsWeaponQualityMode },
                                                                   { x => x.IsInfoMode, IsInfoMode }};

        var dialog = await DialogService.ShowAsync<CreateTraitDialog>("Edit trait", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            trait = (TraitDTO)result.Data;
            await UpdateTraits();
        }
    }

    private async Task DeleteTrait(TraitDTO trait)
    {
        Traits = Traits.Where(u => u.Name != trait.Name).ToList();
        await UpdateTraits();
    }

    private async Task UpdateTraits()
    {
        await TraitsChanged.InvokeAsync(Traits);
        await OnTraitsChange.InvokeAsync();
        StateHasChanged();
    }
}
