<div class="traits">

    <SfDialog Width="50%" Height="50%" @bind-Visible="@_traitComponent.IsVisible" IsModal="true" AllowDragging="true" CloseOnEscape="false" EnableResize="true">
        <DialogEvents Opened="@DialogOpen"></DialogEvents>
        <DialogTemplates>
            <Header>Create a new Trait</Header>
            <Content>
                 <div class="main-table">

                    @if (IsLoading)
                    {
                        <div class="text-center">
                            <img src="/images/loading.gif">
                        </div>
                    }
                    else
                    {
                         <div class="container">
                            <div class="row align-items-start">
                                <div class="col-10 p-1">
                                    <label class="fw-bold">Trait name</label>
                                </div>
                                <div class="col-2 p-1">
                                    <label class="fw-bold">Trait value</label>
                                </div>
                                </div>
                            <div class="row align-items-start">
                                <div class="col-10 bonus-name">
                                    <SfTextBox Placeholder="Insert trait name" @bind-Value="@_traitComponent.TraitDTO.Name"></SfTextBox>
                                </div>
                                <div class="col-2 bonus-name">
                                    <SfNumericTextBox TValue="int" @bind-Value="@_traitComponent.TraitDTO.TraitValue"></SfNumericTextBox>
                                </div>
                            </div>
                        </div>


                        <label class="fw-bold pt-4">Bonuses and penalties</label>
                        @if (_traitComponent.TraitDTO.Bonuses != null)
                        {
                            @foreach (var obj in _traitComponent.TraitDTO.Bonuses)
                            {
                                <label class="bonus-cell">Bonus @obj.Index</label>
                                <div class="bonuses-columns">
                                        <div class="bonus-cell">
                                        <SfDropDownList TValue="string" TItem=string Width="100%" Placeholder="Select a feature type" DataSource="@FeatureData" @bind-Value="@obj.FeatureType"></SfDropDownList>
                                        </div>
                                    @if (obj.FeatureType == "Attribute")
                                    {
                                        <div class="bonus-cell">
                                            <SfDropDownList TValue="string" TItem="AttributeDTO" Width="100%" Placeholder="Select an Attribute " DataSource="@Attributes" @bind-Value="@obj.FeatureName">
                                                <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    }
                                    else if (obj.FeatureType == "Base skill")
                                    {
                                        <div class="bonus-cell">
                                            <SfDropDownList TValue="string" TItem="BaseSkillDTO" Width="100%" Placeholder="Select base skill " DataSource="@BaseSkills" @bind-Value="@obj.FeatureName">
                                                <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    }
                                    else if (obj.FeatureType == "Special skill")
                                    {
                                        <div class="bonus-cell">
                                            <SfDropDownList TValue="string" TItem="SpecialSkillDTO" Width="100%" Placeholder="Select special skill " DataSource="@SpecialSkills" @bind-Value="@obj.FeatureName">
                                                <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    }
                                    else if(obj.FeatureType == "Other")
                                    {
                                        <div class="bonus-double-cell">
                                            <SfTextBox Multiline=true Placeholder="Insert bonus description" @bind-Value="@obj.Description"></SfTextBox>

                                        </div>
                                    }
                                    @if (@obj.FeatureName != null && @obj.FeatureType!="Other")
                                    {
                                        <div class="bonus-cell">
                                            <SfNumericTextBox Width="100%%" TValue="int" @bind-Value="@obj.BonusValue"></SfNumericTextBox>
                                        </div>
                                    }

                                </div>
                            }
                        }
                        <button class="add-bonus-button" @onclick="OnAddBonusBtnClick"><i class="fa-solid fa-plus"></i></button>
                    <label class="warnign-message">@ErrorMessage</label>
                    } 
                </div> 

            </Content>
        </DialogTemplates>
        <DialogButtons>

            <DialogButton OnClick="@OnCancelBtnClick" Content="Cancel">
            </DialogButton>
            <DialogButton OnClick="@OnSaveTraitBtnClick" Content="Save" IsPrimary="true">
            </DialogButton>
        </DialogButtons>
    </SfDialog>

</div>

@code {
    [Parameter]
    public IEnumerable<AttributeDTO> Attributes { get; set; }
    [Parameter]
    public IEnumerable<BaseSkillDTO> BaseSkills { get; set; }
    [Parameter]
    public IEnumerable<SpecialSkillDTO> SpecialSkills { get; set; }
    [Parameter]
    public IEnumerable<TraitDTO> Traits { get; set; }
    [Parameter]
    public EventCallback<TraitCompModel> TraitCompChanged { get; set; }

    TraitCompModel _traitComponent;

    [Parameter]
    public TraitCompModel TraitComp 
    {
        get => _traitComponent;
        set{
            if (_traitComponent == value) return;
            _traitComponent = value;
            IsLoading = false;
            StateHasChanged();
            TraitCompChanged.InvokeAsync(value);
        }
    }

    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsLoading { get; set; }= true;

    private bool IsTraitDialVisible = false;


    private string SelectedFeature { get; set; }
    List<string> FeatureData = new List<string>
    {
        "Attribute",
        "Base skill",
        "Special skill",
        "Other",
    };
    private string BonusLabel { get; set; } = "Bonus 1";


    private async Task OnSaveTraitBtnClick()
    {

        if (TraitComp.TraitDTO.Bonuses == null || TraitComp.TraitDTO.Bonuses.Count == 0)
        {
            ErrorMessage = $"There must be at least one bonus in trait";
            return;
        }
        foreach (var bonus in TraitComp.TraitDTO.Bonuses)
        {
            if (bonus.BonusValue == 0 && bonus.Description==string.Empty)
            {
                ErrorMessage = $"Please fill all input fiels in bonus";
                return;
            }
            if (bonus.BonusValue == 0 && bonus.Description == string.Empty)
            {
                ErrorMessage = $"Please fill all input fiels in bonus";
                return;
            }
        }
        if(!TraitComp.TraitDTO.Bonuses.GroupBy(x => x.FeatureName).All(g => g.Count() == 1))
        {
            ErrorMessage = $"Bonuses cannor relate to the same feature more than once";
            return;
        }

        if(TraitComp.IsEditMode == false && Traits.Where(t => t.Name == TraitComp.TraitDTO.Name).Count()>0)
        {
            ErrorMessage = $"That trait name already exists";
            return;
        }

        ErrorMessage = string.Empty;

        TraitComp.IsVisible = false;
        TraitComp.TraitDTO.Descr = string.Empty;
        foreach (var bonus in TraitComp.TraitDTO.Bonuses)
        {

            if (bonus.Description != null && bonus.Description.Length > 0)
            {
                TraitComp.TraitDTO.Descr += bonus.Description + "; ";
            }
            else
            {
                string val;
                if (bonus.BonusValue > 0)
                    val = $"+{bonus.BonusValue}";
                else
                    val = $"{bonus.BonusValue}";
                TraitComp.TraitDTO.Descr += $"{val} to {bonus.FeatureName}; ";
            }

        }
        await TraitCompChanged.InvokeAsync(TraitComp);
    }
    private async Task OnCancelBtnClick()
    {
        TraitComp.IsVisible = false;
    }
    private void DialogOpen()
    {
        ErrorMessage = string.Empty;
        StateHasChanged();
    }
    private async Task OnAddBonusBtnClick()
    {
        ErrorMessage = string.Empty;
        if (TraitComp.TraitDTO.Bonuses == null)
            TraitComp.TraitDTO.Bonuses = new List<BonusDTO>();
        var bonus = new BonusDTO();
        bonus.Index = TraitComp.TraitDTO.Bonuses.Count() +1;
        TraitComp.TraitDTO.Bonuses.Add(bonus);
    }


    // private void OnStartTraitDialog()
    // {
    //     IsTraitDialVisible = true;
    // }

}
