@inject IJSRuntime _jsRuntime

<div class="baseskills">
    <MudPaper Class="pa-2 m-0 w-100 h-100">

    <div class="sheet-img">
        @*  <img src="../images/old_paper2.png" class="stretch" /> *@
    </div>
    <h3 class="my-3 ml-3 text-center">BASE SKILLS</h3>
    <table class="table align-middle m-0">
        <thead>
            <tr>
                <th scope="col" class="name-row">Skill</th>
                <th scope="col" class="bonus-row text-center"> <MudTooltip Placement="MudBlazor.Placement.Top" Text="Base">Base</MudTooltip></th>
                <th scope="col" class="info-row text-center"> <MudTooltip Placement="MudBlazor.Placement.Top" Text="Race bonus"> Rc</MudTooltip></th>
                <th scope="col" class="info-row text-center"><MudTooltip Placement="MudBlazor.Placement.Top" Text="Gear bonus">Gr</MudTooltip></th>
                <th scope="col" class="info-row text-center"><MudTooltip Placement="MudBlazor.Placement.Top" Text="Trait bonus">Tr</MudTooltip></th>
                <th scope="col" class="info-row text-center"> <MudTooltip Placement="MudBlazor.Placement.Top" Text="Other bonuses">Ot</MudTooltip></th>
                <th scope="col" class="info-row text-center"><MudTooltip Placement="MudBlazor.Placement.Top" Text="Temporary bonuses">Tp</MudTooltip></th>
                <th scope="col" class="sum-row text-center"> <MudTooltip Placement="MudBlazor.Placement.Top" Text="Sum of all bonuses"> Sum</MudTooltip></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obj in AllParams.BaseSkills)
            {
                <tr>
                    <td>
                        <label class="names-label">@obj.Name.ToUpper()</label>
                    </td>
                    <td>
                        <div class="attr-control">
                            <span class="attr-indicator">@obj.BaseBonus</span>
                            @if (AllParams.Character.CurrentExpPoints > 0 || AllParams.Character.IsApproved == false)
                            {
                                <div class="arrows">
                                    <button @onclick="@(()=>IncrBSBonus(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-up align-top"></i></button>
                                    <button @onclick="@(()=>DecrBSBonus(obj))" class="attr-carret"><i class="fa-regular fa-square-caret-down align-top"></i></button>
                                </div>
                            }
                        </div>
                    </td>
                    <td>
                        <div class="attr-control">
                            <span class="info-indicator">@obj.RaceBonus</span>
                        </div>
                    </td>
                    <td>
                        <div class="attr-control">
                            <span class="info-indicator">@obj.GearBonus</span>
                        </div>
                    </td>
                    <td>
                        <div class="attr-control">
                            <span class="info-indicator">@obj.TraitBonus</span>
                        </div>
                    </td>
                    <td>
                        <div class="attr-control">
                            <span class="info-indicator">@obj.OtherBonuses</span>
                        </div>
                    </td>
                    <td>
                        <div class="attr-control">
                            <span class="info-indicator">@obj.TempBonuses</span>
                        </div>
                    </td>
                    <td>
                        <div class="sum-control">
                            <span class="sum-indicator">@obj.SumBonus</span>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    </MudPaper>
</div>


@code {

    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }
    [Parameter]
    public EventCallback OnBaseSkillsChange { get; set; }

    private async Task IncrBSBonus(BaseSkillDTO obj)
    {
        try
        {
            if (AllParams.Attributes is null)
                return;
            var relatedAttribute1 = AllParams.Attributes.Get(obj.RelatedAttribute1).BaseBonus;
            var relatedAttribute2 = AllParams.Attributes.Get(obj.RelatedAttribute2).BaseBonus;
            var limit = Math.Floor((double)(relatedAttribute1 + relatedAttribute2) / 6.0) + 1;
            var expChange = 0;
            string message;

            if (obj.BaseBonus < limit)
            {
                expChange = 3 * (obj.BaseBonus + 1);
                if (AllParams.Character.CurrentExpPoints >= expChange)
                {
                    AllParams.Character.CurrentExpPoints -= expChange;
                    AllParams.Character.UsedExpPoints += expChange;
                    obj.BaseBonus++;
                    await OnBaseSkillsChange.InvokeAsync();
                }
                else
                    await _jsRuntime.BaseSkillLimit("Not enought experience points");
            }
            else
            {
                message = "Maximum base bonus is limited by: " + obj.RelatedAttribute1 + " and " + obj.RelatedAttribute2 + " to value of " + limit.ToString();
                await _jsRuntime.BaseSkillLimit(message);
            }
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError("Error in character sheet version. Please create new one: " + ex.Message);
        }
    }

    private async Task DecrBSBonus(BaseSkillDTO obj)
    {
        if (AllParams.Character.IsApproved == true)
        {
            await _jsRuntime.BaseSkillLimit("To revert changes refresh page without saving");
            return;
        }

        var expChange = 3 * obj.BaseBonus;
        if (obj.BaseBonus > 0)
        {
            AllParams.Character.CurrentExpPoints += expChange;
            AllParams.Character.UsedExpPoints -= expChange;
            obj.BaseBonus--; 
            await OnBaseSkillsChange.InvokeAsync();
        }
    }
}
