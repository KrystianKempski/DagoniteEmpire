@inject IDialogService DialogService
@inject IBrowserViewportService _vieportService
<div class="race">
    <MudPaper Class="pa-2 m-0  w-100 h-100 overflow-auto">

    <div class="sheet-img">
        @* <img src="../images/old_paper2.png" class="stretch" /> *@
    </div>
    <h3 class="my-3 ml-3 text-center">RACE</h3>
    @if(AllParams.Character.IsApproved == false )
    {
        <InputSelect style="width: 100%; padding: 2px 0px 2px 0px; background-color: transparent; border: 1px solid RGB(206 212 218); border-radius: 4px;"
                         ValueExpression="@(()=>SelectedRace)"
                         Value="@SelectedRace"
                         ValueChanged="@((string value) => ChangeRace(value))">
            <option value="0" selected disabled>--Select Race--</option>
            @foreach (var race in AllParams.Races)
            {
                <option value="@race.Name">@race.Name</option>
            }
            <option value="Custom race">Custom race</option>
        </InputSelect>
        @if (ShowNameLabel)
        {
            <InputText  style="width: 100%;font-size: 14px;padding: 2px 2px 2px 2px; margin: 6px 0px 4px 0px; border: 1px solid RGB(206 212 218); border-radius: 4px; background-color: transparent;" @bind-Value="@AllParams.CurrentRace.Name" class=""></InputText>
        }
    }else{
        <InputText readonly style="width: 100%;padding: 2px 2px 2px 2px; margin: 6px 0px 4px 0px;; background-color: transparent; border: 1px solid RGB(206 212 218); border-radius: 4px; background-color:transparent;" @bind-Value="@AllParams.CurrentRace.Name"></InputText>
    }
    
    <label class="race-descr-label">Description</label>
    <div class="richtext-conteiner">
        <SfRichTextEditor Height="100%" @bind-Value="@AllParams.CurrentRace.Description" Readonly="true" ShowTooltip="false">
            <RichTextEditorToolbarSettings Enable="false"/>
        </SfRichTextEditor>
    </div>
    <label class="race-traits-label">Traits</label>
    <div class="flex-conteiner">
        <table class="table align-middle">
            <thead>
                <tr>
                    <th scope="col" class="name-row">Name</th>
                    <th scope="col" class="description-row">Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var obj in AllParams.CurrentRace.Traits)
                {
                    <tr>
                        <td>
                            <label class="name-label">@obj.Name</label>
                        </td>
                        <td>
                            <label class="name-label">@obj.SummaryDescr</label>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (ShowNameLabel && AllParams.Character.IsApproved == false)
        {
          <div class="d-flex justify-content-center"> <button @onclick="@(()=>EditCustomRace())" class="add-trait">Edit race</button></div>
        }
    </div>
    </MudPaper>
</div> 


@code {


    [CascadingParameter]
    public AllParamsModel AllParams { get; set; } = null;
    [Parameter]
    public EventCallback OnTraitsChange { get; set; }

    public RaceDTO CustomRace { get; set; } = new();
    private string SelectedRace { get; set; } = string.Empty;
    private bool ShowNameLabel { get; set; } = false;


    private async Task EditCustomRace()
    {
        RaceDTO newRace = AllParams.CurrentRace;

        var parameters = new DialogParameters<CreateRaceDialog> {  { x => x.NewRace, newRace }};

        var dialog = await DialogService.ShowAsync<CreateRaceDialog>("Create custom race", parameters, await SetOptions());
        var result = await dialog.Result;

        if (result?.Data is not null && !result.Canceled)
        {
            var createdRace = (RaceDTO)result.Data;
            var obj = AllParams.Races.FirstOrDefault(u => u.Id == newRace.Id);
            if (obj == null)
            {
                AllParams.Races.Add(newRace);

            }
            else
            {
                obj = newRace;
            }

            AllParams.RaceTraitsChange();
            await OnTraitsChange.InvokeAsync();
        }
    }


    private async Task ChangeRace(string raceName)
    {
        if (raceName == "Custom race")
        {
            ShowNameLabel = true;
            AllParams.CurrentRace = CustomRace;
        }
        else if (raceName == "Human")
        {
            HumanRaceModel humanRaceBonuses = new();
            var parameters = new DialogParameters<HumanRaceTraitsDialog> { { x => x.HumanRaceBonuses, humanRaceBonuses } };

            var dialog = await DialogService.ShowAsync<HumanRaceTraitsDialog>("Choose human bonuses", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                humanRaceBonuses = (HumanRaceModel)result.Data;
                RaceDTO humanRaceOld = AllParams.Races.FirstOrDefault(r => r.Name == "Human");
                RaceDTO humanRaceNew = new();
                humanRaceNew.Name = humanRaceOld.Name;
                humanRaceNew.RaceApproved = false;
                humanRaceNew.Description = humanRaceOld.Description;
                foreach (var tr in humanRaceOld.Traits)
                    humanRaceNew.Traits.Add(tr);
                TraitRaceDTO trait = new();
                //attribute bonus
                BonusDTO bonus = new(), bonus2 = new(), bonus3 = new();
                bonus.BonusValue = 2;
                bonus.FeatureName = humanRaceBonuses.AttributeNameBonus;
                bonus.FeatureType = SD.FeatureAttribute;
                bonus.Description = $"+ 2 {humanRaceBonuses.AttributeNameBonus}";
                trait.Bonuses = new List<BonusDTO>();
                trait.Bonuses.Add(bonus);
                //first base skill bonus
                bonus2.BonusValue = 1;
                bonus2.FeatureName = humanRaceBonuses.FirstSkillNameBonus;
                bonus2.FeatureType = SD.FeatureBaseSkill;
                bonus2.Description = $"+ 1 {humanRaceBonuses.FirstSkillNameBonus}";
                trait.Bonuses.Add(bonus2);
                //second base skill bonus
                bonus3.BonusValue = 1;
                bonus3.FeatureName = humanRaceBonuses.SecondSkillNameBonus;
                bonus3.FeatureType = SD.FeatureBaseSkill;
                bonus3.Description = $"+ 1 {humanRaceBonuses.SecondSkillNameBonus}";
                trait.Bonuses.Add(bonus3);
                //trait.SummaryDescr = $"{bonus.Description}, {bonus2.Description}, {bonus3.Description}";
                trait.Name = "Human race bonuses";
                trait.TraitType = SD.TraitType_Race;
                trait.Descr = "Bonuses to atributes and abilities";
                humanRaceNew.Traits.Add(trait);
                AllParams.CurrentRace = humanRaceNew;
            }

        }
        else
        {
            ShowNameLabel = false;
            AllParams.CurrentRace = AllParams.Races.FirstOrDefault(r => r.Name == raceName);
        }
        AllParams.RaceTraitsChange();
        await OnTraitsChange.InvokeAsync();
        SelectedRace = raceName;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CustomRace = AllParams.CurrentRace;
            if (!string.IsNullOrEmpty(AllParams.CurrentRace.Name))
            {
                var race = AllParams.Races.FirstOrDefault(r => r.Name == AllParams.CurrentRace.Name);
                if (race is not null && race.RaceApproved)
                {
                    SelectedRace = race.Name;
                    ShowNameLabel = false;
                }
                else
                {
                    SelectedRace = "Custom race";
                    ShowNameLabel = true;
                }
                if (AllParams.CurrentRace.RaceApproved == false)
                    CustomRace = AllParams.CurrentRace;
                else
                    CustomRace = new();

                StateHasChanged();
            }
            else
            {
                CustomRace = new();
            }
        }
    }
    private async Task<DialogOptions> SetOptions(MaxWidth maxWidth = MaxWidth.Large)
    {
        DialogOptions options = new() { MaxWidth = maxWidth };
        if (await _vieportService.GetCurrentBreakpointAsync() <= Breakpoint.Md)
            options.FullScreen = true;
        return options;
    }
}
