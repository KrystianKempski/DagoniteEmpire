<div class="race">
    <div class="sheet-img">
        @* <img src="../images/old_paper2.png" class="stretch" /> *@
    </div>
    <h3 class="my-3 ml-3 text-center">RACE</h3>
    <InputSelect style="width: 100%; padding: 2px 0px 2px 0px; background-color: transparent; border: 1px solid RGB(206 212 218); border-radius: 4px;"
                     ValueExpression="@(()=>SelectedRace)"
                     Value="@SelectedRace"
                     ValueChanged="@((string value) => ChangeRace(value))">
        <option value="0" selected disabled>--Select Race--</option>
        @foreach (var race in AllParams.Races)
        {
            <option value="@race.Name">@race.Name</option>
        }
        <option value="Custom race">Custom race</option>
    </InputSelect>
    @if (ShowNameLabel)
    {
        <InputText style="width: 100%;font-size: 14px;padding: 2px 2px 2px 2px; margin: 6px 0px 4px 0px; border: 1px solid RGB(206 212 218); border-radius: 4px; background-color: transparent;" @bind-Value="@AllParams.CurrentRace.Name" class=""></InputText>
    }
    <label class="race-descr-label">Race description</label>
    <div class="richtext-conteiner">
        <SfRichTextEditor Height="100%" @ref="RaceDescrShow" @bind-Value="@AllParams.CurrentRace.Description" Readonly="true" ShowTooltip="false">
            <RichTextEditorToolbarSettings Items="@NoTools" />
        </SfRichTextEditor>
    </div>
    <label class="race-traits-label">Race traits</label>
    <div class="flex-conteiner">
        <table class="table align-middle">
            <thead>
                <tr>
                    <th scope="col" class="name-row">Name</th>
                    <th scope="col" class="description-row">Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var obj in AllParams.CurrentRace.Traits)
                {
                    <tr>
                        <td>
                            <label class="name-label">@obj.Name</label>
                        </td>
                        <td>
                            <label class="name-label">@obj.SummaryDescr</label>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    @if (ShowNameLabel)
    {
            <button @onclick="@(()=>EditCustomRace())" class="add-trait">Edit race</button>
    }
    @if (CustomRaceComponent != null)
    {
        <CustomRaceDialog @bind-CustomRaceComponent="@CustomRaceComponent"></CustomRaceDialog>
    }
</div> 


@code {


    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }

    [Parameter]
    public EventCallback OnTraitsChange { get; set; }


    public RaceDTO CustomRace { get; set; }
    private SfRichTextEditor RaceDescrShow;
    private List<ToolbarItemModel> NoTools = new List<ToolbarItemModel>();

    private string SelectedRace { get; set; }
    private bool ShowNameLabel { get; set; } = false;

    private CustomRaceModel _customRaceComponent = new();
    private CustomRaceModel CustomRaceComponent
    {
        get => _customRaceComponent;
        set
        {
            if (value.RaceDTO != null)
            {
                var obj = AllParams.Races.FirstOrDefault(u => u.Name == value.RaceDTO.Name);
                if (obj == null)
                {
                    AllParams.Races.Add(value.RaceDTO);

                }
                else
                {
                    obj = value.RaceDTO;
                }

                OnTraitsChange.InvokeAsync();
            }
            if (_customRaceComponent == value) return;
            _customRaceComponent = value;
        }
    }
    private async Task ChangeRace(string raceName)
    {
        if (raceName == "Custom race")
        {
            ShowNameLabel = true;
            AllParams.CurrentRace = CustomRace;
        }
        else
        {
            ShowNameLabel = false;
            AllParams.CurrentRace = AllParams.Races.FirstOrDefault(r => r.Name == raceName);
        }

        OnTraitsChange.InvokeAsync();
        SelectedRace = raceName;
        StateHasChanged();
    }

    private async Task EditCustomRace()
    {
        CustomRaceComponent.RaceDTO = AllParams.CurrentRace;
        CustomRaceComponent.Traits = CustomRaceComponent.RaceDTO.Traits.OfType<TraitDTO>().ToList();
        CustomRaceComponent.IsVisible = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CustomRace = AllParams.CurrentRace;
            if (!string.IsNullOrEmpty(AllParams.CurrentRace.Name))
            {
                var race = AllParams.Races.FirstOrDefault(r => r.Name == AllParams.CurrentRace.Name);
                if (race is not null && race.RaceApproved)
                {
                    SelectedRace = race.Name;
                    ShowNameLabel = false;
                }
                else
                {
                    SelectedRace = "Custom race";
                    ShowNameLabel = true;
                }
                if (AllParams.CurrentRace.RaceApproved == false)
                    CustomRace = AllParams.CurrentRace;
                else
                    CustomRace = new();

                StateHasChanged();
            }
            else
            {
                CustomRace = new();
            }
        }
    }
}
