@inject ICharacterRepository _characterRepository
@inject IMobRepository _mobRepository
@inject IAttributeRepository _attributeRepository
@inject IBaseSkillRepository _baseSkillRepository
@inject ISpecialSkillRepository _specialSkillRepository
@inject ITraitRepository<TraitCharacterDTO> _traitCharacterRepository
@inject ITraitRepository<TraitRaceDTO> _traitRaceRepository
@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject ITraitRepository<TraitProfessionDTO> _traitProfessionRepository
@inject IWoundRepository _woundRepository
@inject IEquipmentRepository _equipmentRepository
@inject IRaceRepository _raceRepository
@inject IProfessionRepository _professionRepository
@inject IEquipmentSlotRepository _equipmentSlotRepository
@inject IUserService _userService
@inject ISnackbar Snackbar

<MudPaper>
    @if (IsLoading)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100%" />
    }
    else
    {
        <MudStack Class="pa-1" Spacing="2" >
            <MudButton Style="@BackgroundColor" Class="pa-1" OnClick="OnExpandCollapseClick">
                <div class="w-100 d-flex px-2 justify-content-between">
                    <div class="image-frame">
                        <MudImage Width="80" ObjectFit="ObjectFit.ScaleDown" Src="@ImageUrl" Alt="Character image" Elevation="25" Class="rounded-lg" />
                        <div class="image-cover">
                            <MudPaper Style="opacity:0.4; background-color:red;" Height="@WoundLevel" Width="100%" Outlined="false" Elevation="0" ></MudPaper>
                            
                        </div>
                        @if (NoTurnLeftIcon != string.Empty)
                        {
                            <div class="image-Icon"> 
                                <MudTooltip Placement="MudBlazor.Placement.Top" Text="No actions left"> 
                                    <img src="@NoTurnLeftIcon" width="30px" height="30px" />
                                </MudTooltip> 
                            </div>
                        }
                    </div>
                    <div class="flex-grow-1 d-flex flex-column py-2 justify-content-around">
                        <MudText Typo="Typo.h5">@Name</MudText>
                        <MudText Typo="Typo.subtitle1">@ProfessionName | @RaceName</MudText>
                        <MudText>
                            @foreach(var icon in Icons)
                            {
                                string textTooltip = $"{icon.Item1} for {icon.Item3} turn(s)";
                                <MudTooltip Placement="MudBlazor.Placement.Top" Text="@textTooltip">
                                    <img src="@icon.Item2" width="25px" height="25px" class="pr-1" />
                                </MudTooltip>

                            }
                        </MudText>
                         
                    </div>
                </div>
            </MudButton>
            <MudCollapse Expanded="IsExpanded">
                <MudPaper Elevation="0" Class="ma-1">
                    @if(BattleProperties is not null && ( UserInfo?.IsAdminOrMG == true || Relation == Relation.Teammate || Relation == Relation.Ally)){

                    <MudPaper Elevation="1" Class="my-1">
                        <MudText Class="p-1" Typo="Typo.button">ATTACK  ( base: @BattleProperties[SD.BattleProperty.AttackBase].SumBonus )</MudText>
                        <MudGrid Spacing="1" Justify="Justify.SpaceBetween">
                            <MudItem xs="3">
                                <label class="w-100 text-center">Dodge: @BattleProperties[SD.BattleProperty.AttackDodge].SumBonus</label>
                            </MudItem>
                            <MudItem xs="3">
                                <label class="w-100 text-center">Parry: @BattleProperties[SD.BattleProperty.AttackParry].SumBonus</label>
                            </MudItem>
                            <MudItem xs="3">
                                <label class="w-100 text-center">Shield: @BattleProperties[SD.BattleProperty.AttackShield].SumBonus</label>
                            </MudItem>
                            <MudItem xs="3">
                                <label class="w-100 text-center">Armor: @BattleProperties[SD.BattleProperty.AttackArmor].SumBonus</label>
                            </MudItem>
                        </MudGrid>
                        <MudText Class="p-1" Typo="Typo.button">DEFENCE ( absorbtion: @BattleProperties[SD.BattleProperty.ArmorClass].SumBonus )</MudText>
                        <MudGrid Spacing="1" Justify="Justify.SpaceBetween">
                            <MudItem xs="3">
                                <label class="w-100 text-center">Dodge: @BattleProperties[SD.BattleProperty.DefenceDodge].SumBonus</label>
                            </MudItem>
                            <MudItem xs="3">
                                <label class="w-100 text-center">Parry: @BattleProperties[SD.BattleProperty.DefenceParry].SumBonus</label>
                            </MudItem>
                            <MudItem xs="3">
                                <label class="w-100 text-center">Shield: @BattleProperties[SD.BattleProperty.DefenceShield].SumBonus</label>
                            </MudItem>
                            <MudItem xs="3">
                                <label class="w-100 text-center">Armor: @BattleProperties[SD.BattleProperty.DefenceArmor].SumBonus</label>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    }
                    <MudGrid Spacing="1" Justify="Justify.SpaceBetween">                    
                        @if (BattlePropertyModel?.MainWeaponUsed is not null)
                        {
                        <MudItem xs="6">
                            <MudPaper Class="p-1 w-100 h-100" Elevation="1">

                            <div class="d-flex">
                                <div class="flex-grow-1 weapon-prop-label">
                                        <MudText Typo="Typo.button">Main: @BattlePropertyModel.MainWeaponUsed.Name</MudText>
                                </div>
                            </div>
                                @if (BattlePropertyModel.MainWeaponUsed.IsTwoHanded == true)
                            {
                                <div class="d-flex">
                                    <div class="flex-grow-1 weapon-prop-label">
                                        <label>Two handed weapon</label>
                                    </div>
                                </div>
                            }
                            @if(MainWeaponProps is not null)
                            {
                                @foreach (var prop in MainWeaponProps)
                                {
                                    @if (prop is not null && string.IsNullOrEmpty(prop.Name) == false)
                                    {
                                        <div class="d-flex">

                                            <div class="flex-grow-1 weapon-prop-label">
                                                <label>@prop.Name: </label>
                                            </div>
                                            @if (prop.SumBonus != 0)
                                            {
                                                <div class="weapon-prop-value">
                                                    @prop.SumBonus
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                            }
                            </MudPaper>
                        </MudItem>
                     }
                    @if (BattlePropertyModel?.OffWeaponUsed is not null)
                    {
                        <MudItem xs="6">
                            <MudPaper Class="p-1 w-100 h-100" Elevation="1">
                            <div class="d-flex">
                                <div class="flex-grow-1 weapon-prop-label">
                                        <MudText Typo="Typo.button">Off: @BattlePropertyModel.OffWeaponUsed.Name</MudText>
                                </div>
                            </div>
                                @if (BattlePropertyModel.OffWeaponUsed.IsTwoHanded == true)
                            {
                                <div class="d-flex">
                                    <div class="flex-grow-1 weapon-prop-label">
                                        <label>Two handed weapon</label>
                                    </div>
                                </div>
                            }
                            @if (OffWeaponProps is not null)
                            {
                                @foreach (var prop in OffWeaponProps)
                                {
                                    @if (prop is not null && string.IsNullOrEmpty(prop.Name) == false)
                                    {
                                        <div class="d-flex">

                                            <div class="flex-grow-1 weapon-prop-label">
                                                <label>@prop.Name: </label>
                                            </div>
                                            @if (prop.SumBonus != 0)
                                            {
                                                <div class="weapon-prop-value">
                                                    @prop.SumBonus
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                            }
                            </MudPaper>
                        </MudItem>
                    }
                    @if (BattlePropertyModel?.ArmorUsed is not null)
                    {
                        <MudItem xs="6">
                            <MudPaper Class="p-1 w-100 h-100" Elevation="1">
                            <div class="d-flex">
                                <div class="flex-grow-1 weapon-prop-label">
                                        <MudText Typo="Typo.button">Armor: @BattlePropertyModel.ArmorUsed.Name</MudText>
                                </div>
                            </div>
                            @if (ArmorProps is not null)
                            {
                                @foreach (var prop in ArmorProps)
                                {
                                    @if (prop is not null && string.IsNullOrEmpty(prop.Name) == false)
                                    {
                                        <div class="d-flex">

                                            <div class="flex-grow-1 weapon-prop-label">
                                                <label>@prop.Name: </label>
                                            </div>
                                            @if (prop.SumBonus != 0)
                                            {
                                                <div class="weapon-prop-value">
                                                    @prop.SumBonus
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                            }
                            </MudPaper>
                        </MudItem>
                    }
                    @if (BattlePropertyModel?.ShieldUsed is not null)
                    {
                        <MudItem xs="6">
                            <MudPaper Class="p-1 w-100 h-100" Elevation="1">
                            <div class="d-flex">
                                <div class="flex-grow-1 weapon-prop-label">
                                        <MudText Typo="Typo.button">Shield: @BattlePropertyModel.ShieldUsed.Name</MudText>
                                </div>
                            </div>
                            @if (ShieldProps is not null)
                            {
                                @foreach (var prop in ShieldProps)
                                {
                                    @if (prop is not null && string.IsNullOrEmpty(prop.Name) == false)
                                    {
                                        <div class="d-flex">

                                            <div class="flex-grow-1 weapon-prop-label">
                                                <label>@prop.Name: </label>
                                            </div>
                                            @if (prop.SumBonus != 0)
                                            {
                                                <div class="weapon-prop-value">
                                                    @prop.SumBonus
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                            }
                            </MudPaper>
                        </MudItem>
                    }
                    @if (Icons is not null && Icons.Any())
                    {
                        <MudItem xs="12">
                            <MudPaper Class="p-1 w-100 h-100" Elevation="1">
                            <div class="d-flex">
                                <div class="flex-grow-1 weapon-prop-label">
                                        <MudText Typo="Typo.button">Temporary states</MudText>
                                </div>
                            </div>
                            @foreach (var icon in Icons)
                            {
                                @if (icon is not null && string.IsNullOrEmpty(icon.Item1) == false)
                                {
                                    <div class="d-inline-block">
                                        <img src="@icon.Item2" width="25px" height="25px" class="pr-1 d-inline-block" />
                                        <div class="weapon-prop-label ">
                                        <label>@icon.Item1: @icon.Item3,</label>
                                        </div>
                                    </div>
                                }
                            }
                            
                            </MudPaper>
                        </MudItem>
                    }
                    @if (AllParams?.Health.GetAll() is not null && AllParams?.Health.CurrentWounds > 0)
                    {
                        <MudItem xs="12">
                            <MudPaper Class="p-1 w-100 h-100" Elevation="1">
                                <div class="d-flex">
                                    <div class="flex-grow-1 weapon-prop-label">
                                        <MudText Typo="Typo.button">Wounds</MudText>
                                    </div>
                                </div>
                                @foreach (var wound in AllParams?.Health.GetAll())
                                {
                                    @if (wound is not null && string.IsNullOrEmpty(wound.Severity) == false)
                                    {
                                        <div class="d-inline-block">
                                            <img src="@Wounds.GetIcon(wound.IsTended)" width="25px" height="25px" class="pr-1 d-inline-block" />
                                            <div class="weapon-prop-label ">
                                                <label>@wound.Severity,</label>
                                            </div>
                                        </div>
                                    }
                                }

                            </MudPaper>
                        </MudItem>
                    }
                      
                </MudGrid>
                </MudPaper>
            </MudCollapse>
        </MudStack>
    }


</MudPaper>

@code {
    [Parameter]
    public AllParamsModel? AllParams { get; set; } = null;
    [Parameter]
    public MobDTO? Mob { get; set; } = null;
    [Parameter]
    public int Id { get; set; } = 0;
    [Parameter]
    public bool IsMob { get; set; } = false;

    private bool IsExpanded = false;
    private bool IsLoading = false;
    private BattlePropertyModel? BattlePropertyModel = null;
    private IDictionary<string, BattlePropertyDTO>? BattleProperties= null;
    private IEnumerable<BattlePropertyDTO>? MainWeaponProps = null;
    private IEnumerable<BattlePropertyDTO>? OffWeaponProps = null;
    private IEnumerable<BattlePropertyDTO>? ArmorProps = null;
    private IEnumerable<BattlePropertyDTO>? ShieldProps = null;
    private string ImageUrl = "";
    private string ProfessionName = "";
    private string RaceName = "";
    private string Name = "";
    private string BackgroundColor = "";
    private string StatesString = "";
    private string WoundLevel = "0%";
    private List<Tuple<string, string, int>> Icons = new List<Tuple<string, string, int>>();
    private string NoTurnLeftIcon = string.Empty;
    private Relation Relation = Relation.Teammate;
    public UserInfo? UserInfo { get; set; }
    private List<string> MobWounds { get; set; } = new List<string>();


    private void OnExpandCollapseClick()
    {
        IsExpanded = !IsExpanded;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserInfo = await _userService.GetUserInfo();
            IsLoading = true;
            //StateHasChanged();
            if(IsMob==false)
            {
                await LoadCharacter();
            }
            else
            {
                await LoadMob();
            }

            IsLoading = false;
           // StateHasChanged();
        }
        catch (Exception ex)
        {
            ;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (AllParams is null && IsMob == false)
        {
            IsLoading = true;

            StateHasChanged();
            await LoadCharacter();
            IsLoading = false;
            StateHasChanged();
        }
        if(Mob is null && IsMob)
        {
            IsLoading = true;

            StateHasChanged();
            await LoadMob();
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCharacter()
    {
        try
        {
            if (AllParams is null){

                AllParams = new();
                AllParams.Character = await _characterRepository.GetById(Id);
                AllParams.Attributes.FillPropertiesContainer(await _attributeRepository.GetAll(Id));
                AllParams.BaseSkills = await _baseSkillRepository.GetAll(Id);
                AllParams.SpecialSkills.FillPropertiesContainer(await _specialSkillRepository.GetAll(Id));
                AllParams.TraitsCharacter = (await _traitCharacterRepository.GetAll(Id)).Where(u => u.IsTemporary == false).Cast<TraitDTO>().ToList();
                AllParams.TraitsTemporary = (await _traitCharacterRepository.GetAll(Id)).Where(u => u.IsTemporary == true).Cast<TraitDTO>().ToList();
                AllParams.CurrentRace = await _raceRepository.GetById(AllParams.Character.RaceId);
                AllParams.Profession = await _professionRepository.GetById(AllParams.Character.ProfessionId);
                AllParams.Profession.Traits = (await _traitProfessionRepository.GetAll(AllParams.Character.Id)).ToList();
                AllParams.EquipmentSlots = (await _equipmentSlotRepository.GetAll(Id)).ToList();
                AllParams.Races = (await _raceRepository.GetAllApproved()).ToList();
                ICollection<WoundDTO> wounds = (await _woundRepository.GetAll(Id)).ToList();
                ICollection<WoundDTO> conds = (await _woundRepository.GetAllCond(Id)).Cast<WoundDTO>().ToList();
                wounds = wounds.Concat(conds).ToList();
                AllParams.Health.FillPropertiesContainer(wounds);
            }

            AllParams.SpecialSkills.AddRelatedParametes();
            AllParams.AllTraitsChange();
            //await ChangeProfRelatedAttribute();
            AllParams.Profession.CalculateClassParams(AllParams.Attributes.GetAll());
            AllParams.Health.UpdateHealthBonusesInAttributes();
            MainWeaponProps = AllParams.BattleProperties.GetWeaponQualityListFromItem(AllParams.BattleProperties.MainWeaponUsed);
            OffWeaponProps = AllParams.BattleProperties.GetWeaponQualityListFromItem(AllParams.BattleProperties.OffWeaponUsed);
            ArmorProps = AllParams.BattleProperties.GetWeaponQualityListFromItem(AllParams.BattleProperties.ArmorUsed);
            ShieldProps = AllParams.BattleProperties.GetWeaponQualityListFromItem(AllParams.BattleProperties.ShieldUsed);
            BattleProperties = AllParams.BattleProperties.GetAll();

            BattlePropertyModel = AllParams.BattleProperties;
            ProfessionName = AllParams.Profession.Name;
            RaceName = AllParams.CurrentRace.Name;
            ImageUrl = AllParams.Character.ImageUrl;
            Name = AllParams.Character.NPCName;
            Relation = AllParams.Character.Relation;
            StatesString = AllParams.States;
            LoadHealthBar();
            LoadIcons();
            BackgroundColor = $"background:{Colors.Blue.Lighten5};";

            if (BattleProperties is null)
                throw new Exception();

        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading Character", Severity.Warning);
        }
    }

    private async Task LoadMob()
    {
        try
        {
            Mob = await _mobRepository.GetById(Id);
            Mob.BattleProperties = new(Mob);
            BattlePropertyModel = Mob.BattleProperties;
            ImageUrl = Mob.ImageUrl;
            ProfessionName = Mob.ProfessionName;
            RaceName = Mob.RaceName;
            Name = Mob.Name;
            Relation = Mob.Relation;
            if (string.IsNullOrEmpty(Mob.MainWeaponName) == false)
            {
                Mob.MainWeapon = await _equipmentRepository.GetByName(Mob.MainWeaponName);            
                MainWeaponProps = Mob.BattleProperties.GetWeaponQualityListFromItem(Mob.MainWeapon);
            }
            if (string.IsNullOrEmpty(Mob.OffWeaponName) == false)
            {
                Mob.OffWeapon = await _equipmentRepository.GetByName(Mob.OffWeaponName);
                OffWeaponProps = Mob.BattleProperties.GetWeaponQualityListFromItem(Mob.OffWeapon);
            }
            if (string.IsNullOrEmpty(Mob.ShieldWeaponName) == false)
            {
                Mob.ShieldWeapon = await _equipmentRepository.GetByName(Mob.ShieldWeaponName);
                ShieldProps = Mob.BattleProperties.GetWeaponQualityListFromItem(Mob.ShieldWeapon);
            }
            if (string.IsNullOrEmpty(Mob.ArmorName) == false)
            {
                Mob.Armor = await _equipmentRepository.GetByName(Mob.ArmorName);
                ArmorProps = Mob.BattleProperties.GetWeaponQualityListFromItem(Mob.Armor);
            }
            if (Mob.Relation == Relation.Ally)
            {
                BackgroundColor = $"background:{Colors.Green.Lighten5};";
            }else if (Mob.Relation == Relation.Neutral)
            {
                BackgroundColor = $"background:{Colors.Yellow.Lighten5};";
            }
            else if (Mob.Relation == Relation.Enemy)
            {
                BackgroundColor = $"background:{Colors.Red.Lighten5};";
            }
            StatesString = Mob.States;
            LoadHealthBar();
            LoadIcons();
            BattleProperties = Mob.BattleProperties.GetAll();
            BattlePropertyModel.CalculateBattleStats();
            if (BattleProperties is null)
                throw new Exception();

        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading Character", Severity.Warning);
        }
    }

    public void LoadIcons()
    {
        try{
            Icons = new List<Tuple<string, string, int>>();
            if (StatesString == string.Empty) return;
            var states = StatesString.Split(", ");
            NoTurnLeftIcon = string.Empty;
            foreach (var state in states)
            {
                if (state == string.Empty ) continue;
               
                var type = state.Split(":");
                if (type[0] == States.Names.HalfTurn) continue;
                if (type[0] == States.Names.NoTurn)
                {
                    NoTurnLeftIcon = MyIcon.NoTurn;
                    continue;
                }
                if (string.IsNullOrEmpty(type[0]) == false)
                    Icons.Add(new( type[0], States.GetIcon(type[0]), Int32.Parse(type[1])));
                else
                    throw new Exception(); // eerror
            }
        }
        catch(Exception ex)
        {
            Snackbar.Add("Error loading states", Severity.Warning);
        }
    }

    public void LoadHealthBar()
    {
        int cover = 0;
        //for characters 
        if(AllParams is not null){

            if (AllParams?.Health is null) return;
            cover = (int)(100.0 * (double)AllParams.Health.CurrentWounds / (double)AllParams.Health.MaxWounds);

        }else if (Mob is not null)
        {
            cover = (int)(100.0 * (double)Mob.CurrentWounds / (double)Mob.MaxWounds);
        }
        if (cover > 0 && cover <= 100)
            WoundLevel = $"{cover}%";
        else if (cover > 100)
            WoundLevel = "100%";

    }
}
