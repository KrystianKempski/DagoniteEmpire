@inject ITraitAdvRepository _traitAdvRepository
@inject ITraitRaceRepository _traitRaceRepository
<div class="traits">
    <div class="table-container">
    <table class="table align-middle">
        <thead>
            <tr>
                <th scope="col" class="name-row">Name</th>
                <th scope="col" class="description-row">Description</th>
                @if (TraitType == SD.TraitType_Advantage)
                {
                    <th scope="col" class="trait-value-row text-center">Value</th>
                }
                <th scope="col" class="action-row text-center">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obj in Traits)
            {
                <tr>
                    <td>
                        <label class="name-label">@obj.Name</label>
                    </td>
                    <td>
                        <label class="name-label">@obj.SummaryDescr</label>
                    </td>
                    @if (TraitType == SD.TraitType_Advantage)
                    {
                        <td class="text-center">
                            <label class="name-label text-center">@obj.TraitValue</label>
                        </td>
                    }
                    <td>
                         <span><button @onclick="@(()=>EditTrait(obj))" class="trait-btn-small"><i class="fa-solid fa-pencil"></i></button></span>
                         <span><button @onclick="@(()=>DeleteTrait(obj))" class="trait-btn-small"><i class="fa-solid fa-trash"></i></button></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    </div>
    <div class="row">
        @if (Character != null)
        {
            <label class="balance">Traits balance: @Character.TraitBalance </label>
        }
        <div class="buttons-row">
            <button @onclick="@(()=>AddCustomTrait())" class="add-trait">Custom</button>
            <button @onclick="@(()=>AddExistingTrait())" class="add-trait">Existing</button>
        </div>
    </div>

    @if (CustomTraitComponent != null)
    {
        <CustomTraitDialog Attributes="@Attributes" BaseSkills="@BaseSkills" SpecialSkills="@SpecialSkills" Traits="@Traits" @bind-CustomTraitModel="@CustomTraitComponent" TraitType="@TraitType"></CustomTraitDialog>
    }
    @if (TraitsChosen != null)
    {
        <ExistingTraitsDialog @bind-TraitsChosen="@TraitsChosen"></ExistingTraitsDialog>
    }
</div>

@code {
    [Parameter]
    public CharacterDTO Character { get; set; } = null;
    [Parameter]
    public EventCallback<CharacterDTO> CharacterChanged { get; set; }
    [Parameter]
    public IEnumerable<AttributeDTO> Attributes { get; set; } = null;
    [Parameter]
    public EventCallback<IEnumerable<AttributeDTO>> AttributesChanged  { get; set; }
    [Parameter]
    public IEnumerable<BaseSkillDTO> BaseSkills { get; set; } = null;
    [Parameter]
    public EventCallback<IEnumerable<BaseSkillDTO>> BaseSkillsChanged { get; set; }
    [Parameter]
    public ICollection<SpecialSkillDTO> SpecialSkills { get; set; } = null;
    [Parameter]
    public EventCallback<ICollection<SpecialSkillDTO>> SpecialSkillsChanged { get; set; }
    [Parameter]
    public ICollection<TraitDTO> Traits { get; set; } = null;
    [Parameter]
    public EventCallback<ICollection<TraitDTO>> TraitsChanged { get; set; }

    [Parameter]
    public string TraitType { get; set; }


    private CustomTraitModel _customTraitComponent = new();
    private CustomTraitModel CustomTraitComponent
    {
        get => _customTraitComponent;
        set
        {
            if (value.TraitDTO != null)
            {
                var obj = Traits.FirstOrDefault(u => u.Name == value.TraitDTO.Name);
                if (obj == null)
                {
                    Traits.Add(value.TraitDTO);

                }
                else
                {
                    obj = value.TraitDTO;
                }

                CalculateTraitsBonuses();
            }
            if (_customTraitComponent == value) return;
            _customTraitComponent = value;
        }
    }

    private TraitsChosenModel _traitsChosen;
    private TraitsChosenModel TraitsChosen
    {
        get => _traitsChosen;
        set
        {
            if (value.TraitsChosen != null && value.TraitsChosen.Count() > 0)
            {
                foreach (var trait in value.TraitsChosen)
                {
                    if (Traits.FirstOrDefault(u => u.Name == trait.Name) == null)
                    {
                        Traits.Add(trait);
                    }
                }
                CalculateTraitsBonuses();
            }
            if (_traitsChosen == value) return;
            _traitsChosen = value;
        }
    }

    private async Task AddCustomTrait()
    {
        CustomTraitComponent.TraitDTO = new();
        CustomTraitComponent.IsVisible = true;
        CustomTraitComponent.IsEditMode = false;
        StateHasChanged();
    }
    private async Task AddExistingTrait()
    {
        TraitsChosen = new();
        TraitsChosen.IsVisible = true;
        TraitsChosen.TraitType = TraitType;
        StateHasChanged();
    }

    private async Task EditTrait(TraitDTO trait)
    {
        CustomTraitComponent.TraitDTO = trait;
        CustomTraitComponent.IsVisible = true;
        CustomTraitComponent.IsEditMode = true;
        StateHasChanged();
    }

    private async Task CalculateTraitsBonuses()
    {
        bool refresh = false;

        if (TraitType != SD.TraitType_Advantage)
            return ;
        //clear all traits bonuses
        if (Character != null)
            Character.TraitBalance = 0;
        IEnumerable<FeatureDTO>[] allFeatures = { Attributes, BaseSkills, SpecialSkills };

        foreach (var feat in allFeatures)
        {
            foreach (var obj in feat)
            {
                if (obj.TraitBonus != 0)
                {
                    obj.TraitBonus = 0;
                    obj.SumAll();
                    refresh = true;
                }
            }
        }

        // calculate all traits
        foreach (var trait in Traits)
        {
            if (Character != null)
                Character.TraitBalance += trait.TraitValue;

            if (trait.TraitType != SD.TraitType_Advantage)
                continue;
            FeatureDTO? feature = null;
            foreach (var bonus in trait.Bonuses)
            {
                switch (bonus.FeatureType)
                {
                    case "Attribute":
                        feature = Attributes.FirstOrDefault(u => u.Name == bonus.FeatureName);
                        break;
                    case "Base skill":
                        feature = BaseSkills.FirstOrDefault(u => u.Name == bonus.FeatureName);
                        break;
                    case "Special skill":
                        feature = SpecialSkills.FirstOrDefault(u => u.Name == bonus.FeatureName);
                        break;
                    default:
                        break;
                }
                if (feature != null)
                {
                    feature.TraitBonus += bonus.BonusValue;
                    feature.SumAll();
                    refresh = true;
                }
            }
        }

        if (refresh)
        {

            await TraitsChanged.InvokeAsync(Traits);
            await AttributesChanged.InvokeAsync(Attributes);
            await BaseSkillsChanged.InvokeAsync(BaseSkills);
            await SpecialSkillsChanged.InvokeAsync(SpecialSkills);
            if (Character != null)
                await CharacterChanged.InvokeAsync(Character);
            StateHasChanged();
        }
    }

    private async Task DeleteTrait(TraitDTO trait)
    {
        if (trait.Id != 0)
        {

            if (trait.TraitType == SD.TraitType_Advantage && trait.TraitApproved ==false)
            {
                await _traitAdvRepository.Delete(trait.Id);

            }
            else if (trait.TraitType == SD.TraitType_Race && trait.TraitApproved == false)
            {
                await _traitRaceRepository.Delete(trait.Id);
            }

        }
        Traits = Traits.Where(u => u.Name != trait.Name).ToList();
        if (TraitType == SD.TraitType_Advantage)
            CalculateTraitsBonuses();
        else if (TraitType == SD.TraitType_Race)
            await TraitsChanged.InvokeAsync(Traits);
        StateHasChanged();
    }
}
