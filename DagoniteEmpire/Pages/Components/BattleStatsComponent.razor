@inject ITraitRepository<TraitEquipmentDTO> _traitEquipmentRepository
@inject IUserService _userService
@inject NavigationManager _navigationManager

<div class="battlestats">
    <MudPaper Class="w-100 h-100 p-2">

    @if (IsLoading == true)
    {
    }else
    {  
        <CascadingValue Value="@AllParams">
        <div class="row w-100 border m-1 p-1">
            <div class="set-label">
                <input class="px-1" type="checkbox" checked="@WeaponSet1" @onchange="WeaponSetChanged">
                <label>Weapon set 1</label>
            </div>
            <div class="col-6 p-1">
                <label>Main hand</label>
                <div class="weapon main1">
                        <EquipItemComponent @ref="EquipItemComp[EquippedItems.WeaponMain1]" OnGearChange="GearChange" SlotType="@SD.SlotType.WeaponMain1"> </EquipItemComponent>
                </div>
                    @if (Weapons[EquippedItems.WeaponMain1] is not null && string.IsNullOrEmpty(Weapons[EquippedItems.WeaponMain1].RelatedSkill) == false)
                    {
                        <div class="d-flex">
                            <div class="flex-grow-1 weapon-prop-label">
                                <label>Skill (@Weapons[EquippedItems.WeaponMain1].RelatedSkill): </label>
                            </div>
                            <div class="weapon-prop-value">
                                @AllParams.SpecialSkills.Get(Weapons[EquippedItems.WeaponMain1].RelatedSkill).SumBonus
                            </div>
                        </div>
                        @if (Weapons[EquippedItems.WeaponMain1].IsTwoHanded == true)
                        {
                            <div class="d-flex">
                                <div class="flex-grow-1 weapon-prop-label">
                                    <label>Two handed weapon</label>
                                </div>
                            </div>
                        }
                    
                        @foreach (var prop in WeaponBattleProperties[EquippedItems.WeaponMain1]){
                            @if (prop is not null && string.IsNullOrEmpty(prop.Name) == false)
                            {
                                <div class="d-flex">

                                    <div class="flex-grow-1 weapon-prop-label">
                                        <label>@prop.Name: </label>
                                    </div>
                                    @if (prop.SumBonus != 0)
                                    {
                                        <div class="weapon-prop-value">
                                            @prop.SumBonus
                                        </div>
                                    }
                                </div>
                            }
                        }
                    }
            </div>

            <div class="col-6 p-1">
                <label>Off hand</label>
                <div class="weapon off1">
                        <EquipItemComponent Disabled="CheckIfTwoHanded(EquippedItems.WeaponMain1)" @ref="EquipItemComp[EquippedItems.WeaponOff1]" OnGearChange="GearChange" SlotType="@SD.SlotType.WeaponOff1"> </EquipItemComponent>
                </div>
                @if (Weapons[EquippedItems.WeaponOff1] is not null && string.IsNullOrEmpty(Weapons[EquippedItems.WeaponOff1].RelatedSkill) == false)
                {
                    <div class="d-flex">
                        <div class="flex-grow-1 weapon-prop-label">
                            <label>Skill (@Weapons[EquippedItems.WeaponOff1].RelatedSkill): </label>
                        </div>
                        <div class="weapon-prop-value">
                            @AllParams.SpecialSkills.Get(Weapons[EquippedItems.WeaponOff1].RelatedSkill).SumBonus
                        </div>
                    </div>
                    
                    @foreach (var prop in WeaponBattleProperties[EquippedItems.WeaponOff1])
                    {
                        @if (prop is not null && string.IsNullOrEmpty(prop.Name) == false)
                        {
                            <div class="d-flex">

                                <div class="flex-grow-1 weapon-prop-label">
                                    <label> @prop.Name: </label>
                                </div>
                                @if (prop.SumBonus != 0)
                                {
                                    <div class="weapon-prop-value">
                                        @prop.SumBonus
                                    </div>
                                }
                            </div>
                        }
                    }
                }
            </div>

        </div>

        <div class="row w-100 border m-1 p-1">
            <div class="set-label">
                <input class="px-1" type="checkbox" checked="@WeaponSet2" @onchange="WeaponSetChanged">
                <label>Weapon set 2</label>

            </div>
            <div class="col-6 p-1">
                <label>Main hand</label>
                <div class="weapon main2">
                    <EquipItemComponent  @ref="EquipItemComp[EquippedItems.WeaponMain2]" OnGearChange="GearChange" SlotType="@SD.SlotType.WeaponMain2"> </EquipItemComponent>
                </div>
                    @if (Weapons[EquippedItems.WeaponMain2] is not null && string.IsNullOrEmpty(Weapons[EquippedItems.WeaponMain2].RelatedSkill) == false)
                    {
                        <div class="d-flex">
                            <div class="flex-grow-1 weapon-prop-label">
                                <label>Skill (@Weapons[EquippedItems.WeaponMain2].RelatedSkill): </label>
                            </div>
                            <div class="weapon-prop-value">
                                @AllParams.SpecialSkills.Get(Weapons[EquippedItems.WeaponMain2].RelatedSkill).SumBonus
                            </div>
                        </div>
                        @if (Weapons[EquippedItems.WeaponMain2].IsTwoHanded == true)
                        {
                            <div class="d-flex">
                                <div class="flex-grow-1 weapon-prop-label">
                                    <label>Two handed weapon</label>
                                </div>
                            </div>
                        }
                   
                        @foreach (var prop in WeaponBattleProperties[EquippedItems.WeaponMain2])
                        {
                            @if (prop is not null && string.IsNullOrEmpty(prop.Name) == false)
                            {
                                <div class="d-flex">

                                    <div class="flex-grow-1 weapon-prop-label">
                                        <label> @prop.Name: </label>
                                    </div>
                                    @if (prop.SumBonus != 0)
                                    {
                                        <div class="weapon-prop-value">
                                            @prop.SumBonus
                                        </div>
                                    }
                                </div>
                            }
                        }
                    }
            </div>

            <div class="col-6 p-1">
                <label>Off hand</label>
                <div class="weapon off2">
                    <EquipItemComponent Disabled="CheckIfTwoHanded(EquippedItems.WeaponMain2)" @ref="EquipItemComp[EquippedItems.WeaponOff2]" OnGearChange="GearChange" SlotType="@SD.SlotType.WeaponOff2"> </EquipItemComponent>
                </div>
                    @if (Weapons[EquippedItems.WeaponOff2] is not null && string.IsNullOrEmpty(Weapons[EquippedItems.WeaponOff2].RelatedSkill) == false)
                    {
                        <div class="d-flex">
                            <div class="flex-grow-1 weapon-prop-label">
                                <label>Skill (@Weapons[EquippedItems.WeaponOff2].RelatedSkill): </label>
                            </div>
                            <div class="weapon-prop-value">
                                @AllParams.SpecialSkills.Get(Weapons[EquippedItems.WeaponOff2].RelatedSkill).SumBonus
                            </div>
                        </div>                        
                    
                        @foreach (var prop in WeaponBattleProperties[EquippedItems.WeaponOff2])
                        {
                            @if (prop is not null && string.IsNullOrEmpty(prop.Name) == false)
                            {
                                <div class="d-flex">

                                    <div class="flex-grow-1 weapon-prop-label">
                                        <label> @prop.Name: </label>
                                    </div>
                                    @if (prop.SumBonus != 0)
                                    {
                                        <div class="weapon-prop-value">
                                            @prop.SumBonus
                                        </div>
                                    }
                                </div>
                            }
                        }
                    }
            </div>
        </div>
        @if (Armor is not null && ArmorBattleProperties is not null)
        {
        <div class="d-flex w-100 p-0 my-1">
            <div class="d-flex flex-column border w-100">
                <div class="set-label">
                    <label>Equipped armor</label>
                </div>
                <div class="d-flex flex-row">
                    <div class="col-6 p-2">
                        <div class="d-flex">
                            <div class="flex-grow-1 weapon-prop-label">
                                <label>Armor skill: </label>
                            </div>
                            <div class="weapon-prop-value">
                                @AllParams.SpecialSkills.Get(SD.SpecialSkills.Athletics.Armor).SumBonus
                            </div>
                        </div>
                        <div class="d-flex">
                            <div class="flex-grow-1 weapon-prop-label">
                                <label>Armor defence bonus: </label>
                            </div>
                            <div class="weapon-prop-value">
                                @ArmorBattleProperties.FirstOrDefault(p => p.Name == SD.WeaponQuality.ArmorDefenceBonus).GearBonus
                            </div>
                        </div>
                    </div>
                    <div class="col-6 p-2">
                        <div class="d-flex">
                            <div class="flex-grow-1 weapon-prop-label">
                                <label>Armor damage reduction: </label>
                            </div>
                            <div class="weapon-prop-value">
                                @ArmorBattleProperties.FirstOrDefault(p => p.Name == SD.WeaponQuality.Armor).GearBonus
                            </div>
                        </div>
                        <div class="d-flex">
                            <div class="flex-grow-1 weapon-prop-label">
                                <label>Armor penalty: </label>
                            </div>
                            <div class="weapon-prop-value">
                                @ArmorBattleProperties.FirstOrDefault(p => p.Name == SD.WeaponQuality.ArmorPenalty).GearBonus
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        }
        <div class="row w-100 border m-1 p-0"> 
                <div class="set-label">
                    <label>Summary</label>
                </div>
            <div class="col-6 pt-2 pb-2 ps-2 pe-1">
                <div class="border">
                    <div class="set-label">
                        <label>Attack</label>
                    </div>
                    <div class="d-flex px-2">
                        <label class="flex-grow-1">Base: </label>
                        <div class="">
                            @AllParams.BattleProperties.Get(SD.BattleProperty.AttackBase).SumBonus
                        </div>
                    </div>
                    <div class="d-flex ps-4 pe-2">
                        <label class="flex-grow-1">vs Dodge: </label>
                        <div class="">
                            @AllParams.BattleProperties.Get(SD.BattleProperty.AttackDodge).SumBonus
                        </div>
                    </div>
                     <div class="d-flex ps-4 pe-2">
                        <label class="flex-grow-1">vs Armor: </label>
                        <div class="">
                            @AllParams.BattleProperties.Get(SD.BattleProperty.AttackArmor).SumBonus
                        </div>
                    </div>
                        <div class="d-flex ps-4 pe-2">
                         <label class="flex-grow-1">vs Shield: </label>
                        <div class="">
                            @AllParams.BattleProperties.Get(SD.BattleProperty.AttackShield).SumBonus
                        </div>
                    </div>
                        <div class="d-flex ps-4 pe-2">
                        <label class="flex-grow-1">vs Parry: </label>
                        <div class="">
                            @AllParams.BattleProperties.Get(SD.BattleProperty.AttackParry).SumBonus
                        </div>
                    </div>
                    <div class="d-flex px-2">
                        <label class="flex-grow-1">Bonus damage: </label>
                        <div class="">
                            @AllParams.BattleProperties.Get(SD.BattleProperty.DamageBonus).SumBonus
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-6  pt-2 pb-2 ps-1 pe-2">
                <div class="border">
                    <div class="set-label">
                        <label>Defence</label>
                    </div>
                    <div class="d-flex px-2">
                        <label class="flex-grow-1">Armor penalty: </label>
                        <div class="">
                                @AllParams.BattleProperties.Get(SD.WeaponQuality.ArmorPenalty).SumBonus
                        </div>
                    </div>
                    <div class="d-flex px-2">
                        <label class="flex-grow-1">Dodge: </label>
                        <div class="">
                            @AllParams.BattleProperties.Get(SD.BattleProperty.DefenceDodge).SumBonus
                        </div>
                    </div>
                    <div class="d-flex px-2">
                        <label class="flex-grow-1">Armor: </label>
                        <div class="">
                            @AllParams.BattleProperties.Get(SD.BattleProperty.DefenceArmor).SumBonus
                        </div>
                    </div>
                    <div class="d-flex px-2">
                        <label class="flex-grow-1">Shield: </label>
                        <div class="">
                            @AllParams.BattleProperties.Get(SD.BattleProperty.DefenceShield).SumBonus
                        </div>
                    </div>
                    <div class="d-flex px-2">
                        <label class="flex-grow-1">Parry: </label>
                        <div class="">
                            @AllParams.BattleProperties.Get(SD.BattleProperty.DefenceParry).SumBonus
                        </div>
                    </div>
                    <div class="d-flex px-2">
                        <label class="flex-grow-1">Damage Reduction: </label>
                        <div class="">
                            @AllParams.BattleProperties.Get(SD.BattleProperty.ArmorClass).SumBonus
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </CascadingValue>
    }
    </MudPaper>
</div>

@code {
    [CascadingParameter]
    public AllParamsModel AllParams { get; set; }
    [Parameter]
    public EventCallback OnBattleStatsChange { get; set; }

    public bool WeaponSet1 { get; set; }
    public bool WeaponSet2 { get; set; }
    private bool IsLoading = true;
    public Dictionary<EquippedItems, EquipItemComponent> EquipItemComp { get; set; } = new Dictionary<EquippedItems, EquipItemComponent>();
    public Dictionary<EquippedItems, IEnumerable<BattlePropertyDTO>?> WeaponBattleProperties { get; set; } = new Dictionary<EquippedItems, IEnumerable<BattlePropertyDTO>?>();
    public Dictionary<EquippedItems, EquipmentDTO?> Weapons { get; set; } = new Dictionary<EquippedItems, EquipmentDTO?>();
    public  EquipmentDTO? Armor { get; set; } 
    public IEnumerable<BattlePropertyDTO>? ArmorBattleProperties { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        for (EquippedItems i = EquippedItems.WeaponMain1; i <= EquippedItems.WeaponOff2; i++)
        {
            EquipItemComp[i] = new EquipItemComponent();
        }
        IsLoading = true;
        ReloadBattleGear();
        IsLoading = false;
    }

    public void ReloadBattleGear()
    {
        WeaponSet1 = AllParams.Character.WeaponSet == 0 ? true : false;
        WeaponSet2 = !WeaponSet1;

        AllParams.GearTraitChange();
        LoadAttackStats();
        LoadArmorStats();
    }
    private void LoadAttackStats()
    {
        for (EquippedItems i = EquippedItems.WeaponMain1; i <= EquippedItems.WeaponOff2; i++)
        {
            Weapons[i] = AllParams.EquipmentSlots?.FirstOrDefault(s => s.SlotType == SD.SlotType.All[(int)i])?.Equipment;
            WeaponBattleProperties[i] = AllParams.BattleProperties.GetWeaponQualityListFromItem(Weapons[i]);
        }
    }
    private void LoadArmorStats()
    {
        Armor = AllParams.EquipmentSlots?.FirstOrDefault(s => s.SlotType == SD.SlotType.Body)?.Equipment;
        if (Armor is not null)
            ArmorBattleProperties = AllParams.BattleProperties.GetWeaponQualityListFromItem(Armor);
        else
            ArmorBattleProperties = null;
    }


    public void LoadPossibleGears()
    {
        foreach (var e in EquipItemComp)
        {                       
            e.Value.ReloadGears(); 
        }
    }

    public async Task GearChange()
    {
        // update equipment (in character)
        LoadPossibleGears();
        AllParams.GearTraitChange();
        LoadAttackStats();
        // clear of hand if weapon used is two-handed
        if (ClearOffHand())
            return;
        LoadArmorStats();
        await OnBattleStatsChange.InvokeAsync();
        StateHasChanged();
    }

    protected async Task WeaponSetChanged()
    {
        if (WeaponSet1)
        {
            WeaponSet1 = false;
            WeaponSet2 = true;
        }
        else
        {
            WeaponSet1 = true;
            WeaponSet2 = false;
        }
        AllParams.Character.WeaponSet = WeaponSet2 ? 1 : 0;
        LoadAttackStats();
        await OnBattleStatsChange.InvokeAsync();
        StateHasChanged();
    }

    public bool CheckIfTwoHanded(EquippedItems itemEnum)
    {
        var item = Weapons[itemEnum];
        if(item is not null && item.IsTwoHanded)
            return true;

        return false;
    }

    public bool ClearOffHand()
    {
        var mains = new List<EquippedItems>() { EquippedItems.WeaponMain1, EquippedItems.WeaponMain2 };
        foreach (var e in mains)
        {
            if (CheckIfTwoHanded(e))
            {
                EquippedItems key = e + 1;
                if (EquipItemComp[key].SelectedItem != null)
                {
                    EquipItemComp[key].ChangeGear("Empty");
                    return true;
                }
            }
        }
        return false;
    } 

}