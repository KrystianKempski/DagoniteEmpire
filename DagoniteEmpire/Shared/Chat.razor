@using Microsoft.AspNetCore.SignalR.Client
@inject IChatManager _chatManager
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _stateProvider

@attribute [Authorize(Roles = SD.Role_Admin + "," + SD.Role_HeroPlayer + "," + SD.Role_DukePlayer + "," + SD.Role_GameMaster)]

<MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">

    <MudDrawer  @bind-Open="@OpenEnd" Fixed="true" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Mini" ClipMode="DrawerClipMode.Always"  Style="overflow:hidden; text-wrap: nowrap" >
        <MudDrawerHeader Style="overflow:hidden; text-wrap: nowrap" Class="p-1">
            <MudText Typo="Typo.body2" Class="px-1" Style="font-size: 24px; "><MudIconButton OnClick="@ToggleEndDrawer" Color="Color.Dark" Icon="@Icons.Material.Filled.Chat"></MudIconButton> Chat </MudText>
        </MudDrawerHeader> 

        <div class="d-flex flex-column " style="max-height:calc(100vh - 128px);min-height:calc(100vh - 128px); overflow:hidden; padding: 0">
            <MudList T="ApplicationUser" Class="pa-0" >
                @foreach (var user in ChatUsers)
                {
                    <MudListItem Class="pa-0 px-0" OnClick="@(() => AddUserChat(user.Id))">
                        <div class="d-flex flex-row mt-n1 mb-n1">
                            <div class="mr-4 py-3 pl-2 pr-2" style="padding: 8px 8px 8px 10px;">
                                <MudBadge Visible="@user.ShowBadge" Content="@user.BadgeContent" Color="Color.Primary" Origin="Origin.TopLeft" Overlap="true" Class="">
                                    @if (ChosenUser != null && user.Id == ChosenUser.ContactId)
                                    {
                                        <MudAvatar Color="@(user.Id == ChosenUser.ContactId ?  Color.Secondary : Color.Dark)" Style="height:37px; width:37px;">@user.UserName.ToUpper().FirstOrDefault()</MudAvatar>
                                    }
                                    else
                                    {
                                        <MudAvatar Color="Color.Dark" Style="height:37px; width:37px;">@user.UserName.ToUpper().FirstOrDefault()</MudAvatar>
                                    }
                                </MudBadge>
                            </div>
                            <div class="d-flex align-items-center justify-content-center">
                                <MudText Typo="Typo.body2" Class="px-1" Style="font-size: 16px; font-weight:bold;">@user.UserName</MudText>
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
            <div class="d-flex align-items-end flex-grow-1 p-2">

               <MudIconButton Class="my-2 py-1 px-1" Icon="@(OpenEnd == true ? Icons.Material.Filled.ArrowForwardIos : Icons.Material.Filled.ArrowBackIosNew )" Color="Color.Inherit" OnClick="@ToggleEndDrawer" />

            </div>
        </div>
    </MudDrawer>
                   
</MudHidden>


<MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
   @*  <div class="chat-show">
            <MudIconButton Class="m-1 p-2" Icon="@Icons.Material.Filled.Chat" Color="Color.Dark" Style="background-color:white;" OnClick="@ToggleEndDrawer" />
    </div> *@

    <MudDrawer @bind-Open="@OpenEnd" Fixed="true" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary" ClipMode="DrawerClipMode.Always" Style="overflow:hidden; text-wrap: nowrap">
        <MudDrawerHeader Style="overflow:hidden; text-wrap: nowrap" Class="p-1">
            <MudText Typo="Typo.body2" Class="px-1" Style="font-size: 24px; "><MudIconButton OnClick="@ToggleEndDrawer" Color="Color.Dark" Icon="@Icons.Material.Filled.Chat"></MudIconButton> Chat </MudText>
        </MudDrawerHeader>

        <div class="d-flex flex-column " style="max-height:calc(100vh - 128px);min-height:calc(100vh - 128px); overflow:hidden; padding: 0">
            <MudList T="ApplicationUser" Class="pa-0">
                @foreach (var user in ChatUsers)
                {
                    <MudListItem Class="pa-0 px-0" OnClick="@(() => AddUserChat(user.Id))">
                        <div class="d-flex flex-row mt-n1 mb-n1">
                            <div class="mr-4 py-3 pl-2 pr-2" style="padding: 8px 8px 8px 10px;">
                                <MudBadge Visible="@user.ShowBadge" Content="@user.BadgeContent" Color="Color.Primary" Origin="Origin.TopLeft" Overlap="true" Class="">
                                    @if (ChosenUser != null && user.Id == ChosenUser.ContactId)
                                    {
                                        <MudAvatar Color="@(user.Id == ChosenUser.ContactId ?  Color.Secondary : Color.Dark)" Style="height:37px; width:37px;">@user.UserName.ToUpper().FirstOrDefault()</MudAvatar>
                                    }
                                    else
                                    {
                                        <MudAvatar Color="Color.Dark" Style="height:37px; width:37px;">@user.UserName.ToUpper().FirstOrDefault()</MudAvatar>
                                    }
                                </MudBadge>
                            </div>
                            <div class="d-flex align-items-center justify-content-center">
                                <MudText Typo="Typo.body2" Class="px-1" Style="font-size: 16px; font-weight:bold;">@user.UserName</MudText>
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </div>
    </MudDrawer>

</MudHidden>

<div class="chatboxes">
    @foreach (var userbox in UserBoxes)
    {
        <div class="chatbox">
        <MudPaper Width="100%" Height="600px" Elevation="25" Class="p-1 flex-grow-1">
            <MudToolBar Class="px-1" Dense="true">
                    <MudAvatar Color="Color.Dark" Style="height:40px; width:40px; margin-right: 8px">@userbox.UserName.ToUpper().FirstOrDefault()</MudAvatar>
                    <MudText Typo="Typo.h6">@userbox.UserName</MudText>
                    <MudIconButton Style="margin-left: auto; margin-right:0px" Class="p-2" Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" OnClick="@(() => CloseChatbox(userbox))" />
            </MudToolBar>
                <div class="d-flex flex-column px-1 " style="height:490px;width:100%; overflow:scroll;" id="@userbox.ContactId">
                @foreach (var message in userbox.messages)
                {
                    @if (message.FromUser.UserName == CurrentUserName)
                    {
                        <div class="d-flex flex-row my-4 ">
                                <div class="flex-grow-1">
                                        <MudText Typo="Typo.body1">@message.FromUser.UserName</MudText>
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                                <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-Gray);border-radius: 12px;margin-top:5px">@message.Message</MudText>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex flex-row-reverse my-4 ">
                            <div class="flex-grow-1 ">
                                <MudText Class="text-end" Typo="Typo.body1">@message.FromUser.UserName</MudText>
                                <MudText Class="text-end" Typo="Typo.body1" Style="width: 100%; font-size: xx-small!important;">@message.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                                <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-Gray);border-radius: 12px;margin-top:5px">@message.Message</MudText>
                            </div>
                        </div>
                    }
                }
            </div>
            <MudPaper Width="300px" Height="50px" Elevation="25" Class="d-flex flex-row px-2" Style="">
                        <MudTextField @onfocus="@(() => OnMessageFocus(userbox))" Disabled="!userbox.IsUserChosen" @ref="userbox.ChatTextField" Immediate="true" T="string" Placeholder="Enter your message..." DisableUnderLine="true" Class="mt-n2 mx-2"
                                        @bind-Value="userbox.CurrentMessage" For="@(()=> userbox.CurrentMessage)" OnKeyDown="Enter" />
                        <MudButton Disabled="!userbox.IsUserChosen" OnClick="@(() => SubmitAsync(userbox))" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Secondary" ButtonType="MudBlazor.ButtonType.Button">Send</MudButton>
            </MudPaper>
        </MudPaper>
        </div>
    }
</div>
 @if (ChosenUser is not null){
    <div class="small-screen">    
        <MudPaper Width="100%" Height="100vh" Elevation="25" Class="p-1 flex-grow-1">
            <MudToolBar Class="px-1" Dense="true">
                <MudAvatar Color="Color.Dark" Style="height:40px; width:40px; margin-right: 8px">@ChosenUser.UserName.ToUpper().FirstOrDefault()</MudAvatar>
                <MudText Typo="Typo.h6">@ChosenUser.UserName</MudText>
                <MudIconButton Style="margin-left: auto; margin-right:0px" Class="p-2" Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" OnClick="@(() => CloseChatbox(ChosenUser))" />
            </MudToolBar>
            <div class="d-flex flex-column px-1 " style="height:calc(100% - 155px);width:100%; overflow:scroll;" id="@ChosenUser.ContactId">
                @foreach (var message in ChosenUser.messages)
                {
                    @if (message.FromUser.UserName == CurrentUserName)
                    {
                        <div class="d-flex flex-row my-4 ">
                            <div class="flex-grow-1">
                                <MudText Typo="Typo.body1">@message.FromUser.UserName</MudText>
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                                <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-Gray);border-radius: 12px;margin-top:5px">@message.Message</MudText>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex flex-row-reverse my-4 ">
                            <div class="flex-grow-1 ">
                                <MudText Class="text-end" Typo="Typo.body1">@message.FromUser.UserName</MudText>
                                <MudText Class="text-end" Typo="Typo.body1" Style="width: 100%; font-size: xx-small!important;">@message.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                                <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-Gray);border-radius: 12px;margin-top:5px">@message.Message</MudText>
                            </div>
                        </div>
                    }
                }
            </div>
            <div style="width:calc(100% - 10px);height=50px;">
            <MudPaper Width="100%" Height="50px" Elevation="25" Class="d-flex flex-row px-2" Style="">
                <MudTextField @onfocus="@(() => OnMessageFocus(ChosenUser))" Disabled="!ChosenUser.IsUserChosen" @ref="ChosenUser.ChatTextField" Immediate="true" T="string" Placeholder="Enter your message..." DisableUnderLine="true" Class="mt-n2 mx-2"
                              @bind-Value="ChosenUser.CurrentMessage" For="@(()=> ChosenUser.CurrentMessage)" OnKeyDown="Enter" />
                <MudButton Disabled="!ChosenUser.IsUserChosen" OnClick="@(() => SubmitAsync(ChosenUser))" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Secondary" ButtonType="MudBlazor.ButtonType.Button">Send</MudButton>
            </MudPaper>
            </div>
        </MudPaper>
    </div>
}

@code{



    private bool _openEnd = false;

    public bool OpenEnd
    {
        get => _openEnd;
        set => _openEnd = value;
    }
    [Parameter]
    public bool ToggleChat
    {
        get => _openEnd;
        set { 
            ToggleEndDrawer();
        }
    }

    void ToggleEndDrawer()
    {
        OpenEnd = !OpenEnd;
    }


    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private string CurrentUserId { get; set; }
    private string CurrentUserName { get; set; }
    private bool ScrollToBottom = false;
    private List<ChatMessage> messages = new List<ChatMessage>();

    private class UserBox
    {
        public string CurrentMessage { get; set; }
        public MudTextField<string> ChatTextField = new();
        public List<ChatMessage> messages = new List<ChatMessage>();
        public string UserName { get; set; } = string.Empty;
        public string ContactId { get; set; } = string.Empty;
        public bool IsUserChosen { get; set; } = false;
    }

    private List<UserBox> UserBoxes { get; set; } = new List<UserBox>();
    private UserBox? ChosenUser { get; set; } = null;
    public List<ApplicationUser> ChatUsers = new List<ApplicationUser>();


    private async Task SubmitAsync(UserBox user)
    {
        ChosenUser = user;
        ChosenUser.IsUserChosen = true;

        if (!string.IsNullOrEmpty(ChosenUser.CurrentMessage) && !string.IsNullOrEmpty(ChosenUser.ContactId))
        {
            //Save Message to DB
            var chatHistory = new ChatMessage()
            {
                Message = ChosenUser.CurrentMessage,
                ToUserId = ChosenUser.ContactId,
                CreatedDate = DateTime.Now
            };

            chatHistory.FromUserId = CurrentUserId;
            await hubConnection.SendAsync("SendMessage", CurrentUserName, chatHistory);
            ChosenUser.CurrentMessage = string.Empty;
            await _chatManager.SaveMessageAsync(chatHistory);
        }
    }
    private async Task OnMessageFocus(UserBox user)
    {
        if (ChosenUser is null)
            ChosenUser = user;


        if (ChosenUser.ContactId != user.ContactId)
        {

            ChosenUser = user;
            ChosenUser.IsUserChosen = true;
            await InvokeAsync(StateHasChanged);
        }

        await ClearBadgeContent();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ScrollToBottom || firstRender)
        {
            if (ChosenUser is not null)
            {
                await _jsRuntime.ScrollToBottom($"{ChosenUser.ContactId}");
                ScrollToBottom = false;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (hubConnection == null)
            {
                hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri(ChatHub.HubUrl)).Build();
            }
            if (hubConnection.State == HubConnectionState.Disconnected)
            {
                await hubConnection.StartAsync();
            }

            hubConnection.On<string, ChatMessage>("SendMessage", ReceiveMessage);

            var state = await _stateProvider.GetAuthenticationStateAsync();
            var user = state.User;
            CurrentUserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            CurrentUserName = user.FindFirst(u => u.Type.Contains("name") && !u.Type.Contains("nameidentifier"))?.Value;
            await GetUsersAsync();
        }
        catch (Exception e)
        {
            ;
            // _message = $"ERROR: Failed to start chat client: {e.Message}";
            // _isChatting = false;
        }

    }

    private async Task ReceiveMessage(string name, ChatMessage message)
    {
        if(ChosenUser is not null)
        {
            if (ChosenUser.ContactId == message.ToUserId && CurrentUserId == message.FromUserId)
            {
                ChosenUser.messages.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = new ApplicationUser() { UserName = CurrentUserName } });
            }
            else if ((ChosenUser.ContactId == message.FromUserId && CurrentUserId == message.ToUserId))
            {
                ChosenUser.messages.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = new ApplicationUser() { UserName = ChosenUser.UserName } });
                ClearBadgeContent();
            }
        }
        else
        {
            if (CurrentUserId == message.ToUserId)
            {
                GetBadgeValue(message.FromUserId);
            }
        }
        // Inform blazor the UI needs updating
        await InvokeAsync(StateHasChanged);
        ScrollToBottom = true;
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            ChosenUser.ChatTextField.TextUpdateSuppression = false;
            await SubmitAsync(ChosenUser);
            ChosenUser.CurrentMessage = string.Empty;
            StateHasChanged();
            await Task.Run(async () =>
            {
                await Task.Delay(150);
                ChosenUser.ChatTextField.TextUpdateSuppression = true;
            });
        }
    }

    async Task AddUserChat(string userId)
    {
        var width = await _jsRuntime.GetWindowWidth();
        var contact = await _chatManager.GetUserDetailsAsync(userId);
        ChosenUser = UserBoxes.FirstOrDefault(u => u.ContactId == userId);
        if (ChosenUser == null)
        {
            ChosenUser = new UserBox()
            {
                ContactId = contact.Id,
                UserName = contact.UserName,
                messages = await _chatManager.GetConversationAsync(contact.Id),
                IsUserChosen = true,
            };
            UserBoxes.Add(ChosenUser);
            if (width - UserBoxes.Count * 320 < 320)
            {
                if(UserBoxes.Count>0)
                    UserBoxes.RemoveAt(0);
            }
        }
        else if (ChosenUser.ContactId == userId)
        {
            CloseChatbox(ChosenUser);
            return;
        }
        ClearBadgeContent();
        StateHasChanged();
        await _jsRuntime.ScrollToBottom($"{ChosenUser.ContactId}");

    }
    private async Task CloseChatbox(UserBox user)
    {
        UserBoxes.Remove(user);
        ChosenUser = null;

        StateHasChanged();
    }

    private async Task GetUsersAsync()
    {
        ChatUsers = await _chatManager.GetUsersAsync();
        if (string.IsNullOrEmpty(CurrentUserId))
            throw new Exception("Need current user");
        foreach(var user in ChatUsers)
        {
            var notifications = user.ChatMessagesFromUsers.Where(u => u.IsRead == false && u.ToUserId == CurrentUserId).Count();
            if(notifications>0){
                user.BadgeContent = notifications;
                user.ShowBadge = true;
            }
        }

    }

    public async Task GetBadgeValue(string Id)
    {

        var user = ChatUsers.FirstOrDefault(u => u.Id == Id);
        var messages = await _chatManager.GetConversationAsync(Id);

        int unreadMessages = messages.Where(u => u.IsRead == false).Count();

        if (unreadMessages > 0)
        {
            user.ShowBadge = true;
            user.BadgeContent = unreadMessages;
        }
    }

    public async Task ClearBadgeContent()
    {
        if (ChosenUser is null) return;
        ChosenUser.messages.ForEach(u => u.IsRead = true);

        var user = ChatUsers.FirstOrDefault(u => u.Id == ChosenUser.ContactId);
        if (user is not null && user.ShowBadge == true)
        {
            user.ShowBadge = false;
            user.BadgeContent = null;

            await _chatManager.MakeMessageRedAsync(user.Id);
        }
    }
}
