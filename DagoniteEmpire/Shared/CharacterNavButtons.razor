
@inject IChatManager _chatManager
@inject IJSRuntime _jsRuntime
@inject ISnackbar _snackBar
@inject NavigationManager _navigationManager;
@inject IPostRepository _postRepository
@inject IUserService _userService

@attribute [Authorize(Roles = SD.Role_Admin + "," + SD.Role_HeroPlayer + "," + SD.Role_DukePlayer + "," + SD.Role_GameMaster)]
<MudStack Wrap="Wrap.NoWrap" Spacing="@Spaceing" Row="@IsRow" AlignItems="AlignItems.Start">
    <MudButton FullWidth="@(IsRow==false)" OnClick="GoToCharacterList" Style="@($"color:{Color}; justify-content: start; background:transparent;")" Variant="Variant.Text" DropShadow="true">
        <MudIcon Class="px-1" Icon="@Icons.Material.Filled.PeopleAlt"></MudIcon>
        Character list
    </MudButton>
    <MudButton FullWidth="@(IsRow==false)" OnClick="GoToCharacter" Style="@($"color:{Color};justify-content: start; background:transparent;")" Variant="Variant.Text" DropShadow="true">
        <img src="@MyIcon.Helm_white" width="25" height="24" class="helm-icon" />
        Character
    </MudButton>
    <MudButton FullWidth="@(IsRow==false)" OnClick="GoToClass" Style="@($"color:{Color};justify-content: start; background:transparent;")" Variant="Variant.Text" DropShadow="true">
        <img src="@MyIcon.Anvil_white" width="25" height="24" class="anvil-icon" />
        Class
    </MudButton>
    <MudButton FullWidth="@(IsRow==false)" OnClick="GoToEquipment" Style="@($"color:{Color};justify-content: start; background:transparent;")" Variant="Variant.Text" DropShadow="true">
        <img src="@MyIcon.Chest" width="26" height="25" class="helm-icon" style="padding-bottom: 4px;" />
        Equipment
    </MudButton>
    <MudButton FullWidth="@(IsRow==false)" OnClick="GoToHealth" Style="@($"color:{Color};justify-content: start; background:transparent;")" Variant="Variant.Text" DropShadow="true">
        <MudIcon Style="width:25px; height: 24px; padding: 2px; padding-bottom: 5px;" Icon="@Icons.Material.Filled.Favorite" aria-label="Health"></MudIcon>
        Health
    </MudButton>
    <MudButton FullWidth="@(IsRow==false)" OnClick="GoToCampaign" Style="@($" color:{Color};justify-content: start; background:transparent;")" Variant="Variant.Text" DropShadow="true">
        <img src="@MyIcon.BookmarkWhite" width="24" height="24" class="helm-icon" style="padding-right: 3px;" />
        Campaign
    </MudButton>
    <MudButton FullWidth="@(IsRow==false)" OnClick="GoToLastPost" Style="@($" color:{Color};justify-content: start; background:transparent;")" Variant="Variant.Text" DropShadow="true">
        <img src="@MyIcon.BookmarkWhite" width="24" height="24" class="helm-icon" style="padding-right: 3px;" />
        Last post
    </MudButton>
</MudStack>


@code {

    [Parameter] public bool IsRow { get; set; } = true;
    [Parameter] public int Spaceing { get; set; } = 1;
    [Parameter]
    public EventCallback OnDrawerChanged { get; set; }

    public UserInfo? UserInfo { get; set; }
    private string Color = Colors.Gray.Lighten5;

    private async Task GoToCampaign()
    {
        try
        {
            UserInfo = await _userService.GetUserInfo();

            if (UserInfo?.SelectedCharacter is not null && UserInfo.SelectedCharacter.Id > 0)
            {
                string characterLink = "/campaignlist";
                await OnDrawerChanged.InvokeAsync();

                _navigationManager.NavigateTo(characterLink);
            }
            else
            {
                _snackBar.Add("No character have yet been approved and selected", Severity.Info);
            }


        }
        catch (Exception e)
        {
            _snackBar.Add("Error while going to campaign: " + e.Message, Severity.Error);
        }
    }

    private async Task GoToLastPost()
    {
        try
        {
            UserInfo = await _userService.GetUserInfo();

            if (UserInfo?.SelectedCharacter is not null && UserInfo.SelectedCharacter.Id > 0)
            {
                var postId = await _postRepository.GetCharacterLastPostChapter(UserInfo.SelectedCharacter.Id);

                if(postId > 0)
                {

                    string characterLink = $"/chapter/{postId}";
                    await OnDrawerChanged.InvokeAsync();
                    _navigationManager.NavigateTo(characterLink);
                }
                else if(postId == 0)
                {
                    _snackBar.Add("No post have been written yet...", Severity.Info);
                }
            }
            else
            {
                _snackBar.Add("No character have yet been approved and selected", Severity.Info);
            }
        }
        catch (Exception e)
        {
            _snackBar.Add("Error while going to latest post: " + e.Message, Severity.Error);
        }
    }

    private async Task GoToClass()
    {
        try
        {

            UserInfo = await _userService.GetUserInfo();

            if (UserInfo?.SelectedCharacter is not null && UserInfo.SelectedCharacter.Id > 0 && UserInfo.CharacterMG == false)
            {
                string classLink = "/profession/" + UserInfo.SelectedCharacter.Id;
                await OnDrawerChanged.InvokeAsync();
                _navigationManager.NavigateTo(classLink);
            }
            else
            {
                if (UserInfo?.CharacterMG == true)
                    _snackBar.Add("Game Master don't need class", Severity.Info);
                else
                    _snackBar.Add("No character have yet been approved and selected", Severity.Info);
                    
            }
        }
        catch (Exception e)
        {
            _snackBar.Add("Error while going to class: " + e.Message, Severity.Error);
        }

    }
    private async Task GoToCharacterList()
    {
        try
        {
            string characterLink = "/character"; 
            await OnDrawerChanged.InvokeAsync();

            _navigationManager.NavigateTo(characterLink);

        }
        catch (Exception e)
        {
            _snackBar.Add("Error while going to character list: " + e.Message, Severity.Error);
        }

    }

    private async Task GoToCharacter()
    {
        try
        {
            UserInfo = await _userService.GetUserInfo();

            if (UserInfo?.SelectedCharacter is not null && UserInfo.SelectedCharacter.Id > 0 && UserInfo.CharacterMG == false)
            {
                string characterLink = "/character/edit/" + UserInfo.SelectedCharacter.Id;
                await OnDrawerChanged.InvokeAsync();

                _navigationManager.NavigateTo(characterLink);
            }
            else
            {
                if (UserInfo?.CharacterMG == true)
                    _snackBar.Add("Game Master don't need character sheet", Severity.Info);
                else
                    _snackBar.Add("No character have yet been approved and selected", Severity.Info);
            }
        }
        catch (Exception e)
        {
            _snackBar.Add("Error while going to character: " + e.Message, Severity.Error);
        }

    }
    private async Task GoToEquipment()
    {
        try
        {
            UserInfo = await _userService.GetUserInfo();

            if (UserInfo?.SelectedCharacter is not null && UserInfo.SelectedCharacter.Id > 0 && UserInfo.CharacterMG == false)
            {
                string characterLink = "/equipment/" + UserInfo.SelectedCharacter.Id;
                await OnDrawerChanged.InvokeAsync();

                _navigationManager.NavigateTo(characterLink);
            }
            else
            {
                if (UserInfo?.CharacterMG == true)
                    _snackBar.Add("Game Master don't need equipment", Severity.Info);
                else
                    _snackBar.Add("No character have yet been approved and selected", Severity.Info);
            }
        }
        catch (Exception e)
        {
            _snackBar.Add("Error while going to equipment: " + e.Message, Severity.Error);
        }

    }

    private async Task GoToHealth()
    {
        try
        {
            UserInfo = await _userService.GetUserInfo();

            if (UserInfo?.SelectedCharacter is not null && UserInfo.SelectedCharacter.Id > 0 && UserInfo.CharacterMG == false)
            {
                string characterLink = "/health/" + UserInfo.SelectedCharacter.Id;
                await OnDrawerChanged.InvokeAsync();

                _navigationManager.NavigateTo(characterLink);
            }
            else
            {
                if (UserInfo?.CharacterMG == true)
                    _snackBar.Add("Game Master don't need health", Severity.Info);
                else
                    _snackBar.Add("No character have yet been approved and selected", Severity.Info);
            }
        }
        catch (Exception e)
        {
            _snackBar.Add("Error while going to health: " + e.Message, Severity.Error);
        }

    }

}
