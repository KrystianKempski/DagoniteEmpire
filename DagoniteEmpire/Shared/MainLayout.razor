@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager _navigationManager
@inject ISnackbar _snackBar
@inject AuthenticationStateProvider _stateProvider;
@inherits LayoutComponentBase

<PageTitle>DagoniteEmpire</PageTitle>

<MudThemeProvider/>
<MudDialogProvider />
<MudSnackbarProvider />    


@* <MudLayout>
    <MudAppBar DisableGutters="true" Dense="false" Class="appbar">
        <NavMenu />
    </MudAppBar>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout> *@
<div class="page">
    <NavMenu />
    <main>
        <article class="">
            <CascadingValue Value="hubConnection">
            @Body
            </CascadingValue>
        </article>
    </main>
</div>

@* 
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Application</MudText>
        </MudDrawerHeader>
        @NavMenu
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>
@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
} *@

@code {
    bool _drawerOpen = false;
    private string CurrentUserId { get; set; }

    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    protected override async Task OnInitializedAsync()
    {
        string baseUrl = _navigationManager.BaseUri;
        string HubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri(ChatHub.HubUrl))
            .Build();

       // hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/signalRHub")).Build();
        await hubConnection.StartAsync();
        hubConnection.On<string, string, string>("ReceiveChatNotification", (message, receiverUserId, senderUserId) =>
        {
            if (CurrentUserId == receiverUserId)
            {
                _snackBar.Add(message, Severity.Info, config =>
                {
                    config.VisibleStateDuration = 10000;
                    config.HideTransitionDuration = 500;
                    config.ShowTransitionDuration = 500;
                    config.Action = "Chat?";
                    config.ActionColor = Color.Info;
                    config.Onclick = snackbar =>
                    {
                        _navigationManager.NavigateTo($"chat/{senderUserId}");
                        return Task.CompletedTask;
                    };
                });
            }
        });
        var state = await _stateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        CurrentUserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }
}