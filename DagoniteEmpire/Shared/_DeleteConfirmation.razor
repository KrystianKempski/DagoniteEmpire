<div class="modal fade" data-backdrop="static" data-keyboard="false" id="deleteConfirmationModal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">

      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Confirm Delete</h5>
        <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>OnDeleteConfirmation(false)">
          <span aria-hidden="true">&times;</span>
        </button>

      </div>
      <div class="modal-body">
                Are you sure you want to delete @DeletingComponentName?
      </div>
            @if(IsParentComponentProcessing == true)
            {
                <div class="modal-footer">
                <button type="button" class="btn btn-secondary" disabled @onclick="()=>OnDeleteConfirmation(false)" data-bs-dismiss="modal">
                  Cancel
                </button>
                <button type="button" class="btn btn-danger" disabled @onclick="()=>OnDeleteConfirmation(true)">
                  Processing...
                </button>
              </div>
            }
            else
            {
                 <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="()=>OnDeleteConfirmation(false)" data-bs-dismiss="modal">
                  Cancel
                </button>
                <button type="button" class="btn btn-danger" @onclick="()=>OnDeleteConfirmation(true)">
                  Delete
                </button>
              </div>
            }
           
    </div>
  </div>

</div>

@code {
    [Parameter]
    public bool IsParentComponentProcessing { get; set; }
    [Parameter]
    public string DeletingComponentName { get; set; } = "";


    [Parameter]
    public EventCallback<bool> DeleteConfirmation { get; set; }

    

     private async Task OnDeleteConfirmation(bool isConfirmation)
    {
        if(isConfirmation)
            await DeleteConfirmation.InvokeAsync(isConfirmation);
    }

}
