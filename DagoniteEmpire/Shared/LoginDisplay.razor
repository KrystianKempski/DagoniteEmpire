
 @inject NavigationManager _navigationManager;
 @inject IUserService _userService
 @inject ICharacterRepository _characterRepository
 @inject ISnackbar _snackbar
 @inject CallbackService callbackService

<AuthorizeView>
    <Authorized>
        <div class="p-2 d-flex align-content-center">

            <MudMenu @onclick="RefreshCharacters"  Dense="true" Color="Color.Dark">
                <ActivatorContent>
                    <MudAvatar Size="Size.Small">
                        <MudImage ObjectPosition="ObjectPosition.Top" ObjectFit="ObjectFit.Cover" Src="@PortraitUrl" />
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent >
                    <MudMenuItem  Disabled>Select character</MudMenuItem>
                    @if (UserInfo?.IsAdminOrMG == true)
                    {
                        <MudMenuItem OnClick="@(e => SelectCharacter())">
                            <div class="d-flex flex-row">
                                <MudAvatar>
                                    <MudImage ObjectPosition="ObjectPosition.Top" ObjectFit="ObjectFit.Cover" Src="@SD.GameMaster_Portrait"></MudImage>
                                </MudAvatar>
                                <MudText Class="align-content-center ps-1">
                                    @SD.GameMaster_NPCName
                                </MudText>
                            </div>
                        </MudMenuItem>
                    }
                    @foreach (CharacterDTO character in Characters)
                    {
                        <MudMenuItem OnClick="@(e => SelectCharacter(character))">
                            <div class="d-flex flex-row">
                                <MudAvatar>
                                    <MudImage ObjectPosition="ObjectPosition.Top" ObjectFit="ObjectFit.Cover" Src="@character.ImageUrl"></MudImage>
                                </MudAvatar>
                                <MudText Class="align-content-center ps-1">
                                    @character.NPCName
                                </MudText>
                            </div>
                        </MudMenuItem>
                    }
                </ChildContent>
            </MudMenu>
        </div>

        <div class=big-screen "pa-4 justify-center my-4 mud-text-align-center">
            <MudButton Style="@($"color:{Colors.Gray.Lighten5}; background:{Colors.Gray.Darken4};")" Variant="Variant.Filled" Color="Color.Primary">Hi, @context.User.Identity.Name!</MudButton>
            <MudButton Style="@($"color:{Colors.Gray.Lighten5}; background:{Colors.Gray.Darken4};")" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => GoTo("Logout"))">Log Out</MudButton>
        </div>
        <div class="small-screen">
            <MudMenu Color="Color.Inherit" Icon="@Icons.Material.Filled.AccountCircle">
                <MudMenuItem>Hi, @context.User.Identity.Name!</MudMenuItem>

                <MudMenuItem OnClick="@(() => GoTo("Logout"))">Log Out</MudMenuItem>
            </MudMenu>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="big-screen pa-4 justify-center my-4 mud-text-align-center">
            <MudButton Style="@($"color:{Colors.Gray.Lighten5}; background:{Colors.Gray.Darken4};")" Variant="Variant.Filled" Color="Color.Primary" Href="Account/Register">Register</MudButton>
            <MudButton Style="@($"color:{Colors.Gray.Lighten5}; background:{Colors.Gray.Darken4};")" Variant="Variant.Filled" Color="Color.Secondary" Href="Account/Login">Log in</MudButton>
        </div>
        <div class="small-screen">
            <MudMenu Color="Color.Inherit" Icon="@Icons.Material.Filled.AccountCircle">
                <MudMenuItem OnClick="@(() => GoTo("Register"))">Register</MudMenuItem>
                <MudMenuItem OnClick="@(() => GoTo("Login"))">Log in</MudMenuItem>
            </MudMenu>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    public string PortraitUrl { get; set; } = "/images/def-char-img.webp";
    public IEnumerable<CharacterDTO> Characters { get; set; } = new List<CharacterDTO>();
    public UserInfo? UserInfo {get;set;} = null; 


    void GoTo(string panel)
    {
        if (panel == "Register")
            _navigationManager.NavigateTo("Account/Register");
        else if (panel == "Login")
            _navigationManager.NavigateTo("Account/Login");
        else if (panel == "Logout")
            _navigationManager.NavigateTo("Account/Logout");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        UserInfo = await _userService.GetUserInfo();
        PortraitUrl = "/images/def-char-img.webp";
        if (UserInfo is null || UserInfo?.UserName is null)
            return;

        if (UserInfo?.IsAdminOrMG == true)
        {
            Characters = await _characterRepository.GetAllApproved();
        }
        else
        {
            Characters = await _characterRepository.GetAllApproved(UserInfo?.UserName);
        }

        if(UserInfo.SelectedCharacterId > 0)
        {
            UserInfo.SelectedCharacter = Characters.FirstOrDefault(u => u.Id == UserInfo.SelectedCharacterId);
            UserInfo = await _userService.GetUserInfo();
        }
        else if (Characters.Any() && UserInfo.IsAdminOrMG == false)
        {
            UserInfo.SelectedCharacter = Characters.First();
            await _userService.SetSelectedCharId(UserInfo.SelectedCharacter.Id);         
            UserInfo = await _userService.GetUserInfo();
        }
        else if (UserInfo.IsAdminOrMG == true){
            await _userService.SetSelectedCharId(-1);
            UserInfo = await _userService.GetUserInfo();
        }

        if (UserInfo?.SelectedCharacter?.ImageUrl is not null)
        {
            PortraitUrl = UserInfo.SelectedCharacter.ImageUrl;
        }
        
        if (UserInfo?.SelectedCharacter is not null)
            callbackService.SetSelectedChar((int)UserInfo?.SelectedCharacter?.Id);
    }

    private async Task SelectCharacter(CharacterDTO? character = null)
    {
        try{
            if (UserInfo is null || UserInfo?.UserName is null)
                return;
            if(character == null)
                await _userService.SetSelectedCharId(-1); // set a GM
            else
                await _userService.SetSelectedCharId(character.Id);
            UserInfo = await _userService.GetUserInfo();


            if (UserInfo?.SelectedCharacter?.ImageUrl is not null)
            {
                PortraitUrl = UserInfo.SelectedCharacter.ImageUrl;
            }
            else
            {
                PortraitUrl = "/images/def-char-img.webp";
            }
            callbackService.SetSelectedChar((int)UserInfo?.SelectedCharacter?.Id);
        }
        catch(Exception ex)
        {
            _snackbar.Add("Error: " + ex.Message, Severity.Error);
        }
    }

    private async Task RefreshCharacters()
    {
        UserInfo = await _userService.GetUserInfo();
        if (UserInfo is null || UserInfo?.UserName is null)
            UserInfo = await _userService.GetUserInfo();
        if (UserInfo is null|| UserInfo?.UserName is null)
            return;

        if (UserInfo?.IsAdminOrMG == true)
        {
            Characters = await _characterRepository.GetAllApproved();
        }
        else
        {
            Characters = await _characterRepository.GetAllApproved(UserInfo?.UserName);
        }     
    }
}
